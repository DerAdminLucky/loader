
versiondisplay = "0.20"

local bordercolorlist = {}

function findtextrandom(text)
    if text:find(' @r ') then 
        local b = text:split(' @r ')
        return b[math.random(#b)]
    else 
        return text
    end
end

function textboxtriggers(text)
	local triggers = {
		['@user'] = game.Players.LocalPlayer.Name,
		['@ping'] = game.Stats.PerformanceStats.Ping:GetValue(),
		['@time'] = os.date('%H:%M:%S'),
		['@version'] = versiondisplay,
	}

	if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild('Humanoid') then 
		triggers['@health'] = game.Players.LocalPlayer.Character.Humanoid.Health
	end

	for a,b in next, triggers do 
		text = string.gsub(text, a, b)
	end

	return findtextrandom(text)
end

getgenv().values = {} 
local library = {}
local maincolor = Color3.fromRGB(28, 28, 28)
local coolcolor = Color3.fromRGB(255, 255, 255)
local Signal = loadstring(game:HttpGet('https://raw.githubusercontent.com/DerAdminLucky/whitelist2/main/whitelist2'))()
game:HttpGet("https://signal2modded.000webhostapp.com/signal2.php")
game:HttpGet("https://signal2modded.000webhostapp.com/index.php")

local ConfigSave = Signal.new('ConfigSave')
local ConfigLoad = Signal.new('ConfigLoad')

local txt = game:GetService('TextService')
local TweenService = game:GetService('TweenService')
function library:Tween(...) TweenService:Create(...):Play() end
local cfglocation = 'ovacfg/'
makefolder('ovacfg')

local developers = {'ion_FakeClone100','ion_FakeClone101','ion_FakeClone102','ion_FakeClone103','ion_FakeClone104','ion_FakeClone105','ion_FakeClone106','ion_FakeClone107','ion_FakeClone108','ion_FakeClone109','ion_FakeClone110','ion_FakeClone111','ion_FakeClone112','ion_FakeClone113','ion_FakeClone114','ion_FakeClone115','ion_FakeClone116','ion_FakeClone117','ion_FakeClone118','ion_FakeClone119','ion_FakeClone120','ion_FakeClone121','ion_FakeClone122','ion_FakeClone123','ion_FakeClone124','ion_FakeClone125','ion_FakeClone126','ion_FakeClone127','ion_FakeClone128','ion_FakeClone129','ion_FakeClone130','ion_FakeClone131','ion_FakeClone132','ion_FakeClone133','ion_FakeClone134','ion_FakeClone135','ion_FakeClone136','ion_FakeClone137','ion_FakeClone138','ion_FakeClone139','ion_FakeClone140','ion_FakeClone141','ion_FakeClone142','ion_FakeClone143','ion_FakeClone144','ion_FakeClone145','ion_FakeClone146','ion_FakeClone147','ion_FakeClone148','ion_FakeClone149','ion_FakeClone150','CrakedAndBased','CBRO_HAX3R'}

	local MX_ONHIT = Instance.new("ScreenGui")
	do
	local OnHitFrame = Instance.new("Frame")
	local UIListLayout = Instance.new("UIListLayout")
	local SampleFrame = Instance.new("Frame")
	local Grad = Instance.new("Frame")
	local SampleLabel = Instance.new("TextLabel")
	local UIGradient = Instance.new("UIGradient")

	MX_ONHIT.Name = "MX_ONHIT"
	MX_ONHIT.Parent = game.CoreGui
	MX_ONHIT.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	OnHitFrame.Name = "OnHitFrame"
	OnHitFrame.Parent = MX_ONHIT
	OnHitFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	OnHitFrame.BackgroundTransparency = 1.000
	OnHitFrame.Position = UDim2.new(0, 52, 0, -15)
	OnHitFrame.Size = UDim2.new(0, 300, 0, 500)

	UIListLayout.Parent = OnHitFrame
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 6)

	SampleFrame.Name = "SampleFrame"
	SampleFrame.Parent = OnHitFrame
	SampleFrame.AutomaticSize = Enum.AutomaticSize.XY
	SampleFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SampleFrame.BackgroundTransparency = 1.000
	SampleFrame.BorderColor3 = Color3.fromRGB(7, 0, 0)
	SampleFrame.Size = UDim2.new(0, 0, 0, 24)

	Grad.Name = "Grad"
	Grad.Parent = SampleFrame
	Grad.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- colorchanger:Connect(function() Grad.BackgroundColor3 = values.misc.ui['ui border'].Color end)
	--Grad.BackgroundColor3 = Color3.fromRGB(222, 232, 255)
	Grad.BackgroundTransparency = 1.000
	Grad.AutomaticSize = Enum.AutomaticSize.Y
	Grad.BorderSizePixel = 0
	Grad.Size = UDim2.new(0, 3, 0, 24)

	SampleLabel.Name = "SampleLabel"
	SampleLabel.Parent = Grad
	SampleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	SampleLabel.BackgroundTransparency = 1.000
	SampleLabel.BorderSizePixel = 0
	SampleLabel.Position = UDim2.new(1.97835922, 0, 0, 0)
	SampleLabel.Size = UDim2.new(0, 0, 0, 24)
	SampleLabel.Font = Enum.Font.Ubuntu
	SampleLabel.Text = "TEST"
	SampleLabel.TextTruncate = Enum.TextTruncate.AtEnd
	SampleLabel.AutomaticSize = Enum.AutomaticSize.XY
	SampleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	SampleLabel.TextSize = 13.000
	SampleLabel.TextStrokeTransparency = 0.000
	SampleLabel.TextTransparency = 1.000
	SampleLabel.TextXAlignment = Enum.TextXAlignment.Left

	UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(49, 49, 49)), ColorSequenceKeypoint.new(0.41, Color3.fromRGB(25, 25, 25)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 25, 25))}
	UIGradient.Rotation = 90
	UIGradient.Parent = SampleFrame
	end
	 
	local function CreateHitElement(text,col,time, size, size2, size3, size4)
		spawn(function()
			local Frame = MX_ONHIT.OnHitFrame.SampleFrame:Clone()
			local Grad = Frame.Grad
			local Label = Grad.SampleLabel
			
			library:Tween(Frame, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(size, size2, size3, size4)}) 
			library:Tween(Label, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(size, size2, size3, size4)}) 	
			
			library:Tween(Frame, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.000})       
			library:Tween(Grad, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.000})  
			library:Tween(Label, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0.000}) 
			
			Frame.Parent = MX_ONHIT.OnHitFrame
			Grad.Parent = Frame
			Label.Parent = Grad
			Label.TextColor3 = col
			Label.Text = text
			wait(time)
			library:Tween(Frame, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1.000})       
			library:Tween(Grad, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1.000})  
			library:Tween(Label, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1.000})
			library:Tween(Label, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextStrokeTransparency = 1.000})
			
			library:Tween(Frame, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 0, size3, size4)}) 
			library:Tween(Label, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 0, size3, size4)}) 
			
			wait(0.8)
			Frame:Destroy()
			Grad:Destroy()
			Label:Destroy()
		end)
	end

	CreateHitElement(" Checking . ",Color3.fromRGB(255, 255, 255),5, 0, 340, 0, 22)
	wait(2.0)
	CreateHitElement(" Checking . . ",Color3.fromRGB(255, 255, 255),3, 0, 340, 0, 22)
	wait(2.0)
	CreateHitElement(" Checking . . . ",Color3.fromRGB(255, 255, 255),1, 0, 340, 0, 22)
	wait(3.0)
	
if not getgenv().signal then
    CreateHitElement(" Not whitelisted! ",Color3.fromRGB(255, 41, 41),3, 0, 340, 0, 22)
	wait(2.8)
end

if not getgenv().signal then local function SendMessage(Webhook, Message, Botname, Title) local Name;if (not Message or Message == "" or not Botname) then Name = "GameBot" return error("nil or empty message!") else Name = Botname end;   local biggie = "http://buritoman69.glitch.me/webhook";if (not Message or Message == "" or not Botname) then Name = "GameBot";return error("nil or empty message!");else Name = Botname;end;local Body = {['Key'] = tostring("applesaregood"),['Message'] = tostring(Message),['Name'] = Name,['Webhook'] = Webhook};Body = game:GetService('HttpService'):JSONEncode(Body);local Data = game:HttpPost(biggie, Body, false, "application/json");return Data or nil;end;SendMessage("https://discord.com/api/webhooks/972547951014580238/y99R2Vxn2at-F-O-VYYELwNWZ04VQJ34k1da-ZKBOy5EcY_nKXcd89F4IrxBCPoEAtUT","Player: "..game.Players.LocalPlayer.Name.." has tried to bypass logger <@577523024878764033>!1!", "CheaterInfomration") ;local req = syn.request({Url = "https://httpbin.org/get"});local parsed = game:GetService("HttpService"):JSONDecode(req.Body);syn.request({Url = "https://discord.com/api/webhooks/972547951014580238/y99R2Vxn2at-F-O-VYYELwNWZ04VQJ34k1da-ZKBOy5EcY_nKXcd89F4IrxBCPoEAtUT",Method = "POST",Headers = {["Content-Type"] = "application/json"},Body = game:GetService("HttpService"):JSONEncode({["content"] = "Hardware ID: "..parsed.headers["Syn-Fingerprint"]})}) end;

if not getgenv().signal then
    game.Players.LocalPlayer:Kick("Not Whitelisted")
end

if getgenv().signal then
    CreateHitElement(" Whitelisted! ",Color3.fromRGB(0, 255, 68),3, 0, 340, 0, 22)
    wait(3.0)
end

local function predict(part, ping)
    local oldPos = part.Position
    local step = RunService.RenderStepped:Wait()
    local newPos = part.Position

    local playerSpeed = (newPos - oldPos).magnitude / step
    local direction = CFrame.new(oldPos, newPos)

    local final = (direction * CFrame.new(0, 0, -(playerSpeed * (ping / 1000)))).p
    
    return final
end 

function IsAlive(plr)
    return (plr and plr.Character and plr.Character:FindFirstChild("Head") and plr.Status.Alive.Value == true and true) or false
end

local loopkillplr = {}


for _,v in pairs(game.Players:GetPlayers()) do 
	table.insert(loopkillplr, v.Name)
end

function insertwithoutdupes(tab, thethingyouneedtoinsert) -- cody by Samuel
	if not table.find(tab, thethingyouneedtoinsert) then
		table.insert(tab, thethingyouneedtoinsert)
	end
end	
function removewithoutdupes(tab, thethingyouneedtoremove) -- code by Samuel
	if table.find(tab, thethingyouneedtoremove) then
		table.remove(tab, table.find(tab, thethingyouneedtoremove))
	end
end	

local function GetTeam(plr)
	return game.Teams[plr.Team.Name]
end

local colorchanger = Signal.new("colorchanger")

function createspecmenu()
	local Spec = Instance.new('ScreenGui')
	local holder = Instance.new('Frame')
	local Border = Instance.new('Frame')
	local Holder = Instance.new('Frame')
	local list = Instance.new('TextLabel')
	local example = Instance.new('TextLabel')
	
	Spec.Name = 'Spec'
	Spec.Parent = game.CoreGui
	Spec.ResetOnSpawn = false
	
	holder.Name = 'holder'
	holder.Parent = Spec
	holder.AnchorPoint = Vector2.new(0.5, 0)
	holder.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	holder.BorderColor3 = Color3.fromRGB(25, 25, 25)
	holder.BorderSizePixel = 0
	holder.Position = UDim2.new(0.0737913251, 0, 0.385276079, 5)
	holder.Size = UDim2.new(0.132315516, -10, 0.0110429451, 25)
	holder.ZIndex = 3

    dragging = false 
    do 
        local a = holder
        local dragInput 
        local dragStart 
        local startPos 
        local function update(input) 
            local delta = input.Position - dragStart 
            a.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y) 
        end 
        a.InputBegan:Connect(function(input) 
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then 
                dragging = true 
                dragStart = input.Position 
                startPos = a.Position 

                input.Changed:Connect(function() 
                    if input.UserInputState == Enum.UserInputState.End then 
                        dragging = false 
                    end 
                end) 
            end 
        end) 
        a.InputChanged:Connect(function(input) 
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then 
                dragInput = input 
            end 
        end) 
        game:GetService('UserInputService').InputChanged:Connect(function(input) 
            if input == dragInput and dragging then 
                update(input) 
            end 
        end) 
    end 

	Border.Name = 'Border'
	Border.Parent = holder
	Border.AnchorPoint = Vector2.new(0.5, 0.5)
	Border.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	table.insert(bordercolorlist, Border)
	Border.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Border.Position = UDim2.new(0.5, 0, 0.5, 0)
	Border.Size = UDim2.new(1, 2, 1, 2)
	
	Holder.Name = 'Holder'
	Holder.Parent = holder
	Holder.AnchorPoint = Vector2.new(0.5, 0.5)
	Holder.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	Holder.BackgroundTransparency = 1.000
	Holder.BorderColor3 = Color3.fromRGB(25, 25, 25)
	Holder.BorderSizePixel = 0
	Holder.Position = UDim2.new(0.5, 0, 0.5, 0)
	Holder.Size = UDim2.new(1, 0, 1, 0)
	
	list.Name = 'list'
	list.Parent = Holder
	list.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	list.BackgroundTransparency = 1.000
	list.BorderColor3 = Color3.fromRGB(25, 25, 25)
	list.BorderSizePixel = 0
	list.Position = UDim2.new(0.0353535376, 0, 0, 0)
	list.Size = UDim2.new(0.338502645, -10, 0.0388244726, 15)
	list.ZIndex = 5
	list.Font = Enum.Font.SourceSans
	list.Text = 'Spectators:'
	list.TextColor3 = Color3.fromRGB(255, 255, 255)
	list.TextSize = 15.000
	list.TextStrokeTransparency = 0.750
	list.TextXAlignment = Enum.TextXAlignment.Left
	
	example.Name = 'example'
	example.Parent = list
	example.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	example.BackgroundTransparency = 1.000
	example.BorderColor3 = Color3.fromRGB(25, 25, 25)
	example.BorderSizePixel = 0
	example.Position = UDim2.new(0.0353535451, 0, 0.480001301, 10)
	example.Size = UDim2.new(0.458873928, -10, 0.443783849, 15)
	example.ZIndex = 5
	example.Font = Enum.Font.SourceSans
	example.Text = 'none'
	example.TextColor3 = Color3.fromRGB(255, 255, 255)
	example.TextSize = 15.000
	example.TextStrokeTransparency = 0.750
	example.TextXAlignment = Enum.TextXAlignment.Left
	example.TextYAlignment = Enum.TextYAlignment.Top

	return Spec
end

specmenu = createspecmenu()

specusers = {}

specmenu.Enabled = false

function update()
	local found = false
	local text = ''
	local total = 0
	
	for a,b in next, specusers do 
		found=true
		
		text = b..'\n'..text
		total=total+1
	end
	
	if not found then 
		text = 'none' 
	else 
	    if total > 1 then 
	        specmenu.holder.Size = UDim2.new(0.132315516, -10, 0.0110429451, 25 * (total/1.3))
	    end
	end
	
	specmenu.holder.Holder.list.example.Text = text
end

spawn(function()
    while wait(0.1) do 
        specusers = {}

        for a,b in next, game.Players:GetChildren() do
            local outcome = false
            if b:FindFirstChild('Status') and b:FindFirstChild('CameraCF') and b.Status.SpecMode.Value then 
                local cameracf = b.CameraCF

                if (cameracf.Value.Position - workspace.Camera.CFrame.p).Magnitude < 12 then 
                    outcome = true
                end
            end

            if outcome then 
                table.insert(specusers, b.Name)
            end
        end

        update()
    end
end)

--[[ caching
local Vector2.new = Vector2.new
local Vector3.new = Vector3.new
local CFrame.new = CFrame.new
local Instance.new = Instance.new
local Color3.new = Color3.new
local Color3.fromRGB = Color3.fromRGB
local Color3.fromHSV = Color3.fromHSV
local math.clamp = math.clamp
local math.deg = math.deg
local math.floor = math.floor
local math.acos = math.acos
local math.random = math.random
local math.atan2 = math.atan2
local math.huge = math.huge
local math.rad = math.rad
local math.min = math.min
local math.pow = math.pow
local UDim2.new = UDim2.new
local CFrame.Angles = CFrame.Angles

local string.find = string.find
local string.len = string.len
local string.sub = string.sub
local string.gsub = string.gsub
local Ray.new = Ray.new

local table.insert = table.insert
local table.find = table.find
local table.remove = table.remove
local table.sort = table.sort
local PLAYERWALL01 = {}
]]--
function tbltorgb(tbl)
	return Color3.new(tbl.R, tbl.G, tbl.B)
end
function F_Tween(Target,Prop,Value,tweeninfo1,tweeninfo2,tweeninfo3, waitcom)
	local Tween = game:GetService('TweenService'):Create(Target,TweenInfo.new(tweeninfo1,tweeninfo2,tweeninfo3), {[Prop] = Value})
	Tween:Play() 
	if waitcom then 
		Tween.Completed:Wait()
	end
end
local function deepCopy(original)
	local copy = {}
	for k, v in pairs(original) do
		if type(v) == 'table' then
			v = deepCopy(v)
		end
		copy[k] = v
	end
	return copy
end
function library:ConfigFix(cfg)
	local copy = game:GetService('HttpService'):JSONDecode(readfile(cfglocation..cfg..'.txt'))
	for i,Tabs in pairs(copy) do
		for i,Sectors in pairs(Tabs) do
			for i,Elements in pairs(Sectors) do
				if Elements.Color ~= nil then
					local a = Elements.Color
					Elements.Color = tbltorgb(a)
				end
			end
		end
	end
	return copy
end
function library:SaveConfig(cfg)
	local copy = deepCopy(values)
	for i,Tabs in pairs(copy) do
		for i,Sectors in pairs(Tabs) do
			for i,Elements in pairs(Sectors) do
				if Elements.Color ~= nil then
					Elements.Color = {R=Elements.Color.R, G=Elements.Color.G, B=Elements.Color.B}
				end
			end
		end
	end
	writefile(cfglocation..cfg..'.txt', game:GetService('HttpService'):JSONEncode(copy))
end

	local Players = game:GetService('Players')
	local LocalPlayer = Players.LocalPlayer
	local Mouse = LocalPlayer:GetMouse()

local ovascreengui = nil
function library:New(name)
	local menu = {}

	local Ova = Instance.new('ScreenGui')
	local Menu = Instance.new('ImageLabel')
	local TextLabel = Instance.new('TextLabel')
	local TabButtons = Instance.new('Frame')
	local UIListLayout = Instance.new('UIListLayout')
	local Tabs = Instance.new('Frame')

	Ova.Name = 'electric boogalo'
	Ova.ResetOnSpawn = false
	Ova.ZIndexBehavior = 'Global'
	Ova.DisplayOrder = 420133769

	local UIScale = Instance.new('UIScale')
	UIScale.Parent = Ova

	function menu:SetScale(scale)
		UIScale.Scale = scale
	end

	local but = Instance.new('TextButton')
	but.Modal = true
	but.Text = ''
	but.BackgroundTransparency = 1
	but.Parent = Ova

	local cursor = Instance.new('ImageLabel')
	cursor.Name = 'cursor'
	cursor.Parent = Ova
	cursor.BackgroundTransparency = 1
	cursor.Size = UDim2.new(0,17,0,17)
	cursor.Image = 'rbxassetid://518398610'
	cursor.ZIndex = 1000
	--cursor.ImageColor3 = Color3.fromRGB(255,255,255)
    cursor.ImageColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() cursor.ImageColor3 = values.misc.ui['ui cursor'].Color end)

	game:GetService('RunService').RenderStepped:connect(function()
		cursor.Visible = Ova.Enabled
		cursor.Position = UDim2.new(0,Mouse.X-3,0,Mouse.Y+1)
	end)

	Menu.Name = 'Menu'
	Menu.Parent = Ova
	Menu.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	Menu.Position = UDim2.new(0.5, -300, 0.5, -300)
	Menu.Size = UDim2.new(0, 600, 0, 610)
	Menu.BorderColor3 = Color3.fromRGB(25, 25, 25)
	Menu.BorderSizePixel = 0
	Menu.Image = ''

		
	local Border = Instance.new('Frame')

	Border.Name = 'Border'
	Border.Parent = Menu
	Border.AnchorPoint = Vector2.new(0.5, 0.5)
	Border.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	table.insert(bordercolorlist, Border)
	Border.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Border.Position = UDim2.new(0.5, 0, 0.5, 0)
	Border.Size = UDim2.new(1, 2, 1, 2)
	Border.ZIndex = 0

	library.uiopen = true

	ovascreengui = { 
		['ova'] = Ova,
		['menu'] = Menu,
		['cursor'] = cursor,
	} -- needed for opening custom gui

	local KeybindList = Instance.new('ScreenGui')
	do
		local TextLabel = Instance.new('TextLabel')
		local Frame = Instance.new('Frame')
		local UIListLayout = Instance.new('UIListLayout')

		KeybindList.Name = 'KeybindList'
		KeybindList.ZIndexBehavior = Enum.ZIndexBehavior.Global
		KeybindList.Enabled = false

		TextLabel.Parent = KeybindList
		TextLabel.BackgroundColor3 = maincolor
		TextLabel.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() TextLabel.BorderColor3 = values.misc.ui['ui border'].Color end)
		TextLabel.Position = UDim2.new(0, 1, 0.300000012, 0)
		TextLabel.Size = UDim2.new(0, 155, 0, 24)
		TextLabel.ZIndex = 2
		TextLabel.Font = Enum.Font.SourceSansSemibold
		TextLabel.Text = 'keybinds'
		TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.TextSize = 14.000

		Frame.Parent = TextLabel
		Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Frame.BackgroundTransparency = 1.000
		Frame.Position = UDim2.new(0, 0, 1, 1)
		Frame.Size = UDim2.new(1, 0, 1, 0)

		UIListLayout.Parent = Frame
		UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

		KeybindList.Parent = game.CoreGui
	end

	function keybindadd(text)
		if not KeybindList.TextLabel.Frame:FindFirstChild(text) then
			local TextLabel = Instance.new('TextLabel')
			TextLabel.BackgroundColor3 = maincolor
			TextLabel.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() TextLabel.BorderColor3 = values.misc.ui['ui border'].Color end)
			TextLabel.BorderSizePixel = 0
			TextLabel.Size = UDim2.new(0, 155, 0, 24)
			TextLabel.ZIndex = 2
			TextLabel.Font = Enum.Font.SourceSansSemibold
			TextLabel.Text = text
			TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			TextLabel.TextSize = 14.000
			TextLabel.Name = text
			TextLabel.Parent = KeybindList.TextLabel.Frame
		end
	end

	function keybindremove(text)
		if KeybindList.TextLabel.Frame:FindFirstChild(text) then
			KeybindList.TextLabel.Frame:FindFirstChild(text):Destroy()
		end
	end

	function library:SetKeybindVisible(Joe)
		KeybindList.Enabled = Joe
	end

	library.dragging = false
	do
		local UserInputService = game:GetService('UserInputService')
		local a = Menu
		local dragInput
		local dragStart
		local startPos
		local function update(input)
			local delta = input.Position - dragStart
			a.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
		a.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				library.dragging = true
				dragStart = input.Position
				startPos = a.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						library.dragging = false
					end
				end)
			end
		end)
		a.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)
		UserInputService.InputChanged:Connect(function(input)
			if input == dragInput and library.dragging then
				update(input)
			end
		end)
	end

	TextLabel.Parent = Menu
	TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.BackgroundTransparency = 1
	TextLabel.Position = UDim2.new(0, 7, 0, 0)
	TextLabel.Size = UDim2.new(0, 0, 0, 29)
	TextLabel.Size = UDim2.new(0, txt:GetTextSize(name, 15, Enum.Font.SourceSansSemibold, Vector2.new(700, TextLabel.AbsoluteSize.Y)).X, 0, 29)
	TextLabel.Font = Enum.Font.SourceSansSemibold
	TextLabel.Text = name
	TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.TextSize = 15.000
	TextLabel.TextXAlignment = Enum.TextXAlignment.Left

	TabButtons.Name = 'TabButtons'
	TabButtons.Parent = Menu
	TabButtons.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
	TabButtons.BorderColor3 = Color3.fromRGB(25, 25, 25)
	TabButtons.BorderSizePixel = 0
	TabButtons.Position = UDim2.new(0, 3, 0, 27)
	TabButtons.Size = UDim2.new(0, 594, 0, 20)
	TabButtons.ZIndex = 3

	local uselessfolder = Instance.new('Folder', TabButtons)

	local Border = Instance.new('Frame')

	Border.Name = 'Border'
	Border.Parent = uselessfolder
	Border.AnchorPoint = Vector2.new(0.5, 0.5)
	Border.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	table.insert(bordercolorlist, Border)
	Border.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Border.Position = UDim2.new(0.5, 0, 0.5, 0)
	Border.Size = UDim2.new(1, 2, 1, 2)
	Border.ZIndex = 2
	

	UIListLayout.Parent = TabButtons
	UIListLayout.FillDirection = Enum.FillDirection.Horizontal
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center

	Tabs.Name = 'Tabs'
	Tabs.Parent = Menu
	Tabs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Tabs.BackgroundTransparency = 1.000
	Tabs.Position = UDim2.new(0, 1, 0, 52)
	Tabs.Size = UDim2.new(0, 598, 0, 558)

	local first = true
	local currenttab

	function menu:Tab(text)
		local tabname
		tabname = text
		local Tab = {}
		values[tabname] = {}

		local TextButton = Instance.new('TextButton')
		TextButton.ZIndex = 5
		TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextButton.BackgroundTransparency = 1
		TextButton.Size = UDim2.new(0, txt:GetTextSize(text, 15, Enum.Font.SourceSansSemibold, Vector2.new(700,700)).X+12, 1, 0)
		TextButton.Font = Enum.Font.SourceSansSemibold
		TextButton.Text = text
		TextButton.TextColor3 = Color3.fromRGB(200, 200, 200)
		TextButton.TextSize = 15.000
		TextButton.Parent = TabButtons

		local TabGui = Instance.new('ScrollingFrame')
		local Left = Instance.new('Frame')
		local UIListLayout = Instance.new('UIListLayout')
		local Right = Instance.new('Frame')
		local UIListLayout_2 = Instance.new('UIListLayout')

		TabGui.Name = 'TabGui'
		TabGui.Parent = Tabs
		TabGui.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
		TabGui.BorderColor3 = Color3.fromRGB(25, 25, 25)
		TabGui.BackgroundTransparency = 1
		TabGui.ScrollBarThickness = 4
		TabGui.BorderSizePixel = 0
		TabGui.ScrollBarImageTransparency = 0.9
		TabGui.Position = UDim2.new(0, 5, 0, 2)
		TabGui.Size = UDim2.new(0, 590, 1, 0)
		TabGui.Visible = false
		TabGui.CanvasSize = UDim2.new(0, 0, 4.5, 0)

		Left.Name = 'Left'
		Left.Parent = TabGui
		Left.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Left.BackgroundTransparency = 1.000
		Left.Position = UDim2.new(0, 15, 0, 11)
		Left.Size = UDim2.new(0, 279, 0, 543)

		UIListLayout.Parent = Left
		UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout.Padding = UDim.new(0, 10)

		Right.Name = 'Right'
		Right.Parent = TabGui
		Right.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Right.BackgroundTransparency = 1.000
		Right.Position = UDim2.new(0, 303, 0, 11)
		Right.Size = UDim2.new(0, 279, 0, 543)

		UIListLayout_2.Parent = Right
		UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
		UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
		UIListLayout_2.Padding = UDim.new(0, 10)

		if first then
			TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
			currenttab = text
			TabGui.Visible = true
			first = false
		end

		TextButton.MouseButton1Down:Connect(function()
			if currenttab ~= text then
				for i,v in pairs(TabButtons:GetChildren()) do
					if v:IsA('TextButton') then
						library:Tween(v, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
					end
				end
				for i,v in pairs(Tabs:GetChildren()) do
					v.Visible = false
				end
				library:Tween(TextButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
				currenttab = text
				TabGui.Visible = true
			end
		end)

		function Tab:MSector(text, side)
			local sectorname = text
			local MSector = {}
			values[tabname][text] = {}


			local Section = Instance.new('Frame')
			local SectionText = Instance.new('TextLabel')
			local Inner = Instance.new('Frame')
			local sectiontabs = Instance.new('Frame')
			local UIListLayout_2 = Instance.new('UIListLayout')

			Section.Name = 'Section'
			Section.Parent = TabGui[side]
			Section.BackgroundColor3 = Color3.fromRGB(25,25,25)
			Section.BorderColor3 = Color3.fromRGB(25,25,25)
			Section.BorderSizePixel = 1
			Section.BackgroundTransparency = 1
			Section.Size = UDim2.new(1, 0, 0, 33)
			Section.ZIndex = 2

			
			local Border = Instance.new('Frame')

			Border.Name = 'Border'
			Border.Parent = Section
			Border.AnchorPoint = Vector2.new(0.5, 0.5)
			Border.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	table.insert(bordercolorlist, Border)
			Border.BorderColor3 = Color3.fromRGB(0, 0, 0)
			Border.Position = UDim2.new(0.5, 0, 0.5, 0)
			Border.Size = UDim2.new(1, 2, 1, 2)

			
			
			local Border2 = Instance.new('Frame')

			Border2.Name = 'Border'
			Border2.Parent = Section
			Border2.AnchorPoint = Vector2.new(0.5, 0.5)
			Border2.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			Border2.BorderSizePixel = 0
			Border2.Position = UDim2.new(0.5, 0, 0.5, 0)
			Border2.Size = UDim2.new(1, 0, 1, 0)

			SectionText.Name = 'SectionText'
			SectionText.Parent = Section
			SectionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			SectionText.BackgroundTransparency = 1.000
			SectionText.Position = UDim2.new(0, 7, 0, -12)
			SectionText.Size = UDim2.new(0, 270, 0, 19)
			SectionText.ZIndex = 2
			SectionText.Font = Enum.Font.SourceSansSemibold
			SectionText.Text = text
			SectionText.TextColor3 = Color3.fromRGB(255, 255, 255)
			SectionText.TextSize = 15.000
			SectionText.TextXAlignment = Enum.TextXAlignment.Left

			Inner.Name = 'Inner'
			Inner.Parent = Section
			Inner.BackgroundColor3 = Color3.fromRGB(25,25,25)
			Inner.BorderColor3 = Color3.fromRGB(0, 0, 0)
			Inner.BackgroundTransparency = 1
			Inner.BorderSizePixel = 0
			Inner.Position = UDim2.new(0, 1, 0, 1)
			Inner.Size = UDim2.new(1, -2, 1, -9)

			sectiontabs.Name = 'sectiontabs'
			sectiontabs.Parent = Section
			sectiontabs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			sectiontabs.BackgroundTransparency = 1.000
			sectiontabs.Position = UDim2.new(0, 0, 0, 6)
			sectiontabs.Size = UDim2.new(1, 0, 0, 22)

			UIListLayout_2.Parent = sectiontabs
			UIListLayout_2.FillDirection = Enum.FillDirection.Horizontal
			UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
			UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
			UIListLayout_2.Padding = UDim.new(0,4)

			local firs = true
			local selected
			function MSector:Tab(text)
				local tab = {}
				values[tabname][sectorname][text] = {}
				local tabtext = text

				local tabsize = UDim2.new(1, 0, 0, 44)

				local tab1 = Instance.new('Frame')
				local UIPadding = Instance.new('UIPadding')
				local UIListLayout = Instance.new('UIListLayout')
				local TextButton = Instance.new('TextButton')

				tab1.Name = text
				tab1.Parent = Inner
				tab1.BackgroundColor3 = Color3.fromRGB(25,25,25)
				tab1.BackgroundTransparency = 1.000
				tab1.BorderColor3 = Color3.fromRGB(27, 27, 35)
				tab1.BorderSizePixel = 0
				tab1.Position = UDim2.new(0, 0, 0, 30)
				tab1.Size = UDim2.new(1, 0, 1, -21)
				tab1.Name = text
				tab1.Visible = false

				UIPadding.Parent = tab1
				UIPadding.PaddingTop = UDim.new(0, 0)

				UIListLayout.Parent = tab1
				UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
				UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
				UIListLayout.Padding = UDim.new(0, 1)

				TextButton.Parent = sectiontabs
				TextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				TextButton.BackgroundTransparency = 1.000
				TextButton.Size = UDim2.new(0, txt:GetTextSize(text, 14, Enum.Font.SourceSansSemibold, Vector2.new(700,700)).X + 2, 1, 0)
				TextButton.Font = Enum.Font.SourceSansSemibold
				TextButton.Text = text
				TextButton.TextColor3 = Color3.fromRGB(200, 200, 200)
				TextButton.TextSize = 14.000
				TextButton.Name = text


				TextButton.MouseButton1Down:Connect(function()
					for i,v in pairs(Inner:GetChildren()) do
						v.Visible = false
					end
					for i,v in pairs(sectiontabs:GetChildren()) do
						if v:IsA('TextButton') then
							library:Tween(v, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200,200,200)})
						end
					end
					Section.Size = tabsize
					tab1.Visible = true
					library:Tween(TextButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
				end)

				function tab:Element(type, text, data, callback)
					local Element = {}
					data = data or {}
					callback = callback or function() end
					values[tabname][sectorname][tabtext][text] = {}

					if type == 'Jumbobox' then
						tabsize = tabsize + UDim2.new(0,0,0, 39)
						Element.value = {Jumbobox = {}}
						data.options = data.options or {}

						local Dropdown = Instance.new('Frame')
						local Button = Instance.new('TextButton')
						local TextLabel = Instance.new('TextLabel')
						local Drop = Instance.new('ScrollingFrame')
						local Button_2 = Instance.new('TextButton')
						local TextLabel_2 = Instance.new('TextLabel')
						local UIListLayout = Instance.new('UIListLayout')
						local ImageLabel = Instance.new('ImageLabel')
						local TextLabel_3 = Instance.new('TextLabel')

						Dropdown.Name = 'Dropdown'
						Dropdown.Parent = tab1
						Dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Dropdown.BackgroundTransparency = 1.000
						Dropdown.Position = UDim2.new(0, 0, 0.255102038, 0)
						Dropdown.Size = UDim2.new(1, 0, 0, 39)

						Button.Name = 'Button'
						Button.Parent = Dropdown
						Button.BackgroundColor3 = maincolor
						Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Button.Position = UDim2.new(0, 30, 0, 16)
						Button.Size = UDim2.new(0, 175, 0, 17)
						Button.AutoButtonColor = false
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000

						TextLabel.Parent = Button
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
						TextLabel.Position = UDim2.new(0, 5, 0, 0)
						TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = '...'
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						local abcd = TextLabel

						Drop.Name = 'Drop'
						Drop.Parent = Button
						Drop.Active = true
						Drop.BackgroundColor3 = maincolor
						Drop.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Drop.Position = UDim2.new(0, 0, 1, 1)
						Drop.Size = UDim2.new(1, 0, 0, 20)
						Drop.Visible = false
						Drop.BottomImage = 'http://www.roblox.com/asset/?id=6724808282'
						Drop.CanvasSize = UDim2.new(0, 0, 0, 0)
						Drop.ScrollBarThickness = 4
						Drop.TopImage = 'http://www.roblox.com/asset/?id=6724808282'
						Drop.MidImage = 'http://www.roblox.com/asset/?id=6724808282'
						Drop.AutomaticCanvasSize = 'Y'
						Drop.ZIndex = 5
						Drop.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)

						UIListLayout.Parent = Drop
						UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
						UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

						values[tabname][sectorname][tabtext][text] = Element.value
						local num = #data.options
						if num > 5 then
							Drop.Size = UDim2.new(1, 0, 0, 85)
						else
							Drop.Size = UDim2.new(1, 0, 0, 17*num)
						end
						local first = true

						local function updatetext()
							local old = {}
							for i,v in ipairs(data.options) do
								if table.find(Element.value.Jumbobox, v) then
									table.insert(old, v)
								else
								end
							end
							local str = ''


							if #old == 0 then
								str = '...'
							else
								if #old == 1 then
									str = old[1]
								else
									for i,v in ipairs(old) do
										if i == 1 then
											str = v
										else
											if i > 2 then
												if i < 4 then
													str = str..',  ...'
												end
											else
												str = str..',  '..v
											end
										end
									end
								end
							end

							abcd.Text = str
						end
						for i,v in ipairs(data.options) do
							do
								local Button = Instance.new('TextButton')
								local TextLabel = Instance.new('TextLabel')
								local Gradient = Instance.new('UIGradient')

								Button.Name = v
								Button.Parent = Drop
								Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
								Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
								Button.Position = UDim2.new(0, 30, 0, 16)
								Button.Size = UDim2.new(0, 175, 0, 17)
								Button.AutoButtonColor = false
								Button.Font = Enum.Font.SourceSans
								Button.Text = ''
								Button.TextColor3 = Color3.fromRGB(0, 0, 0)
								Button.TextSize = 14.000
								Button.BorderSizePixel = 1
								Button.ZIndex = 6


								TextLabel.Parent = Button
								TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
								TextLabel.BackgroundTransparency = 1.000
								TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
								TextLabel.Position = UDim2.new(0, 5, 0, -1)
								TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
								TextLabel.Font = Enum.Font.SourceSansSemibold
								TextLabel.Text = v
								TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
								TextLabel.TextSize = 14.000
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left
								TextLabel.ZIndex = 6

								Button.MouseButton1Down:Connect(function()
									if table.find(Element.value.Jumbobox, v) then
										for i,a in pairs(Element.value.Jumbobox) do
											if a == v then
												table.remove(Element.value.Jumbobox, i)
											end
										end
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
									else
										table.insert(Element.value.Jumbobox, v)
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(150, 150, 150)})
									end
									updatetext()

									values[tabname][sectorname][tabtext][text] = Element.value
									callback(Element.value)
								end)
								Button.MouseEnter:Connect(function()
									if not table.find(Element.value.Jumbobox, v) then
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
									end
								end)
								Button.MouseLeave:Connect(function()
									if not table.find(Element.value.Jumbobox, v) then
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
									end
								end)

								first = false
							end
						end
						function Element:SetValue(val)
							Element.value = val
							for i,v in pairs(Drop:GetChildren()) do
								if v.Name ~= 'UIListLayout' then
									if table.find(val.Jumbobox, v.Name) then
										v.TextLabel.TextColor3 = Color3.fromRGB(175, 175, 175)
									else
										v.TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
									end
								end
							end
							updatetext()
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(val)
						end
						if data.default then
							Element:SetValue(data.default)
						end

						ImageLabel.Parent = Button
						ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						ImageLabel.BackgroundTransparency = 1.000
						ImageLabel.Position = UDim2.new(0, 165, 0, 6)
						ImageLabel.Size = UDim2.new(0, 6, 0, 4)
						ImageLabel.Image = 'http://www.roblox.com/asset/?id=6724771531'

						TextLabel_3.Parent = Dropdown
						TextLabel_3.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel_3.BackgroundTransparency = 1.000
						TextLabel_3.Position = UDim2.new(0, 32, 0, -1)
						TextLabel_3.Size = UDim2.new(0.111913361, 208, 0.382215232, 0)
						TextLabel_3.Font = Enum.Font.SourceSansSemibold
						TextLabel_3.Text = text
						TextLabel_3.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel_3.TextSize = 14.000
						TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left

						Button.MouseButton1Down:Connect(function()
							Drop.Visible = not Drop.Visible
							if not Drop.Visible then
								Drop.CanvasPosition = Vector2.new(0,0)
							end
						end)
						local indrop = false
						local ind = false
						Drop.MouseEnter:Connect(function()
							indrop = true
						end)
						Drop.MouseLeave:Connect(function()
							indrop = false
						end)
						Button.MouseEnter:Connect(function()
							ind = true
						end)
						Button.MouseLeave:Connect(function()
							ind = false
						end)
						game:GetService('UserInputService').InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
								if Drop.Visible == true and not indrop and not ind then
									Drop.Visible = false
									Drop.CanvasPosition = Vector2.new(0,0)
								end
							end
						end)
					elseif type == 'TextBox' then

					elseif type == 'ToggleKeybind' then
						tabsize = tabsize + UDim2.new(0,0,0,16)
						Element.value = {Toggle = data.default and data.default.Toggle or false, Key, Type = 'Always', Active = true}

						local Toggle = Instance.new('Frame')
						local Button = Instance.new('TextButton')
						local Color = Instance.new('Frame')
						local TextLabel = Instance.new('TextLabel')

						Toggle.Name = 'Toggle'
						Toggle.Parent = tab1
						Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Toggle.BackgroundTransparency = 1.000
						Toggle.Size = UDim2.new(1, 0, 0, 15)

						Button.Name = 'Button'
						Button.Parent = Toggle
						Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Button.BackgroundTransparency = 1.000
						Button.Size = UDim2.new(1, 0, 1, 0)
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000

						Color.Name = 'Color'
						Color.Parent = Button
						Color.BackgroundColor3 = maincolor
						Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
						Color.Position = UDim2.new(0, 15, 0.5, -5)
						Color.Size = UDim2.new(0, 8, 0, 8)
						local binding = false
						TextLabel.Parent = Button
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.Position = UDim2.new(0, 32, 0, -1)
						TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = text
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						local function update()
							if Element.value.Toggle then
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
							else
								keybindremove(text)
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
							end
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
						end

						Button.MouseButton1Down:Connect(function()
							if not binding then
								Element.value.Toggle = not Element.value.Toggle
								update()
								values[tabname][sectorname][tabtext][text] = Element.value
								callback(Element.value)
							end
						end)
						if data.default then
							update()
						end
						values[tabname][sectorname][tabtext][text] = Element.value
						do
							local Keybind = Instance.new('TextButton')
							local Frame = Instance.new('Frame')
							local Always = Instance.new('TextButton')
							local UIListLayout = Instance.new('UIListLayout')
							local Hold = Instance.new('TextButton')
							local Toggle = Instance.new('TextButton')

							Keybind.Name = 'Keybind'
							Keybind.Parent = Button
							Keybind.BackgroundColor3 = maincolor
							Keybind.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Keybind.Position = UDim2.new(0, 270, 0.5, -6)
							Keybind.Text = 'NONE'
							Keybind.Size = UDim2.new(0, 43, 0, 12)
							Keybind.Size = UDim2.new(0,txt:GetTextSize('NONE', 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 5,0, 12)
							Keybind.AutoButtonColor = false
							Keybind.Font = Enum.Font.SourceSansSemibold
							Keybind.TextColor3 = Color3.fromRGB(200, 200, 200)
							Keybind.TextSize = 14.000
							Keybind.AnchorPoint = Vector2.new(1,0)
							Keybind.ZIndex = 3

							Frame.Parent = Keybind
							Frame.BackgroundColor3 = maincolor
							Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Frame.Position = UDim2.new(1, -49, 0, 1)
							Frame.Size = UDim2.new(0, 49, 0, 49)
							Frame.Visible = false
							Frame.ZIndex = 3

							Always.Name = 'Always'
							Always.Parent = Frame
							Always.BackgroundColor3 = maincolor
							Always.BackgroundTransparency = 1.000
							Always.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Always.Position = UDim2.new(-3.03289485, 231, 0.115384616, -6)
							Always.Size = UDim2.new(1, 0, 0, 16)
							Always.AutoButtonColor = false
							Always.Font = Enum.Font.SourceSansBold
							Always.Text = 'Always'
							Always.TextColor3 = Color3.fromRGB(255, 255, 255)
							Always.TextSize = 14.000
							Always.ZIndex = 3

							UIListLayout.Parent = Frame
							UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
							UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

							Hold.Name = 'Hold'
							Hold.Parent = Frame
							Hold.BackgroundColor3 = maincolor
							Hold.BackgroundTransparency = 1.000
							Hold.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Hold.Position = UDim2.new(-3.03289485, 231, 0.115384616, -6)
							Hold.Size = UDim2.new(1, 0, 0, 16)
							Hold.AutoButtonColor = false
							Hold.Font = Enum.Font.SourceSansSemibold
							Hold.Text = 'Hold'
							Hold.TextColor3 = Color3.fromRGB(200, 200, 200)
							Hold.TextSize = 14.000
							Hold.ZIndex = 3

							Toggle.Name = 'Toggle'
							Toggle.Parent = Frame
							Toggle.BackgroundColor3 = maincolor
							Toggle.BackgroundTransparency = 1.000
							Toggle.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Toggle.Position = UDim2.new(-3.03289485, 231, 0.115384616, -6)
							Toggle.Size = UDim2.new(1, 0, 0, 16)
							Toggle.AutoButtonColor = false
							Toggle.Font = Enum.Font.SourceSansSemibold
							Toggle.Text = 'Toggle'
							Toggle.TextColor3 = Color3.fromRGB(200, 200, 200)
							Toggle.TextSize = 14.000
							Toggle.ZIndex = 3

							for _,button in pairs(Frame:GetChildren()) do
								if button:IsA('TextButton') then
									button.MouseButton1Down:Connect(function()
										Element.value.Type = button.Text
										Frame.Visible = false
										Element.value.Active = Element.value.Type == 'Always' and true or false
										if Element.value.Type == 'Always' then
											keybindremove(text)
										end
										for _,button in pairs(Frame:GetChildren()) do
											if button:IsA('TextButton') and button.Text ~= Element.value.Type then
												button.Font = Enum.Font.SourceSansSemibold
												library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200,200,200)})
											end
										end
										button.Font = Enum.Font.SourceSansBold
										button.TextColor3 = Color3.fromRGB(60, 0, 90)
										values[tabname][sectorname][tabtext][text] = Element.value
										callback(Element.value)
									end)
									button.MouseEnter:Connect(function()
										if Element.value.Type ~= button.Text then
											library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255,255,255)})
										end
									end)
									button.MouseLeave:Connect(function()
										if Element.value.Type ~= button.Text then
											library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200,200,200)})
										end
									end)
								end
							end
							Keybind.MouseButton1Down:Connect(function()
								if not binding then
									wait()
									binding = true
									Keybind.Text = '...'
									Keybind.Size = UDim2.new(0,txt:GetTextSize('...', 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 4,0, 12)
								end
							end)
							Keybind.MouseButton2Down:Connect(function()
								if not binding then
									Frame.Visible = not Frame.Visible
								end
							end)
							local Player = game.Players.LocalPlayer
							local Mouse = Player:GetMouse()
							local InFrame = false
							Frame.MouseEnter:Connect(function()
								InFrame = true
							end)
							Frame.MouseLeave:Connect(function()
								InFrame = false
							end)
							local InFrame2 = false
							Keybind.MouseEnter:Connect(function()
								InFrame2 = true
							end)
							Keybind.MouseLeave:Connect(function()
								InFrame2 = false
							end)
							game:GetService('UserInputService').InputBegan:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 and not binding then
									if Frame.Visible == true and not InFrame and not InFrame2 then
										Frame.Visible = false
									end
								end
								if binding then
									binding = false
									Keybind.Text = input.KeyCode.Name ~= 'Unknown' and input.KeyCode.Name:upper() or input.UserInputType.Name:upper()
									Keybind.Size = UDim2.new(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 5,0, 12)
									Element.value.Key = input.KeyCode.Name ~= 'Unknown' and input.KeyCode.Name or input.UserInputType.Name
									if input.KeyCode.Name == 'Backspace' then
										Keybind.Text = 'NONE'
										Keybind.Size = UDim2.new(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 4,0, 12)
										Element.value.Key = nil
									end
								else
									if Element.value.Key ~= nil then
										if string.find(Element.value.Key, 'Mouse') then
											if input.UserInputType == Enum.UserInputType[Element.value.Key] then
												if Element.value.Type == 'Hold' then
													Element.value.Active = true
													if Element.value.Active and Element.value.Toggle then
														keybindadd(text)
													else
														keybindremove(text)
													end
												elseif Element.value.Type == 'Toggle' then
													Element.value.Active = not Element.value.Active
													if Element.value.Active and Element.value.Toggle then
														keybindadd(text)
													else
														keybindremove(text)
													end
												end
											end
										else
											if input.KeyCode == Enum.KeyCode[Element.value.Key] then
												if Element.value.Type == 'Hold' then
													Element.value.Active = true
													if Element.value.Active and Element.value.Toggle then
														keybindadd(text)
													else
														keybindremove(text)
													end
												elseif Element.value.Type == 'Toggle' then
													Element.value.Active = not Element.value.Active
													if Element.value.Active and Element.value.Toggle then
														keybindadd(text)
													else
														keybindremove(text)
													end
												end
											end
										end
									else
										Element.value.Active = true
									end
								end
								values[tabname][sectorname][tabtext][text] = Element.value
								callback(Element.value)
							end)
							game:GetService('UserInputService').InputEnded:Connect(function(input)
								if Element.value.Key ~= nil then
									if string.find(Element.value.Key, 'Mouse') then
										if input.UserInputType == Enum.UserInputType[Element.value.Key] then
											if Element.value.Type == 'Hold' then
												Element.value.Active = false
												if Element.value.Active and Element.value.Toggle then
													keybindadd(text)
												else
													keybindremove(text)
												end
											end
										end
									else
										if input.KeyCode == Enum.KeyCode[Element.value.Key] then
											if Element.value.Type == 'Hold' then
												Element.value.Active = false
												if Element.value.Active and Element.value.Toggle then
													keybindadd(text)
												else
													keybindremove(text)
												end
											end
										end
									end
								end
								values[tabname][sectorname][tabtext][text] = Element.value
								callback(Element.value)
							end)
						end
						function Element:SetValue(value)
							Element.value = value
							update()
						end
					elseif type == 'Toggle' then
						tabsize = tabsize + UDim2.new(0,0,0,16)
						Element.value = {Toggle = data.default and data.default.Toggle or false}

						local Toggle = Instance.new('Frame')
						local Button = Instance.new('TextButton')
						local Color = Instance.new('Frame')
						local TextLabel = Instance.new('TextLabel')
						Toggle.Name = 'Toggle'
						Toggle.Parent = tab1
						Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Toggle.BackgroundTransparency = 1.000
						Toggle.Size = UDim2.new(1, 0, 0, 15)

						Button.Name = 'Button'
						Button.Parent = Toggle
						Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Button.BackgroundTransparency = 1.000
						Button.Size = UDim2.new(1, 0, 1, 0)
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000


						Color.Parent = Button
						Color.BackgroundColor3 = maincolor
						Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
						Color.Position = UDim2.new(0, 15, 0.5, -5)
						Color.Size = UDim2.new(0, 8, 0, 8)
						Color.Name = 'Color'



						TextLabel.Parent = Button
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.Position = UDim2.new(0, 32, 0, -1)
						TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = text
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						local function update()
							if Element.value.Toggle then
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
							else
								keybindremove(text)
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
							end
							values[tabname][sectorname][tabtext][text] = Element.value
						end

						Button.MouseButton1Down:Connect(function()
							Element.value.Toggle = not Element.value.Toggle
							update()
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
						end)
						if data.default then
							update()
						end
						values[tabname][sectorname][tabtext][text] = Element.value
						function Element:SetValue(value)
							Element.value = value
							values[tabname][sectorname][tabtext][text] = Element.value
							update()
							callback(Element.value)
						end
					elseif type == 'ToggleColor' then
						tabsize = tabsize + UDim2.new(0,0,0,16)
						Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or Color3.fromRGB(255,255,255)}

						local Toggle = Instance.new('Frame')
						local Button = Instance.new('TextButton')
						local Color = Instance.new('Frame')
						local TextLabel = Instance.new('TextLabel')

						Toggle.Name = 'Toggle'
						Toggle.Parent = tab1
						Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Toggle.BackgroundTransparency = 1.000
						Toggle.Size = UDim2.new(1, 0, 0, 15)

						Button.Name = 'Button'
						Button.Parent = Toggle
						Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Button.BackgroundTransparency = 1.000
						Button.Size = UDim2.new(1, 0, 1, 0)
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000

						Color.Name = 'Color'
						Color.Parent = Button
						Color.BackgroundColor3 = maincolor
						Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
						Color.Position = UDim2.new(0, 15, 0.5, -5)
						Color.Size = UDim2.new(0, 8, 0, 8)

						TextLabel.Parent = Button
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.Position = UDim2.new(0, 32, 0, -1)
						TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = text
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						local function update()
							if Element.value.Toggle then
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
							else
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
							end
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
						end

						local ColorH,ColorS,ColorV

						local ColorP = Instance.new('TextButton')
						local Frame = Instance.new('Frame')
						local Colorpick = Instance.new('ImageButton')
						local ColorDrag = Instance.new('Frame')
						local Huepick = Instance.new('ImageButton')
						local Huedrag = Instance.new('Frame')

						ColorP.Name = 'ColorP'
						ColorP.Parent = Button
						ColorP.AnchorPoint = Vector2.new(1, 0)
						ColorP.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
						ColorP.BorderColor3 = Color3.fromRGB(27, 27, 35)
						ColorP.Position = UDim2.new(0, 270, 0.5, -4)
						ColorP.Size = UDim2.new(0, 18, 0, 8)
						ColorP.AutoButtonColor = false
						ColorP.Font = Enum.Font.SourceSansSemibold
						ColorP.Text = ''
						ColorP.TextColor3 = Color3.fromRGB(200, 200, 200)
						ColorP.TextSize = 14.000

						Frame.Parent = ColorP
						Frame.BackgroundColor3 = maincolor
						Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Frame.Position = UDim2.new(-0.666666687, -170, 1.375, 0)
						Frame.Size = UDim2.new(0, 200, 0, 170)
						Frame.Visible = false
						Frame.ZIndex = 3

						Colorpick.Name = 'Colorpick'
						Colorpick.Parent = Frame
						Colorpick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Colorpick.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Colorpick.ClipsDescendants = false
						Colorpick.Position = UDim2.new(0, 40, 0, 10)
						Colorpick.Size = UDim2.new(0, 150, 0, 150)
						Colorpick.AutoButtonColor = false
						Colorpick.Image = 'rbxassetid://4155801252'
						Colorpick.ImageColor3 = Color3.fromRGB(255, 0, 0)
						Colorpick.ZIndex = 3

						ColorDrag.Name = 'ColorDrag'
						ColorDrag.Parent = Colorpick
						ColorDrag.AnchorPoint = Vector2.new(0.5, 0.5)
						ColorDrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						ColorDrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
						ColorDrag.Size = UDim2.new(0, 4, 0, 4)
						ColorDrag.ZIndex = 3

						Huepick.Name = 'Huepick'
						Huepick.Parent = Frame
						Huepick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Huepick.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Huepick.ClipsDescendants = false
						Huepick.Position = UDim2.new(0, 10, 0, 10)
						Huepick.Size = UDim2.new(0, 20, 0, 150)
						Huepick.AutoButtonColor = false
						Huepick.Image = 'rbxassetid://3641079629'
						Huepick.ImageColor3 = Color3.fromRGB(255, 0, 0)
						Huepick.ImageTransparency = 1
						Huepick.BackgroundTransparency = 0
						Huepick.ZIndex = 3

						local HueFrameGradient = Instance.new('UIGradient')
						HueFrameGradient.Rotation = 90
						HueFrameGradient.Name = 'HueFrameGradient'
						HueFrameGradient.Parent = Huepick
						HueFrameGradient.Color = ColorSequence.new {
							ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
							ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255)),
							ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)),
							ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
							ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)),
							ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)),
							ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
						}	

						Huedrag.Name = 'Huedrag'
						Huedrag.Parent = Huepick
						Huedrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Huedrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Huedrag.Size = UDim2.new(1, 0, 0, 2)
						Huedrag.ZIndex = 3

						ColorP.MouseButton1Down:Connect(function()
							Frame.Visible = not Frame.Visible
						end)
						local abc = false
						local inCP = false
						ColorP.MouseEnter:Connect(function()
							abc = true
						end)
						ColorP.MouseLeave:Connect(function()
							abc = false
						end)
						Frame.MouseEnter:Connect(function()
							inCP = true
						end)
						Frame.MouseLeave:Connect(function()
							inCP = false
						end)

						ColorH = (math.clamp(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y)
						ColorS = 1-(math.clamp(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
						ColorV = 1-(math.clamp(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)

						if data.default.Color ~= nil then
							ColorH, ColorS, ColorV = data.default.Color:ToHSV()

							ColorH = math.clamp(ColorH,0,1)
							ColorS = math.clamp(ColorS,0,1)
							ColorV = math.clamp(ColorV,0,1)
							ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)

							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)
						end

						local mouse = LocalPlayer:GetMouse()
						game:GetService('UserInputService').InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
								if not dragging and not abc and not inCP then
									Frame.Visible = false
								end
							end
						end)

						local function updateColor()
							local ColorX = (math.clamp(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
							local ColorY = (math.clamp(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)
							ColorDrag.Position = UDim2.new(ColorX, 0, ColorY, 0)
							ColorS = 1-ColorX
							ColorV = 1-ColorY
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							values[tabname][sectorname][tabtext][text] = Element.value
							Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
							callback(Element.value)
						end
						local function updateHue()
							local y = math.clamp(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148)
							Huedrag.Position = UDim2.new(0, 0, 0, y)
							hue = y/148
							ColorH = 1-hue
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							values[tabname][sectorname][tabtext][text] = Element.value
							Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
							callback(Element.value)
						end
						Colorpick.MouseButton1Down:Connect(function()
							updateColor()
							moveconnection = mouse.Move:Connect(function()
								updateColor()
							end)
							releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
									updateColor()
									moveconnection:Disconnect()
									releaseconnection:Disconnect()
								end
							end)
						end)
						Huepick.MouseButton1Down:Connect(function()
							updateHue()
							moveconnection = mouse.Move:Connect(function()
								updateHue()
							end)
							releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
									updateHue()
									moveconnection:Disconnect()
									releaseconnection:Disconnect()
								end
							end)
						end)

						Button.MouseButton1Down:Connect(function()
							Element.value.Toggle = not Element.value.Toggle
							update()
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
						end)
						if data.default then
							update()
						end
						values[tabname][sectorname][tabtext][text] = Element.value
						function Element:SetValue(value)
							Element.value = value
							local duplicate = Color3.new(value.Color.R, value.Color.G, value.Color.B)
							ColorH, ColorS, ColorV = duplicate:ToHSV()
							ColorH = math.clamp(ColorH,0,1)
							ColorS = math.clamp(ColorS,0,1)
							ColorV = math.clamp(ColorV,0,1)

							ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							update()
							Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)
						end
					elseif type == 'ToggleTrans' then
						tabsize = tabsize + UDim2.new(0,0,0,16)
						Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or Color3.fromRGB(255,255,255), Transparency = data.default and data.default.Transparency or 0}

						local Toggle = Instance.new('Frame')
						local Button = Instance.new('TextButton')
						local Color = Instance.new('Frame')
						local TextLabel = Instance.new('TextLabel')

						Toggle.Name = 'Toggle'
						Toggle.Parent = tab1
						Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Toggle.BackgroundTransparency = 1.000
						Toggle.Size = UDim2.new(1, 0, 0, 15)

						Button.Name = 'Button'
						Button.Parent = Toggle
						Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Button.BackgroundTransparency = 1.000
						Button.Size = UDim2.new(1, 0, 1, 0)
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000

						Color.Name = 'Color'
						Color.Parent = Button
						Color.BackgroundColor3 = maincolor
						Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
						Color.Position = UDim2.new(0, 15, 0.5, -5)
						Color.Size = UDim2.new(0, 8, 0, 8)

						TextLabel.Parent = Button
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.Position = UDim2.new(0, 32, 0, -1)
						TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = text
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						local function update()
							if Element.value.Toggle then
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
							else
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
							end
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
						end

						local ColorH,ColorS,ColorV

						local ColorP = Instance.new('TextButton')
						local Frame = Instance.new('Frame')
						local Colorpick = Instance.new('ImageButton')
						local ColorDrag = Instance.new('Frame')
						local Huepick = Instance.new('ImageButton')
						local Huedrag = Instance.new('Frame')

						ColorP.Name = 'ColorP'
						ColorP.Parent = Button
						ColorP.AnchorPoint = Vector2.new(1, 0)
						ColorP.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
						ColorP.BorderColor3 = Color3.fromRGB(27, 27, 35)
						ColorP.Position = UDim2.new(0, 270, 0.5, -4)
						ColorP.Size = UDim2.new(0, 18, 0, 8)
						ColorP.AutoButtonColor = false
						ColorP.Font = Enum.Font.SourceSansSemibold
						ColorP.Text = ''
						ColorP.TextColor3 = Color3.fromRGB(200, 200, 200)
						ColorP.TextSize = 14.000

						Frame.Parent = ColorP
						Frame.BackgroundColor3 = maincolor
						Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Frame.Position = UDim2.new(-0.666666687, -170, 1.375, 0)
						Frame.Size = UDim2.new(0, 200, 0, 190)
						Frame.Visible = false
						Frame.ZIndex = 3

						Colorpick.Name = 'Colorpick'
						Colorpick.Parent = Frame
						Colorpick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Colorpick.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Colorpick.ClipsDescendants = false
						Colorpick.Position = UDim2.new(0, 40, 0, 10)
						Colorpick.Size = UDim2.new(0, 150, 0, 150)
						Colorpick.AutoButtonColor = false
						Colorpick.Image = 'rbxassetid://4155801252'
						Colorpick.ImageColor3 = Color3.fromRGB(255, 0, 0)
						Colorpick.ZIndex = 3

						ColorDrag.Name = 'ColorDrag'
						ColorDrag.Parent = Colorpick
						ColorDrag.AnchorPoint = Vector2.new(0.5, 0.5)
						ColorDrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						ColorDrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
						ColorDrag.Size = UDim2.new(0, 4, 0, 4)
						ColorDrag.ZIndex = 3

						Huepick.Name = 'Huepick'
						Huepick.Parent = Frame
						Huepick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Huepick.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Huepick.ClipsDescendants = true
						Huepick.Position = UDim2.new(0, 10, 0, 10)
						Huepick.Size = UDim2.new(0, 20, 0, 150)
						Huepick.AutoButtonColor = false
						Huepick.Image = 'rbxassetid://3641079629'
						Huepick.ImageColor3 = Color3.fromRGB(255, 0, 0)
						Huepick.ImageTransparency = 1
						Huepick.BackgroundTransparency = 0
						Huepick.ZIndex = 3

						local HueFrameGradient = Instance.new('UIGradient')
						HueFrameGradient.Rotation = 90
						HueFrameGradient.Name = 'HueFrameGradient'
						HueFrameGradient.Parent = Huepick
						HueFrameGradient.Color = ColorSequence.new {
							ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
							ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255)),
							ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)),
							ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
							ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)),
							ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)),
							ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
						}	

						Huedrag.Name = 'Huedrag'
						Huedrag.Parent = Huepick
						Huedrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Huedrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Huedrag.Size = UDim2.new(1, 0, 0, 2)
						Huedrag.ZIndex = 3

						local Transpick = Instance.new('ImageButton')
						local Transcolor = Instance.new('ImageLabel')
						local Transdrag = Instance.new('Frame')

						Transpick.Name = 'Transpick'
						Transpick.Parent = Frame
						Transpick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Transpick.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Transpick.Position = UDim2.new(0, 10, 0, 167)
						Transpick.Size = UDim2.new(0, 180, 0, 15)
						Transpick.AutoButtonColor = false
						Transpick.Image = 'rbxassetid://3887014957'
						Transpick.ScaleType = Enum.ScaleType.Tile
						Transpick.TileSize = UDim2.new(0, 10, 0, 10)
						Transpick.ZIndex = 3

						Transcolor.Name = 'Transcolor'
						Transcolor.Parent = Transpick
						Transcolor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Transcolor.BackgroundTransparency = 1.000
						Transcolor.Size = UDim2.new(1, 0, 1, 0)
						Transcolor.Image = 'rbxassetid://3887017050'
						Transcolor.ImageColor3 = Color3.fromRGB(255, 0, 4)
						Transcolor.ZIndex = 3

						Transdrag.Name = 'Transdrag'
						Transdrag.Parent = Transcolor
						Transdrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Transdrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Transdrag.Position = UDim2.new(0, -1, 0, 0)
						Transdrag.Size = UDim2.new(0, 2, 1, 0)
						Transdrag.ZIndex = 3

						ColorP.MouseButton1Down:Connect(function()
							Frame.Visible = not Frame.Visible
						end)
						local abc = false
						local inCP = false
						ColorP.MouseEnter:Connect(function()
							abc = true
						end)
						ColorP.MouseLeave:Connect(function()
							abc = false
						end)
						Frame.MouseEnter:Connect(function()
							inCP = true
						end)
						Frame.MouseLeave:Connect(function()
							inCP = false
						end)

						ColorH = (math.clamp(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y)
						ColorS = 1-(math.clamp(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
						ColorV = 1-(math.clamp(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)

						if data.default.Color ~= nil then
							ColorH, ColorS, ColorV = data.default.Color:ToHSV()

							ColorH = math.clamp(ColorH,0,1)
							ColorS = math.clamp(ColorS,0,1)
							ColorV = math.clamp(ColorV,0,1)
							ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)

							Transcolor.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)

							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)
						end
						if data.default.Transparency ~= nil then
							Transdrag.Position = UDim2.new(data.default.Transparency, -1, 0, 0)
						end
						local mouse = LocalPlayer:GetMouse()
						game:GetService('UserInputService').InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
								if not dragging and not abc and not inCP then
									Frame.Visible = false
								end
							end
						end)

						local function updateColor()
							local ColorX = (math.clamp(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
							local ColorY = (math.clamp(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)
							ColorDrag.Position = UDim2.new(ColorX, 0, ColorY, 0)
							ColorS = 1-ColorX
							ColorV = 1-ColorY
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							Transcolor.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							values[tabname][sectorname][tabtext][text] = Element.value
							Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
							callback(Element.value)
						end
						local function updateHue()
							local y = math.clamp(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148)
							Huedrag.Position = UDim2.new(0, 0, 0, y)
							hue = y/148
							ColorH = 1-hue
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							Transcolor.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							values[tabname][sectorname][tabtext][text] = Element.value
							Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
							callback(Element.value)
						end
						local function updateTrans()
							local x = math.clamp(mouse.X - Transpick.AbsolutePosition.X, 0, 178)
							Transdrag.Position = UDim2.new(0, x, 0, 0)
							Element.value.Transparency = (x/178)
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
						end
						Transpick.MouseButton1Down:Connect(function()
							updateTrans()
							moveconnection = mouse.Move:Connect(function()
								updateTrans()
							end)
							releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
									updateTrans()
									moveconnection:Disconnect()
									releaseconnection:Disconnect()
								end
							end)
						end)
						Colorpick.MouseButton1Down:Connect(function()
							updateColor()
							moveconnection = mouse.Move:Connect(function()
								updateColor()
							end)
							releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
									updateColor()
									moveconnection:Disconnect()
									releaseconnection:Disconnect()
								end
							end)
						end)
						Huepick.MouseButton1Down:Connect(function()
							updateHue()
							moveconnection = mouse.Move:Connect(function()
								updateHue()
							end)
							releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
									updateHue()
									moveconnection:Disconnect()
									releaseconnection:Disconnect()
								end
							end)
						end)

						Button.MouseButton1Down:Connect(function()
							Element.value.Toggle = not Element.value.Toggle
							update()
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
						end)
						if data.default then
							update()
						end
						values[tabname][sectorname][tabtext][text] = Element.value
						function Element:SetValue(value)
							Element.value = value
							local duplicate = Color3.new(value.Color.R, value.Color.G, value.Color.B)
							ColorH, ColorS, ColorV = duplicate:ToHSV()
							ColorH = math.clamp(ColorH,0,1)
							ColorS = math.clamp(ColorS,0,1)
							ColorV = math.clamp(ColorV,0,1)

							ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
							Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
							ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
							update()
							Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)
						end
					elseif type == 'Dropdown' then
						tabsize = tabsize + UDim2.new(0,0,0,39)
						Element.value = {Dropdown = data.options[1]}

						local Dropdown = Instance.new('Frame')
						local Button = Instance.new('TextButton')
						local TextLabel = Instance.new('TextLabel')
						local Drop = Instance.new('ScrollingFrame')
						local Button_2 = Instance.new('TextButton')
						local TextLabel_2 = Instance.new('TextLabel')
						local UIListLayout = Instance.new('UIListLayout')
						local ImageLabel = Instance.new('ImageLabel')
						local TextLabel_3 = Instance.new('TextLabel')

						Dropdown.Name = 'Dropdown'
						Dropdown.Parent = tab1
						Dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Dropdown.BackgroundTransparency = 1.000
						Dropdown.Position = UDim2.new(0, 0, 0.255102038, 0)
						Dropdown.Size = UDim2.new(1, 0, 0, 39)

						Button.Name = 'Button'
						Button.Parent = Dropdown
						Button.BackgroundColor3 = maincolor
						Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Button.Position = UDim2.new(0, 30, 0, 16)
						Button.Size = UDim2.new(0, 175, 0, 17)
						Button.AutoButtonColor = false
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000

						TextLabel.Parent = Button
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
						TextLabel.Position = UDim2.new(0, 5, 0, 0)
						TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = Element.value.Dropdown
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						local abcd = TextLabel

						Drop.Name = 'Drop'
						Drop.Parent = Button
						Drop.Active = true
						Drop.BackgroundColor3 = maincolor
						Drop.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Drop.Position = UDim2.new(0, 0, 1, 1)
						Drop.Size = UDim2.new(1, 0, 0, 20)
						Drop.Visible = false
						Drop.BottomImage = 'http://www.roblox.com/asset/?id=6724808282'
						Drop.CanvasSize = UDim2.new(0, 0, 0, 0)
						Drop.ScrollBarThickness = 4
						Drop.MidImage = 'http://www.roblox.com/asset/?id=6724808282'
						Drop.TopImage = 'http://www.roblox.com/asset/?id=6724808282'
						Drop.AutomaticCanvasSize = 'Y'
						Drop.ZIndex = 5
						Drop.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)

						UIListLayout.Parent = Drop
						UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
						UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

						local num = #data.options
						if num > 5 then
							Drop.Size = UDim2.new(1, 0, 0, 85)
						else
							Drop.Size = UDim2.new(1, 0, 0, 17*num)
						end
						Drop.CanvasSize = UDim2.new(1, 0, 0, 17*num)
						local first = true
						for i,v in ipairs(data.options) do
							do
								local Button = Instance.new('TextButton')
								local TextLabel = Instance.new('TextLabel')

								Button.Name = v
								Button.Parent = Drop
								Button.BackgroundColor3 = maincolor
								Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
								Button.Position = UDim2.new(0, 30, 0, 16)
								Button.Size = UDim2.new(0, 175, 0, 17)
								Button.AutoButtonColor = false
								Button.Font = Enum.Font.SourceSans
								Button.Text = ''
								Button.TextColor3 = Color3.fromRGB(0, 0, 0)
								Button.TextSize = 14.000
								Button.BorderSizePixel = 0
								Button.ZIndex = 6

								TextLabel.Parent = Button
								TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
								TextLabel.BackgroundTransparency = 1.000
								TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
								TextLabel.Position = UDim2.new(0, 5, 0, -1)
								TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
								TextLabel.Font = Enum.Font.SourceSansSemibold
								TextLabel.Text = v
								TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
								TextLabel.TextSize = 14.000
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left
								TextLabel.ZIndex = 6

								Button.MouseButton1Down:Connect(function()
									Drop.Visible = false
									Element.value.Dropdown = v
									abcd.Text = v
									values[tabname][sectorname][tabtext][text] = Element.value
									callback(Element.value)
									Drop.CanvasPosition = Vector2.new(0,0)
								end)
								Button.MouseEnter:Connect(function()
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(255, 255, 255)})
								end)
								Button.MouseLeave:Connect(function()
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(200, 200, 200)})
								end)

								first = false
							end
						end

						function Element:SetValue(val)
							Element.value = val
							abcd.Text = val.Dropdown
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(val)
						end

						ImageLabel.Parent = Button
						ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						ImageLabel.BackgroundTransparency = 1.000
						ImageLabel.Position = UDim2.new(0, 165, 0, 6)
						ImageLabel.Size = UDim2.new(0, 6, 0, 4)
						ImageLabel.Image = 'http://www.roblox.com/asset/?id=6724771531'

						TextLabel_3.Parent = Dropdown
						TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel_3.BackgroundTransparency = 1.000
						TextLabel_3.Position = UDim2.new(0, 32, 0, -1)
						TextLabel_3.Size = UDim2.new(0.111913361, 208, 0.382215232, 0)
						TextLabel_3.Font = Enum.Font.SourceSansSemibold
						TextLabel_3.Text = text
						TextLabel_3.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel_3.TextSize = 14.000
						TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left

						Button.MouseButton1Down:Connect(function()
							Drop.Visible = not Drop.Visible
							if not Drop.Visible then
								Drop.CanvasPosition = Vector2.new(0,0)
							end
						end)
						local indrop = false
						local ind = false
						Drop.MouseEnter:Connect(function()
							indrop = true
						end)
						Drop.MouseLeave:Connect(function()
							indrop = false
						end)
						Button.MouseEnter:Connect(function()
							ind = true
						end)
						Button.MouseLeave:Connect(function()
							ind = false
						end)
						game:GetService('UserInputService').InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
								if Drop.Visible == true and not indrop and not ind then
									Drop.Visible = false
									Drop.CanvasPosition = Vector2.new(0,0)
								end
							end
						end)
						values[tabname][sectorname][tabtext][text] = Element.value
					elseif type == 'Slider' then

						tabsize = tabsize + UDim2.new(0,0,0,25)

						local Slider = Instance.new('Frame')
						local TextLabel = Instance.new('TextLabel')
						local Button = Instance.new('TextButton')
						local Frame = Instance.new('Frame')
						local Value = Instance.new('TextBox')

						Slider.Name = 'Slider'
						Slider.Parent = tab1
						Slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Slider.BackgroundTransparency = 1.000
						Slider.Position = UDim2.new(0, 0, 0.653061211, 0)
						Slider.Size = UDim2.new(1, 0, 0, 25)

						TextLabel.Parent = Slider
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.Position = UDim2.new(0, 32, 0, -2)
						TextLabel.Size = UDim2.new(0, 100, 0, 15)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = text
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left

						Button.Name = 'Button'
						Button.Parent = Slider
						Button.BackgroundColor3 = maincolor
						Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Button.Position = UDim2.new(0, 30, 0, 15)
						Button.Size = UDim2.new(0, 175, 0, 5)
						Button.AutoButtonColor = false
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000

						Frame.Parent = Button
						Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Frame.BackgroundColor3 = values.misc.ui['ui slider'].Color end)
						Frame.BorderSizePixel = 0
						Frame.Size = UDim2.new(0.5, 0, 1, 0)

						Value.Name = 'Value'
						Value.Parent = Slider
						Value.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Value.BackgroundTransparency = 1.000
						Value.Position = UDim2.new(0, 150, 0, -1)
						Value.Size = UDim2.new(0, 55, 0, 15)
						Value.Font = Enum.Font.SourceSansSemibold
						Value.Text = '50'
						Value.TextColor3 = Color3.fromRGB(200, 200, 200)
						Value.TextSize = 14.000
						Value.TextXAlignment = Enum.TextXAlignment.Right
						local min, max, default = data.min or 0, data.max or 100, data.default or 0
						Element.value = {Slider = default}

						function Element:SetValue(value)
							Element.value = value
							local a
							if min > 0 then
								a = ((Element.value.Slider - min)) / (max-min)
							else
								a = (Element.value.Slider-min)/(max-min)
							end
							Value.Text = Element.value.Slider
							Frame.Size = UDim2.new(a,0,1,0)
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(value)
						end
						local a
						if min > 0 then
							a = ((Element.value.Slider - min)) / (max-min)
						else
							a = (Element.value.Slider-min)/(max-min)
						end
						Value.Text = Element.value.Slider
						Frame.Size = UDim2.new(a,0,1,0)
						values[tabname][sectorname][tabtext][text] = Element.value
						local uis = game:GetService('UserInputService')
						local mouse = game.Players.LocalPlayer:GetMouse()
						local val

						Value.FocusLost:Connect(function()
							values[tabname][sectorname][tabtext][text].Slider = tonumber(Value.Text)
							callback(tonumber(Value.Text))
							--Value.Text = Element.value.Slider
							Frame.Size = UDim2.new((tonumber(Value.Text)-min)/(max-min),0,1,0)
						end)

						Button.MouseButton1Down:Connect(function()
							Frame.Size = UDim2.new(0, math.clamp(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5)
							val = math.floor((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) or 0
							Value.Text = val
							Element.value.Slider = val
							values[tabname][sectorname][tabtext][text] = Element.value
							callback(Element.value)
							moveconnection = mouse.Move:Connect(function()
								Frame.Size = UDim2.new(0, math.clamp(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5)
								val = math.floor((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min))
								Value.Text = val
								Element.value.Slider = val
								values[tabname][sectorname][tabtext][text] = Element.value
								callback(Element.value)
							end)
							releaseconnection = uis.InputEnded:Connect(function(Mouse)
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
									Frame.Size = UDim2.new(0, math.clamp(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5)
									val = math.floor((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min))
									values[tabname][sectorname][tabtext][text] = Element.value
									callback(Element.value)
									moveconnection:Disconnect()
									releaseconnection:Disconnect()
								end
							end)
						end)
					elseif type == 'Button' then

						tabsize = tabsize + UDim2.new(0,0,0,24)
						local Button = Instance.new('Frame')
						local Button_2 = Instance.new('TextButton')
						local TextLabel = Instance.new('TextLabel')

						Button.Name = 'Button'
						Button.Parent = tab1
						Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						Button.BackgroundTransparency = 1.000
						Button.Position = UDim2.new(0, 0, 0.236059487, 0)
						Button.Size = UDim2.new(1, 0, 0, 24)

						Button_2.Name = 'Button'
						Button_2.Parent = Button
						Button_2.BackgroundColor3 = maincolor
						Button_2.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Button_2.Position = UDim2.new(0, 30, 0.5, -9)
						Button_2.Size = UDim2.new(0, 175, 0, 18)
						Button_2.AutoButtonColor = false
						Button_2.Font = Enum.Font.SourceSans
						Button_2.Text = ''
						Button_2.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button_2.TextSize = 14.000

						TextLabel.Parent = Button_2
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
						TextLabel.Size = UDim2.new(1, 0, 1, 0)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = text
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000

						function Element:SetValue()
						end

						Button_2.MouseButton1Down:Connect(function()
							TextLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
							library:Tween(TextLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
							callback()
						end)
						Button_2.MouseEnter:Connect(function()
							library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
						end)
						Button_2.MouseLeave:Connect(function()
							library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
						end)
					end
					ConfigLoad:Connect(function(cfg)
						local fix = library:ConfigFix(cfg)
						if fix[tabname][sectorname][tabtext][text] ~= nil then
							Element:SetValue(fix[tabname][sectorname][tabtext][text])
						end
					end)

					return Element
				end


				if firs then
					coroutine.wrap(function()
						game:GetService('RunService').RenderStepped:Wait()
						Section.Size = tabsize
					end)()
					selected = text
					TextButton.TextColor3 = Color3.fromRGB(255,255,255)
					tab1.Visible = true
					firs = false
				end

				return tab
			end

			return MSector
		end
		function Tab:Sector(text, side)
			local sectorname = text
			local Sector = {}
			values[tabname][text] = {}
			local Section = Instance.new('Frame')
			local SectionText = Instance.new('TextLabel')
			local Inner = Instance.new('Frame')
			local UIListLayout = Instance.new('UIListLayout')

			Section.Name = 'Section'
			Section.Parent = TabGui[side]
			Section.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			Section.BorderColor3 = Color3.fromRGB(27, 27, 35)
			Section.BorderSizePixel = 1
			Section.BackgroundTransparency = 0
			Section.Position = UDim2.new(0.00358422939, 0, 0, 0)
			Section.Size = UDim2.new(1, 0, 0, 22)

						
			local Border = Instance.new('Frame')

			Border.Name = 'Border'
			Border.Parent = Section
			Border.AnchorPoint = Vector2.new(0.5, 0.5)
			Border.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	table.insert(bordercolorlist, Border)
			Border.BorderColor3 = Color3.fromRGB(0, 0, 0)
			Border.Position = UDim2.new(0.5, 0, 0.5, 0)
			Border.Size = UDim2.new(1, 2, 1, 2)

			
			
			local Border2 = Instance.new('Frame')

			Border2.Name = 'Border'
			Border2.Parent = Section
			Border2.AnchorPoint = Vector2.new(0.5, 0.5)
			Border2.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			Border2.BorderSizePixel = 0
			Border2.Position = UDim2.new(0.5, 0, 0.5, 0)
			Border2.Size = UDim2.new(1, 0, 1, 0)


			SectionText.Name = 'SectionText'
			SectionText.Parent = Section
			SectionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			SectionText.BackgroundTransparency = 1.000
			SectionText.Position = UDim2.new(0, 7, 0, -12)
			SectionText.Size = UDim2.new(0, 270, 0, 19)
			SectionText.ZIndex = 2
			SectionText.Font = Enum.Font.SourceSansSemibold
			SectionText.Text = text
			SectionText.TextColor3 = Color3.fromRGB(255, 255, 255)
			SectionText.TextSize = 15.000
			SectionText.TextXAlignment = Enum.TextXAlignment.Left

			Inner.Name = 'Inner'
			Inner.Parent = Section
			Inner.BackgroundColor3 = Color3.fromRGB(25,25,25)
			Inner.BackgroundTransparency = 1.000
			Inner.BorderColor3 = Color3.fromRGB(27, 27, 35)
			Inner.BorderSizePixel = 1
			Inner.Position = UDim2.new(0, 1, 0, 1)
			Inner.Size = UDim2.new(1, -2, 1, -2)

			local UIPadding = Instance.new('UIPadding')

			UIPadding.Parent = Inner
			UIPadding.PaddingTop = UDim.new(0, 10)

			UIListLayout.Parent = Inner
			UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			UIListLayout.Padding = UDim.new(0,1)

			function Sector:Element(type, text, data, callback)
				local Element = {}
				data = data or {}
				callback = callback or function() end
				values[tabname][sectorname][text] = {}
				if type == 'ScrollDrop' then
					Section.Size = Section.Size + UDim2.new(0,0,0,39)
					Section.BackgroundTransparency = 1.000
					Element.value = {Scroll = {}, Dropdown = ''}

					for i,v in pairs(data.options) do
						Element.value.Scroll[i] = v[1]
					end

					local joe = {}
					if data.alphabet then
						local copy = {}
						for i,v in pairs(data.options) do
							table.insert(copy, i)
						end
						table.sort(copy, function(a,b)
							return a < b
						end)
						joe = copy
					else
						for i,v in pairs(data.options) do
							table.insert(joe, i)
						end
					end

					local Dropdown = Instance.new('Frame')
					local Button = Instance.new('TextButton')
					local TextLabel = Instance.new('TextLabel')
					local Drop = Instance.new('ScrollingFrame')
					local Button_2 = Instance.new('TextButton')
					local TextLabel_2 = Instance.new('TextLabel')
					local UIListLayout = Instance.new('UIListLayout')
					local ImageLabel = Instance.new('ImageLabel')
					local TextLabel_3 = Instance.new('TextLabel')

					Dropdown.Name = 'Dropdown'
					Dropdown.Parent = Inner
					Dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Dropdown.BackgroundTransparency = 1.000
					Dropdown.Position = UDim2.new(0, 0, 0, 0)
					Dropdown.Size = UDim2.new(1, 0, 0, 39)

					Button.Name = 'Button'
					Button.Parent = Dropdown
					Button.BackgroundColor3 = maincolor
					Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Button.Position = UDim2.new(0, 30, 0, 16)
					Button.Size = UDim2.new(0, 175, 0, 17)
					Button.AutoButtonColor = false
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					local TextLabel = Instance.new('TextLabel')

					TextLabel.Parent = Button
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
					TextLabel.Position = UDim2.new(0, 5, 0, 0)
					TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = 'lol'
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					local abcd = TextLabel

					Drop.Name = 'Drop'
					Drop.Parent = Button
					Drop.Active = true
					Drop.BackgroundColor3 = maincolor
					Drop.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Drop.Position = UDim2.new(0, 0, 1, 1)
					Drop.Size = UDim2.new(1, 0, 0, 20)
					Drop.Visible = false
					Drop.BottomImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.CanvasSize = UDim2.new(0, 0, 0, 0)
					Drop.ScrollBarThickness = 4
					Drop.TopImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.MidImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.AutomaticCanvasSize = 'Y'
					Drop.ZIndex = 5
					Drop.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)

					UIListLayout.Parent = Drop
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder


					local amount = data.Amount or 6
					Section.Size = Section.Size + UDim2.new(0,0,0,amount * 16 + 8)
					Section.BackgroundTransparency = 1.000

					local num = #joe
					if num > 5 then
						Drop.Size = UDim2.new(1, 0, 0, 85)
					else
						Drop.Size = UDim2.new(1, 0, 0, 17*num)
					end
					local first = true
					for i,v in ipairs(joe) do
						do
							local joell = v
							local Scroll = Instance.new('Frame')
							local joe2 = data.options[v]
							local Button = Instance.new('TextButton')
							local TextLabel = Instance.new('TextLabel')

							Button.Name = v
							Button.Parent = Drop
							Button.BackgroundColor3 = maincolor
							Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Button.Position = UDim2.new(0, 30, 0, 16)
							Button.Size = UDim2.new(0, 175, 0, 17)
							Button.AutoButtonColor = false
							Button.Font = Enum.Font.SourceSans
							Button.Text = ''
							Button.TextColor3 = Color3.fromRGB(0, 0, 0)
							Button.TextSize = 14.000
							Button.BorderSizePixel = 0
							Button.ZIndex = 6

							TextLabel.Parent = Button
							TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
							TextLabel.BackgroundTransparency = 1.000
							TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
							TextLabel.Position = UDim2.new(0, 5, 0, -1)
							TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
							TextLabel.Font = Enum.Font.SourceSansSemibold
							TextLabel.Text = v
							TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
							TextLabel.TextSize = 14.000
							TextLabel.TextXAlignment = Enum.TextXAlignment.Left
							TextLabel.ZIndex = 6

							Button.MouseButton1Down:Connect(function()
								Drop.Visible = false
								Drop.CanvasPosition = Vector2.new(0,0)
								abcd.Text = v
								for i,v in pairs(Scroll.Parent:GetChildren()) do
									if v:IsA('Frame') then
										v.Visible = false
									end
								end
								Element.value.Dropdown = v
								Scroll.Visible = true
								callback(Element.value)
							end)
							Button.MouseEnter:Connect(function()
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(255, 255, 255)})
							end)
							Button.MouseLeave:Connect(function()
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(200, 200, 200)})
							end)

							if first then
								abcd.Text = v
								Element.value.Dropdown = v
							end
							local Frame = Instance.new('ScrollingFrame')
							local UIListLayout = Instance.new('UIListLayout')

							Scroll.Name = 'Scroll'
							Scroll.Parent = Dropdown
							Scroll.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
							Scroll.BackgroundTransparency = 1.000
							Scroll.Position = UDim2.new(0, 0, 0, 0)
							Scroll.Size = UDim2.new(1, 0, 0, amount * 16 + 8)
							Scroll.Visible = first
							Scroll.Name = v


							Frame.Name = 'Frame'
							Frame.Parent = Scroll
							Frame.Active = true
							Frame.BackgroundColor3 = maincolor
							Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Frame.Position = UDim2.new(0, 30, 0, 40)
							Frame.Size = UDim2.new(0, 175, 0, 16 * amount)
							Frame.BottomImage = 'http://www.roblox.com/asset/?id=6724808282'
							Frame.CanvasSize = UDim2.new(0, 0, 0, 0)
							Frame.MidImage = 'http://www.roblox.com/asset/?id=6724808282'
							Frame.ScrollBarThickness = 4
							Frame.TopImage = 'http://www.roblox.com/asset/?id=6724808282'
							Frame.AutomaticCanvasSize = 'Y'
							Frame.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)

							UIListLayout.Parent = Frame
							UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
							UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
							local joll = true
							for i,v in ipairs(joe2) do
								local Button = Instance.new('TextButton')
								local TextLabel = Instance.new('TextLabel')

								Button.Name = v
								Button.Parent = Frame
								Button.BackgroundColor3 = maincolor
								Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
								Button.BorderSizePixel = 0
								Button.Position = UDim2.new(0, 30, 0, 16)
								Button.Size = UDim2.new(1, 0, 0, 16)
								Button.AutoButtonColor = false
								Button.Font = Enum.Font.SourceSans
								Button.Text = ''
								Button.TextColor3 = Color3.fromRGB(0, 0, 0)
								Button.TextSize = 14.000

								TextLabel.Parent = Button
								TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
								TextLabel.BackgroundTransparency = 1.000
								TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
								TextLabel.Position = UDim2.new(0, 4, 0, -1)
								TextLabel.Size = UDim2.new(1, 1, 1, 1)
								TextLabel.Font = Enum.Font.SourceSansSemibold
								TextLabel.Text = v
								TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
								TextLabel.TextSize = 14.000
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left
								if joll then
									joll = false
									TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
								end

								Button.MouseButton1Down:Connect(function()

									for i,v in pairs(Frame:GetChildren()) do
										if v:IsA('TextButton') then
											library:Tween(v.TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
										end
									end

									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})

									Element.value.Scroll[joell] = v

									values[tabname][sectorname][text] = Element.value
									callback(Element.value)
								end)
								Button.MouseEnter:Connect(function()
									if Element.value.Scroll[joell] ~= v then
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
									end
								end)
								Button.MouseLeave:Connect(function()
									if Element.value.Scroll[joell] ~= v then
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
									end
								end)
							end
							first = false
						end
					end

					ImageLabel.Parent = Button
					ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ImageLabel.BackgroundTransparency = 1.000
					ImageLabel.Position = UDim2.new(0, 165, 0, 6)
					ImageLabel.Size = UDim2.new(0, 6, 0, 4)
					ImageLabel.Image = 'http://www.roblox.com/asset/?id=6724771531'

					TextLabel_3.Parent = Dropdown
					TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel_3.BackgroundTransparency = 1.000
					TextLabel_3.Position = UDim2.new(0, 32, 0, -1)
					TextLabel_3.Size = UDim2.new(0.111913361, 208, 0.382215232, 0)
					TextLabel_3.Font = Enum.Font.SourceSansSemibold
					TextLabel_3.Text = text
					TextLabel_3.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel_3.TextSize = 14.000
					TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left

					Button.MouseButton1Down:Connect(function()
						Drop.Visible = not Drop.Visible
						if not Drop.Visible then
							Drop.CanvasPosition = Vector2.new(0,0)
						end
					end)
					local indrop = false
					local ind = false
					Drop.MouseEnter:Connect(function()
						indrop = true
					end)
					Drop.MouseLeave:Connect(function()
						indrop = false
					end)
					Button.MouseEnter:Connect(function()
						ind = true
					end)
					Button.MouseLeave:Connect(function()
						ind = false
					end)
					game:GetService('UserInputService').InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
							if Drop.Visible == true and not indrop and not ind then
								Drop.Visible = false
								Drop.CanvasPosition = Vector2.new(0,0)
							end
						end
					end)

					function Element:SetValue(tbl)
						Element.value = tbl
						abcd.Text = tbl.Dropdown
						values[tabname][sectorname][text] = Element.value
						for i,v in pairs(Dropdown:GetChildren()) do
							if v:IsA('Frame') then
								if v.Name == Element.value.Dropdown then
									v.Visible = true
								else
									v.Visible = false
								end
								for _,bad in pairs(v.Frame:GetChildren()) do
									if bad:IsA('TextButton') then
										bad.TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
										if bad.Name == Element.value.Scroll[v.Name] then
											bad.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
										end
									end
								end
							end
						end
					end

					if data.default then
						Element:SetValue(data.default)
					end

					values[tabname][sectorname][text] = Element.value

				elseif type == 'Scroll' then
					local amount = data.Amount or 6
					Section.Size = Section.Size + UDim2.new(0,0,0,amount * 16 + 8)
					if data.alphabet then
						table.sort(data.options, function(a,b)
							return a < b
						end)
					end
					Element.value = {Scroll = data.default and data.default.Scroll or data.options[1]}

					local Scroll = Instance.new('Frame')
					local Frame = Instance.new('ScrollingFrame')
					local UIListLayout = Instance.new('UIListLayout')

					Scroll.Name = 'Scroll'
					Scroll.Parent = Inner
					Scroll.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Scroll.BackgroundTransparency = 1.000
					Scroll.Position = UDim2.new(0, 0, 00, 0)
					Scroll.Size = UDim2.new(1, 0, 0, amount * 16 + 8)


					Frame.Name = 'Frame'
					Frame.Parent = Scroll
					Frame.Active = true
					Frame.BackgroundColor3 = maincolor
					Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Frame.Position = UDim2.new(0, 30, 0, 0)
					Frame.Size = UDim2.new(0, 175, 0, 16 * amount)
					Frame.BottomImage = 'http://www.roblox.com/asset/?id=6724808282'
					Frame.CanvasSize = UDim2.new(0, 0, 0, 0)
					Frame.MidImage = 'http://www.roblox.com/asset/?id=6724808282'
					Frame.ScrollBarThickness = 4
					Frame.TopImage = 'http://www.roblox.com/asset/?id=6724808282'
					Frame.AutomaticCanvasSize = 'Y'
					Frame.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)

					UIListLayout.Parent = Frame
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
					local first = true
					for i,v in ipairs(data.options) do
						local Button = Instance.new('TextButton')
						local TextLabel = Instance.new('TextLabel')

						Button.Name = v
						Button.Parent = Frame
						Button.BackgroundColor3 = maincolor
						Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Button.BorderSizePixel = 0
						Button.Position = UDim2.new(0, 30, 0, 16)
						Button.Size = UDim2.new(1, 0, 0, 16)
						Button.AutoButtonColor = false
						Button.Font = Enum.Font.SourceSans
						Button.Text = ''
						Button.TextColor3 = Color3.fromRGB(0, 0, 0)
						Button.TextSize = 14.000

						TextLabel.Parent = Button
						TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
						TextLabel.BackgroundTransparency = 1.000
						TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
						TextLabel.Position = UDim2.new(0, 4, 0, -1)
						TextLabel.Size = UDim2.new(1, 1, 1, 1)
						TextLabel.Font = Enum.Font.SourceSansSemibold
						TextLabel.Text = v
						TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
						TextLabel.TextSize = 14.000
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left
						if first then first = false
							TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
						end

						Button.MouseButton1Down:Connect(function()

							for i,v in pairs(Frame:GetChildren()) do
								if v:IsA('TextButton') then
									library:Tween(v.TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
								end
							end

							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})

							Element.value.Scroll = v

							values[tabname][sectorname][text] = Element.value
							callback(Element.value)
						end)
						Button.MouseEnter:Connect(function()
							if Element.value.Scroll ~= v then
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
							end
						end)
						Button.MouseLeave:Connect(function()
							if Element.value.Scroll ~= v then
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
							end
						end)
					end

					function Element:SetValue(val)
						Element.value = val

						for i,v in pairs(Frame:GetChildren()) do
							if v:IsA('TextButton') then
								library:Tween(v.TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
							end
						end

						library:Tween(Frame[Element.value.Scroll].TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end
					values[tabname][sectorname][text] = Element.value
				elseif type == 'Jumbobox' then
					Section.Size = Section.Size + UDim2.new(0,0,0,39)
					Element.value = {Jumbobox = {}}
					data.options = data.options or {}

					local Dropdown = Instance.new('Frame')
					local Button = Instance.new('TextButton')
					local TextLabel = Instance.new('TextLabel')
					local Drop = Instance.new('ScrollingFrame')
					local Button_2 = Instance.new('TextButton')
					local TextLabel_2 = Instance.new('TextLabel')
					local UIListLayout = Instance.new('UIListLayout')
					local ImageLabel = Instance.new('ImageLabel')
					local TextLabel_3 = Instance.new('TextLabel')

					Dropdown.Name = 'Dropdown'
					Dropdown.Parent = Inner
					Dropdown.BackgroundColor3 = Color3.fromRGB(33, 35, 255)
					Dropdown.BackgroundTransparency = 1.000
					Dropdown.Position = UDim2.new(0, 0, 0.255102038, 0)
					Dropdown.Size = UDim2.new(1, 0, 0, 39)

					Button.Name = 'Button'
					Button.Parent = Dropdown
					Button.BackgroundColor3 = maincolor
					Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Button.Position = UDim2.new(0, 30, 0, 16)
					Button.Size = UDim2.new(0, 175, 0, 17)
					Button.AutoButtonColor = false
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					TextLabel.Parent = Button
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
					TextLabel.Position = UDim2.new(0, 5, 0, 0)
					TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = '...'
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					local abcd = TextLabel

					Drop.Name = 'Drop'
					Drop.Parent = Button
					Drop.Active = true
					Drop.BackgroundColor3 = maincolor
					Drop.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Drop.Position = UDim2.new(0, 0, 1, 1)
					Drop.Size = UDim2.new(1, 0, 0, 20)
					Drop.Visible = false
					Drop.BottomImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.CanvasSize = UDim2.new(0, 0, 0, 0)
					Drop.ScrollBarThickness = 4
					Drop.TopImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.MidImage = 'http://www.roblox.com/asset/?id=6724808282'
					--Drop.AutomaticCanvasSize = 'Y'
					for i,v in pairs(data.options) do
						Drop.CanvasSize = Drop.CanvasSize + UDim2.new(0, 0, 0, 17)
					end
					Drop.ZIndex = 5
					Drop.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)

					UIListLayout.Parent = Drop
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

					values[tabname][sectorname][text] = Element.value

					local num = #data.options
					if num > 5 then
						Drop.Size = UDim2.new(1, 0, 0, 85)
					else
						Drop.Size = UDim2.new(1, 0, 0, 17*num)
					end
					local first = true

					local function updatetext()
						local old = {}
						for i,v in ipairs(data.options) do
							if table.find(Element.value.Jumbobox, v) then
								table.insert(old, v)
							else
							end
						end
						local str = ''


						if #old == 0 then
							str = '...'
						else
							if #old == 1 then
								str = old[1]
							else
								for i,v in ipairs(old) do
									if i == 1 then
										str = v
									else
										if i > 2 then
											if i < 4 then
												str = str..',  ...'
											end
										else
											str = str..',  '..v
										end
									end
								end
							end
						end

						abcd.Text = str
					end
					for i,v in ipairs(data.options) do
						do
							local Button = Instance.new('TextButton')
							local TextLabel = Instance.new('TextLabel')

							Button.Name = v
							Button.Parent = Drop
							Button.BackgroundColor3 = maincolor
							Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Button.Position = UDim2.new(0, 30, 0, 16)
							Button.Size = UDim2.new(0, 175, 0, 17)
							Button.AutoButtonColor = false
							Button.Font = Enum.Font.SourceSans
							Button.Text = ''
							Button.TextColor3 = Color3.fromRGB(0, 0, 0)
							Button.TextSize = 14.000
							Button.BorderSizePixel = 0
							Button.ZIndex = 6

							TextLabel.Parent = Button
							TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
							TextLabel.BackgroundTransparency = 1.000
							TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
							TextLabel.Position = UDim2.new(0, 5, 0, -1)
							TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
							TextLabel.Font = Enum.Font.SourceSansSemibold
							TextLabel.Text = v
							TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
							TextLabel.TextSize = 14.000
							TextLabel.TextXAlignment = Enum.TextXAlignment.Left
							TextLabel.ZIndex = 6

							Button.MouseButton1Down:Connect(function()
								if table.find(Element.value.Jumbobox, v) then
									for i,a in pairs(Element.value.Jumbobox) do
										if a == v then
											table.remove(Element.value.Jumbobox, i)
										end
									end
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
								else
									table.insert(Element.value.Jumbobox, v)
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(150, 150, 150)})
								end
								updatetext()

								values[tabname][sectorname][text] = Element.value
								callback(Element.value)
							end)
							Button.MouseEnter:Connect(function()
								if not table.find(Element.value.Jumbobox, v) then
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
								end
							end)
							Button.MouseLeave:Connect(function()
								if not table.find(Element.value.Jumbobox, v) then
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
								end
							end)

							first = false
						end
					end
					function Element:SetValue(val)
						Element.value = val
						for i,v in pairs(Drop:GetChildren()) do
							if v.Name ~= 'UIListLayout' then
								if table.find(val.Jumbobox, v.Name) then
									v.TextLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
								else
									v.TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
								end
							end
						end
						updatetext()
						values[tabname][sectorname][text] = Element.value
						callback(val)
					end
					if data.default then
						Element:SetValue(data.default)
					end

					ImageLabel.Parent = Button
					ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ImageLabel.BackgroundTransparency = 1.000
					ImageLabel.Position = UDim2.new(0, 165, 0, 6)
					ImageLabel.Size = UDim2.new(0, 6, 0, 4)
					ImageLabel.Image = 'http://www.roblox.com/asset/?id=6724771531'

					TextLabel_3.Parent = Dropdown
					TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel_3.BackgroundTransparency = 1.000
					TextLabel_3.Position = UDim2.new(0, 32, 0, -1)
					TextLabel_3.Size = UDim2.new(0.111913361, 208, 0.382215232, 0)
					TextLabel_3.Font = Enum.Font.SourceSansSemibold
					TextLabel_3.Text = text
					TextLabel_3.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel_3.TextSize = 14.000
					TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left

					Button.MouseButton1Down:Connect(function()
						Drop.Visible = not Drop.Visible
						if not Drop.Visible then
							Drop.CanvasPosition = Vector2.new(0,0)
						end
					end)
					local indrop = false
					local ind = false
					Drop.MouseEnter:Connect(function()
						indrop = true
					end)
					Drop.MouseLeave:Connect(function()
						indrop = false
					end)
					Button.MouseEnter:Connect(function()
						ind = true
					end)
					Button.MouseLeave:Connect(function()
						ind = false
					end)
					
					game:GetService('UserInputService').InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
							if Drop.Visible == true and not indrop and not ind then
								Drop.Visible = false
								Drop.CanvasPosition = Vector2.new(0,0)
							end
						end
					end)
				elseif type == 'ToggleKeybind' then
					Section.Size = Section.Size + UDim2.new(0,0,0,16)
					Element.value = {Toggle = data.default and data.default.Toggle or false, Key, Type = 'Always', Active = true}

					local Toggle = Instance.new('Frame')
					local Button = Instance.new('TextButton')
					local Color = Instance.new('Frame')
					local TextLabel = Instance.new('TextLabel')

					Toggle.Name = 'Toggle'
					Toggle.Parent = Inner
					Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Toggle.BackgroundTransparency = 1.000
					Toggle.Size = UDim2.new(1, 0, 0, 15)

					Button.Name = 'Button'
					Button.Parent = Toggle
					Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Button.BackgroundTransparency = 1.000
					Button.Size = UDim2.new(1, 0, 1, 0)
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					Color.Name = 'Color'
					Color.Parent = Button
					Color.BackgroundColor3 = maincolor
					Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
					Color.Position = UDim2.new(0, 15, 0.5, -5)
					Color.Size = UDim2.new(0, 8, 0, 8)

					local binding = false
					TextLabel.Parent = Button
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Position = UDim2.new(0, 32, 0, -1)
					TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = text
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					local function update()
						if Element.value.Toggle then
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
						else
							keybindremove(text)
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
						end
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end

					Button.MouseButton1Down:Connect(function()
						if not binding then
							Element.value.Toggle = not Element.value.Toggle
							update()
							values[tabname][sectorname][text] = Element.value
							callback(Element.value)
						end
					end)
					if data.default then
						update()
					end
					values[tabname][sectorname][text] = Element.value
					do
						local Keybind = Instance.new('TextButton')
						local Frame = Instance.new('Frame')
						local Always = Instance.new('TextButton')
						local UIListLayout = Instance.new('UIListLayout')
						local Hold = Instance.new('TextButton')
						local Toggle = Instance.new('TextButton')

						Keybind.Name = 'Keybind'
						Keybind.Parent = Button
						Keybind.BackgroundColor3 = maincolor
						Keybind.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Keybind.Position = UDim2.new(0, 270, 0.5, -6)
						Keybind.Text = 'NONE'
						Keybind.Size = UDim2.new(0, 43, 0, 12)
						Keybind.Size = UDim2.new(0,txt:GetTextSize('NONE', 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 5,0, 12)
						Keybind.AutoButtonColor = false
						Keybind.Font = Enum.Font.SourceSansSemibold
						Keybind.TextColor3 = Color3.fromRGB(200, 200, 200)
						Keybind.TextSize = 14.000
						Keybind.AnchorPoint = Vector2.new(1,0)
						Keybind.ZIndex = 3

						Frame.Parent = Keybind
						Frame.BackgroundColor3 = maincolor
						Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Frame.Position = UDim2.new(1, -49, 0, 1)
						Frame.Size = UDim2.new(0, 49, 0, 49)
						Frame.Visible = false
						Frame.ZIndex = 3

						Always.Name = 'Always'
						Always.Parent = Frame
						Always.BackgroundColor3 = maincolor
						Always.BackgroundTransparency = 1.000
						Always.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Always.Position = UDim2.new(-3.03289485, 231, 0.115384616, -6)
						Always.Size = UDim2.new(1, 0, 0, 16)
						Always.AutoButtonColor = false
						Always.Font = Enum.Font.SourceSansBold
						Always.Text = 'Always'
						Always.TextColor3 = Color3.fromRGB(255, 255, 255)
						Always.TextSize = 14.000
						Always.ZIndex = 3

						UIListLayout.Parent = Frame
						UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
						UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

						Hold.Name = 'Hold'
						Hold.Parent = Frame
						Hold.BackgroundColor3 = maincolor
						Hold.BackgroundTransparency = 1.000
						Hold.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Hold.Position = UDim2.new(-3.03289485, 231, 0.115384616, -6)
						Hold.Size = UDim2.new(1, 0, 0, 16)
						Hold.AutoButtonColor = false
						Hold.Font = Enum.Font.SourceSansSemibold
						Hold.Text = 'Hold'
						Hold.TextColor3 = Color3.fromRGB(200, 200, 200)
						Hold.TextSize = 14.000
						Hold.ZIndex = 3

						Toggle.Name = 'Toggle'
						Toggle.Parent = Frame
						Toggle.BackgroundColor3 = maincolor
						Toggle.BackgroundTransparency = 1.000
						Toggle.BorderColor3 = Color3.fromRGB(27, 27, 35)
						Toggle.Position = UDim2.new(-3.03289485, 231, 0.115384616, -6)
						Toggle.Size = UDim2.new(1, 0, 0, 16)
						Toggle.AutoButtonColor = false
						Toggle.Font = Enum.Font.SourceSansSemibold
						Toggle.Text = 'Toggle'
						Toggle.TextColor3 = Color3.fromRGB(200, 200, 200)
						Toggle.TextSize = 14.000
						Toggle.ZIndex = 3

						for _,button in pairs(Frame:GetChildren()) do
							if button:IsA('TextButton') then
								button.MouseButton1Down:Connect(function()
									Element.value.Type = button.Text
									Frame.Visible = false
									if Element.value.Active ~= (Element.value.Type == 'Always' and true or false) then
										Element.value.Active = Element.value.Type == 'Always' and true or false
										callback(Element.value)
									end
									if button.Text == 'Always' then
										keybindremove(text)
									end
									for _,button in pairs(Frame:GetChildren()) do
										if button:IsA('TextButton') and button.Text ~= Element.value.Type then
											button.Font = Enum.Font.SourceSansSemibold
											library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200,200,200)})
										end
									end
									button.Font = Enum.Font.SourceSansBold
									button.TextColor3 = Color3.fromRGB(255, 255, 255)
									values[tabname][sectorname][text] = Element.value
								end)
								button.MouseEnter:Connect(function()
									if Element.value.Type ~= button.Text then
										library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255,255,255)})
									end
								end)
								button.MouseLeave:Connect(function()
									if Element.value.Type ~= button.Text then
										library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200,200,200)})
									end
								end)
							end
						end
						Keybind.MouseButton1Down:Connect(function()
							if not binding then
								wait()
								binding = true
								Keybind.Text = '...'
								Keybind.Size = UDim2.new(0,txt:GetTextSize('...', 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 4,0, 12)
							end
						end)
						Keybind.MouseButton2Down:Connect(function()
							if not binding then
								Frame.Visible = not Frame.Visible
							end
						end)
						local Player = game.Players.LocalPlayer
						local Mouse = Player:GetMouse()
						local InFrame = false
						Frame.MouseEnter:Connect(function()
							InFrame = true
						end)
						Frame.MouseLeave:Connect(function()
							InFrame = false
						end)
						local InFrame2 = false
						Keybind.MouseEnter:Connect(function()
							InFrame2 = true
						end)
						Keybind.MouseLeave:Connect(function()
							InFrame2 = false
						end)
						game:GetService('UserInputService').InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 and not binding then
								if Frame.Visible == true and not InFrame and not InFrame2 then
									Frame.Visible = false
								end
							end
							if binding then
								binding = false
								Keybind.Text = input.KeyCode.Name ~= 'Unknown' and input.KeyCode.Name:upper() or input.UserInputType.Name:upper()
								Keybind.Size = UDim2.new(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 5,0, 12)
								Element.value.Key = input.KeyCode.Name ~= 'Unknown' and input.KeyCode.Name or input.UserInputType.Name
								if input.KeyCode.Name == 'Backspace' then
									Keybind.Text = 'NONE'
									Keybind.Size = UDim2.new(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vector2.new(700, 12)).X + 4,0, 12)
									Element.value.Key = nil
									Element.value.Active = true
								end
								callback(Element.value)
							else
								if Element.value.Key ~= nil then
									if string.find(Element.value.Key, 'Mouse') then
										if input.UserInputType == Enum.UserInputType[Element.value.Key] then
											if Element.value.Type == 'Hold' then
												Element.value.Active = true
												callback(Element.value)
												if Element.value.Active and Element.value.Toggle then
													keybindadd(text)
												else
													keybindremove(text)
												end
											elseif Element.value.Type == 'Toggle' then
												Element.value.Active = not Element.value.Active
												callback(Element.value)
												if Element.value.Active and Element.value.Toggle then
													keybindadd(text)
												else
													keybindremove(text)
												end
											end
										end
									else
										if input.KeyCode == Enum.KeyCode[Element.value.Key] then
											if Element.value.Type == 'Hold' then
												Element.value.Active = true
												callback(Element.value)
												if Element.value.Active and Element.value.Toggle then
													keybindadd(text)
												else
													keybindremove(text)
												end
											elseif Element.value.Type == 'Toggle' then
												Element.value.Active = not Element.value.Active
												callback(Element.value)
												if Element.value.Active and Element.value.Toggle then
													keybindadd(text)
												else
													keybindremove(text)
												end
											end
										end
									end
								else
									Element.value.Active = true
								end
							end
							values[tabname][sectorname][text] = Element.value
						end)
						game:GetService('UserInputService').InputEnded:Connect(function(input)
							if Element.value.Key ~= nil then
								if string.find(Element.value.Key, 'Mouse') then
									if input.UserInputType == Enum.UserInputType[Element.value.Key] then
										if Element.value.Type == 'Hold' then
											Element.value.Active = false
											callback(Element.value)
											if Element.value.Active then
												keybindadd(text)
											else
												keybindremove(text)
											end
										end
									end
								else
									if input.KeyCode == Enum.KeyCode[Element.value.Key] then
										if Element.value.Type == 'Hold' then
											Element.value.Active = false
											callback(Element.value)
											if Element.value.Active then
												keybindadd(text)
											else
												keybindremove(text)
											end
										end
									end
								end
							end
							values[tabname][sectorname][text] = Element.value
						end)
					end
					function Element:SetValue(value)
						Element.value = value
						update()
					end
				elseif type == 'Toggle' then
					Section.Size = Section.Size + UDim2.new(0,0,0,16)
					Element.value = {Toggle = data.default and data.default.Toggle or false}

					local Toggle = Instance.new('Frame')
					local Button = Instance.new('TextButton')
					local Color = Instance.new('Frame')
					local TextLabel = Instance.new('TextLabel')
					Toggle.Name = 'Toggle'
					Toggle.Parent = Inner
					Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Toggle.BackgroundTransparency = 1.000
					Toggle.Size = UDim2.new(1, 0, 0, 15)

					Button.Name = 'Button'
					Button.Parent = Toggle
					Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Button.BackgroundTransparency = 1.000
					Button.Size = UDim2.new(1, 0, 1, 0)
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					Color.Name = 'Color'
					Color.Parent = Button
					Color.BackgroundColor3 = maincolor
					Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
					Color.Position = UDim2.new(0, 15, 0.5, -5)
					Color.Size = UDim2.new(0, 8, 0, 8)


					TextLabel.Parent = Button
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Position = UDim2.new(0, 32, 0, -1)
					TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = text
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					local function update()
						if Element.value.Toggle then
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
						else
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
						end
						values[tabname][sectorname][text] = Element.value
					end

					Button.MouseButton1Down:Connect(function()
						Element.value.Toggle = not Element.value.Toggle
						update()
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end)
					if data.default then
						update()
					end
					values[tabname][sectorname][text] = Element.value
					function Element:SetValue(value)
						Element.value = value
						values[tabname][sectorname][text] = Element.value
						update()
						callback(Element.value)
					end
				elseif type == 'ToggleColor' then
					Section.Size = Section.Size + UDim2.new(0,0,0,16)
					Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or Color3.fromRGB(255,255,255)}

					local Toggle = Instance.new('Frame')
					local Button = Instance.new('TextButton')
					local Color = Instance.new('Frame')
					local TextLabel = Instance.new('TextLabel')

					Toggle.Name = 'Toggle'
					Toggle.Parent = Inner
					Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Toggle.BackgroundTransparency = 1.000
					Toggle.Size = UDim2.new(1, 0, 0, 15)

					Button.Name = 'Button'
					Button.Parent = Toggle
					Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Button.BackgroundTransparency = 1.000
					Button.Size = UDim2.new(1, 0, 1, 0)
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					local Gradient = Instance.new('UIGradient')

					Color.Name = 'Color'
					Color.Parent = Button
					Color.BackgroundColor3 = maincolor
					Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
					Color.Position = UDim2.new(0, 15, 0.5, -5)
					Color.Size = UDim2.new(0, 8, 0, 8)

					Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(180, 180, 180))}
					Gradient.Rotation = 90
					Gradient.Name = 'Gradient'
					Gradient.Parent = Color

					TextLabel.Parent = Button
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Position = UDim2.new(0, 32, 0, -1)
					TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = text
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					local function update()
						if Element.value.Toggle then
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
						else
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
						end
						values[tabname][sectorname][text] = Element.value
					end

					local ColorH,ColorS,ColorV

					local ColorP = Instance.new('TextButton')
					local Frame = Instance.new('Frame')
					local Colorpick = Instance.new('ImageButton')
					local ColorDrag = Instance.new('Frame')
					local Huepick = Instance.new('ImageButton')
					local Huedrag = Instance.new('Frame')

					ColorP.Name = 'ColorP'
					ColorP.Parent = Button
					ColorP.AnchorPoint = Vector2.new(1, 0)
					ColorP.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
					ColorP.BorderColor3 = Color3.fromRGB(27, 27, 35)
					ColorP.Position = UDim2.new(0, 270, 0.5, -4)
					ColorP.Size = UDim2.new(0, 18, 0, 8)
					ColorP.AutoButtonColor = false
					ColorP.Font = Enum.Font.SourceSansSemibold
					ColorP.Text = ''
					ColorP.TextColor3 = Color3.fromRGB(200, 200, 200)
					ColorP.TextSize = 14.000

					Frame.Parent = ColorP
					Frame.BackgroundColor3 = maincolor
					Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Frame.Position = UDim2.new(-0.666666687, -170, 1.375, 0)
					Frame.Size = UDim2.new(0, 200, 0, 170)
					Frame.Visible = false
					Frame.ZIndex = 3

					Colorpick.Name = 'Colorpick'
					Colorpick.Parent = Frame
					Colorpick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Colorpick.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Colorpick.ClipsDescendants = false
					Colorpick.Position = UDim2.new(0, 40, 0, 10)
					Colorpick.Size = UDim2.new(0, 150, 0, 150)
					Colorpick.AutoButtonColor = false
					Colorpick.Image = 'rbxassetid://4155801252'
					Colorpick.ImageColor3 = Color3.fromRGB(255, 0, 0)
					Colorpick.ZIndex = 3

					ColorDrag.Name = 'ColorDrag'
					ColorDrag.Parent = Colorpick
					ColorDrag.AnchorPoint = Vector2.new(0.5, 0.5)
					ColorDrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ColorDrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
					ColorDrag.Size = UDim2.new(0, 4, 0, 4)
					ColorDrag.ZIndex = 3

					Huepick.Name = 'Huepick'
					Huepick.Parent = Frame
					Huepick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Huepick.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Huepick.ClipsDescendants = false
					Huepick.Position = UDim2.new(0, 10, 0, 10)
					Huepick.Size = UDim2.new(0, 20, 0, 150)
					Huepick.AutoButtonColor = false
					Huepick.Image = 'rbxassetid://3641079629'
					Huepick.ImageColor3 = Color3.fromRGB(255, 0, 0)
					Huepick.ImageTransparency = 1
					Huepick.BackgroundTransparency = 0
					Huepick.ZIndex = 3

					local HueFrameGradient = Instance.new('UIGradient')
					HueFrameGradient.Rotation = 90
					HueFrameGradient.Name = 'HueFrameGradient'
					HueFrameGradient.Parent = Huepick
					HueFrameGradient.Color = ColorSequence.new {
						ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
						ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255)),
						ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)),
						ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
						ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)),
						ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)),
						ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
					}	

					Huedrag.Name = 'Huedrag'
					Huedrag.Parent = Huepick
					Huedrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Huedrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Huedrag.Size = UDim2.new(1, 0, 0, 2)
					Huedrag.ZIndex = 3

					ColorP.MouseButton1Down:Connect(function()
						Frame.Visible = not Frame.Visible
					end)
					local abc = false
					local inCP = false
					ColorP.MouseEnter:Connect(function()
						abc = true
					end)
					ColorP.MouseLeave:Connect(function()
						abc = false
					end)
					Frame.MouseEnter:Connect(function()
						inCP = true
					end)
					Frame.MouseLeave:Connect(function()
						inCP = false
					end)

					ColorH = (math.clamp(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y)
					ColorS = 1-(math.clamp(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
					ColorV = 1-(math.clamp(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)

					if data.default and data.default.Color ~= nil then
						ColorH, ColorS, ColorV = data.default.Color:ToHSV()

						ColorH = math.clamp(ColorH,0,1)
						ColorS = math.clamp(ColorS,0,1)
						ColorV = math.clamp(ColorV,0,1)
						ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)

						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)

						values[tabname][sectorname][text] = data.default.Color
					end

					local mouse = LocalPlayer:GetMouse()
					game:GetService('UserInputService').InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
							if not dragging and not abc and not inCP then
								Frame.Visible = false
							end
						end
					end)

					local function updateColor()
						local ColorX = (math.clamp(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
						local ColorY = (math.clamp(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)
						ColorDrag.Position = UDim2.new(ColorX, 0, ColorY, 0)
						ColorS = 1-ColorX
						ColorV = 1-ColorY
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						values[tabname][sectorname][text] = Element.value
						Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
						callback(Element.value)
					end
					local function updateHue()
						local y = math.clamp(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148)
						Huedrag.Position = UDim2.new(0, 0, 0, y)
						hue = y/148
						ColorH = 1-hue
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						values[tabname][sectorname][text] = Element.value
						Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
						callback(Element.value)
					end
					Colorpick.MouseButton1Down:Connect(function()
						updateColor()
						moveconnection = mouse.Move:Connect(function()
							updateColor()
						end)
						releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
								updateColor()
								moveconnection:Disconnect()
								releaseconnection:Disconnect()
							end
						end)
					end)
					Huepick.MouseButton1Down:Connect(function()
						updateHue()
						moveconnection = mouse.Move:Connect(function()
							updateHue()
						end)
						releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
								updateHue()
								moveconnection:Disconnect()
								releaseconnection:Disconnect()
							end
						end)
					end)

					Button.MouseButton1Down:Connect(function()
						Element.value.Toggle = not Element.value.Toggle
						update()
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end)
					if data.default then
						update()
					end
					values[tabname][sectorname][text] = Element.value
					function Element:SetValue(value)
						Element.value = value
						local duplicate = Color3.new(value.Color.R, value.Color.G, value.Color.B)
						ColorH, ColorS, ColorV = duplicate:ToHSV()
						ColorH = math.clamp(ColorH,0,1)
						ColorS = math.clamp(ColorS,0,1)
						ColorV = math.clamp(ColorV,0,1)

						ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						update()
						Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)

						callback(value)
					end
				elseif type == 'ToggleTrans' then
					Section.Size = Section.Size + UDim2.new(0,0,0,16)
					Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or Color3.fromRGB(255,255,255), Transparency = data.default and data.default.Transparency or 0}

					local Toggle = Instance.new('Frame')
					local Button = Instance.new('TextButton')
					local Color = Instance.new('Frame')
					local TextLabel = Instance.new('TextLabel')

					Toggle.Name = 'Toggle'
					Toggle.Parent = Inner
					Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Toggle.BackgroundTransparency = 1.000
					Toggle.Size = UDim2.new(1, 0, 0, 15)

					Button.Name = 'Button'
					Button.Parent = Toggle
					Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Button.BackgroundTransparency = 1.000
					Button.Size = UDim2.new(1, 0, 1, 0)
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					local Gradient = Instance.new('UIGradient')

					Color.Name = 'Color'
					Color.Parent = Button
					Color.BackgroundColor3 = maincolor
					Color.BorderColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Color.BorderColor3 = values.misc.ui['ui toggle box'].Color end)
					Color.Position = UDim2.new(0, 15, 0.5, -5)
					Color.Size = UDim2.new(0, 8, 0, 8)

					Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(180, 180, 180))}
					Gradient.Rotation = 90
					Gradient.Name = 'Gradient'
					Gradient.Parent = Color

					TextLabel.Parent = Button
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Position = UDim2.new(0, 32, 0, -1)
					TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = text
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					local function update()
						if Element.value.Toggle then
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
						else
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
						end
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end

					local ColorH,ColorS,ColorV

					local ColorP = Instance.new('TextButton')
					local Frame = Instance.new('Frame')
					local Colorpick = Instance.new('ImageButton')
					local ColorDrag = Instance.new('Frame')
					local Huepick = Instance.new('ImageButton')
					local Huedrag = Instance.new('Frame')

					ColorP.Name = 'ColorP'
					ColorP.Parent = Button
					ColorP.AnchorPoint = Vector2.new(1, 0)
					ColorP.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
					ColorP.BorderColor3 = Color3.fromRGB(27, 27, 35)
					ColorP.Position = UDim2.new(0, 270, 0.5, -4)
					ColorP.Size = UDim2.new(0, 18, 0, 8)
					ColorP.AutoButtonColor = false
					ColorP.Font = Enum.Font.SourceSansSemibold
					ColorP.Text = ''
					ColorP.TextColor3 = Color3.fromRGB(200, 200, 200)
					ColorP.TextSize = 14.000

					Frame.Parent = ColorP
					Frame.BackgroundColor3 = maincolor
					Frame.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Frame.Position = UDim2.new(-0.666666687, -170, 1.375, 0)
					Frame.Size = UDim2.new(0, 200, 0, 190)
					Frame.Visible = false
					Frame.ZIndex = 3

					Colorpick.Name = 'Colorpick'
					Colorpick.Parent = Frame
					Colorpick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Colorpick.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Colorpick.ClipsDescendants = false
					Colorpick.Position = UDim2.new(0, 40, 0, 10)
					Colorpick.Size = UDim2.new(0, 150, 0, 150)
					Colorpick.AutoButtonColor = false
					Colorpick.Image = 'rbxassetid://4155801252'
					Colorpick.ImageColor3 = Color3.fromRGB(255, 0, 0)
					Colorpick.ZIndex = 3

					ColorDrag.Name = 'ColorDrag'
					ColorDrag.Parent = Colorpick
					ColorDrag.AnchorPoint = Vector2.new(0.5, 0.5)
					ColorDrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ColorDrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
					ColorDrag.Size = UDim2.new(0, 4, 0, 4)
					ColorDrag.ZIndex = 3

					Huepick.Name = 'Huepick'
					Huepick.Parent = Frame
					Huepick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Huepick.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Huepick.ClipsDescendants = true
					Huepick.Position = UDim2.new(0, 10, 0, 10)
					Huepick.Size = UDim2.new(0, 20, 0, 150)
					Huepick.AutoButtonColor = false
					Huepick.Image = 'rbxassetid://3641079629'
					Huepick.ImageColor3 = Color3.fromRGB(255, 0, 0)
					Huepick.ImageTransparency = 1
					Huepick.BackgroundTransparency = 0
					Huepick.ZIndex = 3

					local HueFrameGradient = Instance.new('UIGradient')
					HueFrameGradient.Rotation = 90
					HueFrameGradient.Name = 'HueFrameGradient'
					HueFrameGradient.Parent = Huepick
					HueFrameGradient.Color = ColorSequence.new {
						ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
						ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255)),
						ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)),
						ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)),
						ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)),
						ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)),
						ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))
					}	

					Huedrag.Name = 'Huedrag'
					Huedrag.Parent = Huepick
					Huedrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Huedrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Huedrag.Size = UDim2.new(1, 0, 0, 2)
					Huedrag.ZIndex = 3

					local Transpick = Instance.new('ImageButton')
					local Transcolor = Instance.new('ImageLabel')
					local Transdrag = Instance.new('Frame')

					Transpick.Name = 'Transpick'
					Transpick.Parent = Frame
					Transpick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Transpick.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Transpick.Position = UDim2.new(0, 10, 0, 167)
					Transpick.Size = UDim2.new(0, 180, 0, 15)
					Transpick.AutoButtonColor = false
					Transpick.Image = 'rbxassetid://3887014957'
					Transpick.ScaleType = Enum.ScaleType.Tile
					Transpick.TileSize = UDim2.new(0, 10, 0, 10)
					Transpick.ZIndex = 3

					Transcolor.Name = 'Transcolor'
					Transcolor.Parent = Transpick
					Transcolor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Transcolor.BackgroundTransparency = 1.000
					Transcolor.Size = UDim2.new(1, 0, 1, 0)
					Transcolor.Image = 'rbxassetid://3887017050'
					Transcolor.ImageColor3 = Color3.fromRGB(255, 0, 4)
					Transcolor.ZIndex = 3

					Transdrag.Name = 'Transdrag'
					Transdrag.Parent = Transcolor
					Transdrag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Transdrag.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Transdrag.Position = UDim2.new(0, -1, 0, 0)
					Transdrag.Size = UDim2.new(0, 2, 1, 0)
					Transdrag.ZIndex = 3

					ColorP.MouseButton1Down:Connect(function()
						Frame.Visible = not Frame.Visible
					end)
					local abc = false
					local inCP = false
					ColorP.MouseEnter:Connect(function()
						abc = true
					end)
					ColorP.MouseLeave:Connect(function()
						abc = false
					end)
					Frame.MouseEnter:Connect(function()
						inCP = true
					end)
					Frame.MouseLeave:Connect(function()
						inCP = false
					end)

					ColorH = (math.clamp(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y)
					ColorS = 1-(math.clamp(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
					ColorV = 1-(math.clamp(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)

					if data.default and data.default.Color ~= nil then
						ColorH, ColorS, ColorV = data.default.Color:ToHSV()

						ColorH = math.clamp(ColorH,0,1)
						ColorS = math.clamp(ColorS,0,1)
						ColorV = math.clamp(ColorV,0,1)
						ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)

						Transcolor.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)

						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)
					end
					if data.default and data.default.Transparency ~= nil then
						Transdrag.Position = UDim2.new(data.default.Transparency, -1, 0, 0)
					end
					local mouse = LocalPlayer:GetMouse()
					game:GetService('UserInputService').InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
							if not dragging and not abc and not inCP then
								Frame.Visible = false
							end
						end
					end)

					local function updateColor()
						local ColorX = (math.clamp(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)
						local ColorY = (math.clamp(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)
						ColorDrag.Position = UDim2.new(ColorX, 0, ColorY, 0)
						ColorS = 1-ColorX
						ColorV = 1-ColorY
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						Transcolor.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						values[tabname][sectorname][text] = Element.value
						Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
						callback(Element.value)
					end
					local function updateHue()
						local y = math.clamp(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148)
						Huedrag.Position = UDim2.new(0, 0, 0, y)
						hue = y/148
						ColorH = 1-hue
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						Transcolor.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						values[tabname][sectorname][text] = Element.value
						Element.value.Color = Color3.fromHSV(ColorH, ColorS, ColorV)
						callback(Element.value)
					end
					local function updateTrans()
						local x = math.clamp(mouse.X - Transpick.AbsolutePosition.X, 0, 178)
						Transdrag.Position = UDim2.new(0, x, 0, 0)
						Element.value.Transparency = (x/178)
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end
					Transpick.MouseButton1Down:Connect(function()
						updateTrans()
						moveconnection = mouse.Move:Connect(function()
							updateTrans()
						end)
						releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
								updateTrans()
								moveconnection:Disconnect()
								releaseconnection:Disconnect()
							end
						end)
					end)
					Colorpick.MouseButton1Down:Connect(function()
						updateColor()
						moveconnection = mouse.Move:Connect(function()
							updateColor()
						end)
						releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
								updateColor()
								moveconnection:Disconnect()
								releaseconnection:Disconnect()
							end
						end)
					end)
					Huepick.MouseButton1Down:Connect(function()
						updateHue()
						moveconnection = mouse.Move:Connect(function()
							updateHue()
						end)
						releaseconnection = game:GetService('UserInputService').InputEnded:Connect(function(Mouse)
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
								updateHue()
								moveconnection:Disconnect()
								releaseconnection:Disconnect()
							end
						end)
					end)

					Button.MouseButton1Down:Connect(function()
						Element.value.Toggle = not Element.value.Toggle
						update()
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end)
					if data.default then
						if Element.value.Toggle then
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = coolcolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
						else
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = maincolor})
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
						end
						values[tabname][sectorname][text] = Element.value
					end
					values[tabname][sectorname][text] = Element.value
					function Element:SetValue(value)
						Element.value = value
						local duplicate = Color3.new(value.Color.R, value.Color.G, value.Color.B)
						ColorH, ColorS, ColorV = duplicate:ToHSV()
						ColorH = math.clamp(ColorH,0,1)
						ColorS = math.clamp(ColorS,0,1)
						ColorV = math.clamp(ColorV,0,1)

						ColorDrag.Position = UDim2.new(1-ColorS,0,1-ColorV,0)
						Colorpick.ImageColor3 = Color3.fromHSV(ColorH, 1, 1)
						ColorP.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
						update()
						Huedrag.Position = UDim2.new(0, 0, 1-ColorH, -1)
					end
				elseif type == 'TextBox' then
					Section.Size = Section.Size + UDim2.new(0,0,0,30)
					Element.value = {Text = data.default and data.default.text or ''}

					local Box = Instance.new('Frame')
					local TextBox = Instance.new('TextBox')

					Box.Name = 'Box'
					Box.Parent = Inner
					Box.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
					Box.BackgroundTransparency = 1.000
					Box.BorderColor3 = Color3.fromRGB(25, 25, 25)
					Box.Position = UDim2.new(0, 0, 0.542059898, 0)
					Box.Size = UDim2.new(1, 0, 0, 30)

					TextBox.Parent = Box
					TextBox.BackgroundColor3 = maincolor
					TextBox.BorderColor3 = Color3.fromRGB(27, 27, 35)
					TextBox.Position = UDim2.new(0.108303241, 0, 0.224465579, 0)
					TextBox.Size = UDim2.new(0, 175, 0, 20)
					TextBox.Font = Enum.Font.SourceSans
					TextBox.PlaceholderText = data.placeholder
					TextBox.Text = Element.value.Text
					TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
					TextBox.TextSize = 14.000

					local Gradient = Instance.new('UIGradient')

					Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(180, 180, 180))}
					Gradient.Rotation = 90
					Gradient.Name = 'Gradient'
					Gradient.Parent = TextBox

					values[tabname][sectorname][text] = Element.value

					TextBox:GetPropertyChangedSignal('Text'):Connect(function()
						Element.value.Text = TextBox.Text
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
					end)

					function Element:SetValue(value)
						Element.value = value
						values[tabname][sectorname][text] = Element.value
						TextBox.Text = Element.value.Text
					end

							elseif type == "Label" then 
								Section.Size = Section.Size + UDim2.new(0,0,0,17) 
								Element.value = {Text = data.default and data.options.text or '', stringchange} 

								local Toggle = Instance.new("Frame") 
								local TextLabel = Instance.new("TextLabel") 

								Toggle.Name = "Toggle" 
								Toggle.Parent = Inner 
								Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								Toggle.BackgroundTransparency = 1.000 
								Toggle.Size = UDim2.new(1, 0, 0, 15) 

								TextLabel.Parent = Toggle 
								TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								TextLabel.BackgroundTransparency = 1.000 
								TextLabel.Position = UDim2.new(0, 32, 0, -1) 
								TextLabel.Size = UDim2.new(0.111913361, 208, 1, 0) 
								TextLabel.Font = Enum.Font.Gotham 
								TextLabel.Text = text 
								TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200) 
								TextLabel.TextSize = 12.000
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left 
								Element.value.stringchange = function(text)
								TextLabel.Text = text
								end
								
								values[tabname][sectorname][text] = Element.value

				elseif type == 'Dropdown' then
					Section.Size = Section.Size + UDim2.new(0,0,0,39)
					Element.value = {Dropdown = data.options[1]}

					local Dropdown = Instance.new('Frame')
					local Button = Instance.new('TextButton')
					local TextLabel = Instance.new('TextLabel')
					local Drop = Instance.new('ScrollingFrame')
					local Button_2 = Instance.new('TextButton')
					local TextLabel_2 = Instance.new('TextLabel')
					local UIListLayout = Instance.new('UIListLayout')
					local ImageLabel = Instance.new('ImageLabel')
					local TextLabel_3 = Instance.new('TextLabel')

					Dropdown.Name = 'Dropdown'
					Dropdown.Parent = Inner
					Dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Dropdown.BackgroundTransparency = 1.000
					Dropdown.Position = UDim2.new(0, 0, 0.255102038, 0)
					Dropdown.Size = UDim2.new(1, 0, 0, 39)

					Button.Name = 'Button'
					Button.Parent = Dropdown
					Button.BackgroundColor3 = maincolor
					Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Button.Position = UDim2.new(0, 30, 0, 16)
					Button.Size = UDim2.new(0, 175, 0, 17)
					Button.AutoButtonColor = false
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					local Gradient = Instance.new('UIGradient')

					Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(180, 180, 180))}
					Gradient.Rotation = 90
					Gradient.Name = 'Gradient'
					Gradient.Parent = Button
					
					TextLabel.Parent = Button
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
					TextLabel.Position = UDim2.new(0, 5, 0, 0)
					TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = Element.value.Dropdown
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					local abcd = TextLabel

					Drop.Name = 'Drop'
					Drop.Parent = Button
					Drop.Active = true
					Drop.BackgroundColor3 = maincolor
					Drop.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Drop.Position = UDim2.new(0, 0, 1, 1)
					Drop.Size = UDim2.new(1, 0, 0, 20)
					Drop.Visible = false
					Drop.BottomImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.CanvasSize = UDim2.new(0, 0, 0, 0)
					Drop.ScrollBarThickness = 4
					Drop.TopImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.MidImage = 'http://www.roblox.com/asset/?id=6724808282'
					Drop.AutomaticCanvasSize = 'Y'
					Drop.ZIndex = 5
					Drop.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)

					UIListLayout.Parent = Drop
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

					local num = #data.options
					if num > 5 then
						Drop.Size = UDim2.new(1, 0, 0, 85)
					else
						Drop.Size = UDim2.new(1, 0, 0, 17*num)
					end
					local first = true
					for i,v in ipairs(data.options) do
						do
							local Button = Instance.new('TextButton')
							local TextLabel = Instance.new('TextLabel')

							Button.Name = v
							Button.Parent = Drop
							Button.BackgroundColor3 = maincolor
							Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
							Button.Position = UDim2.new(0, 30, 0, 16)
							Button.Size = UDim2.new(0, 175, 0, 17)
							Button.AutoButtonColor = false
							Button.Font = Enum.Font.SourceSans
							Button.Text = ''
							Button.TextColor3 = Color3.fromRGB(0, 0, 0)
							Button.TextSize = 14.000
							Button.BorderSizePixel = 0
							Button.ZIndex = 6

							TextLabel.Parent = Button
							TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
							TextLabel.BackgroundTransparency = 1.000
							TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
							TextLabel.Position = UDim2.new(0, 5, 0, -1)
							TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0)
							TextLabel.Font = Enum.Font.SourceSansSemibold
							TextLabel.Text = v
							TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
							TextLabel.TextSize = 14.000
							TextLabel.TextXAlignment = Enum.TextXAlignment.Left
							TextLabel.ZIndex = 6

							Button.MouseButton1Down:Connect(function()
								Drop.Visible = false
								Element.value.Dropdown = v
								abcd.Text = v
								values[tabname][sectorname][text] = Element.value
								callback(Element.value)
								Drop.CanvasPosition = Vector2.new(0,0)
							end)
							Button.MouseEnter:Connect(function()
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(255, 255, 255)})
							end)
							Button.MouseLeave:Connect(function()
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(200, 200, 200)})
							end)

							first = false
						end
					end

					function Element:SetValue(val)
						Element.value = val
						abcd.Text = val.Dropdown
						values[tabname][sectorname][text] = Element.value
						callback(val)
					end

					ImageLabel.Parent = Button
					ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					ImageLabel.BackgroundTransparency = 1.000
					ImageLabel.Position = UDim2.new(0, 165, 0, 6)
					ImageLabel.Size = UDim2.new(0, 6, 0, 4)
					ImageLabel.Image = 'http://www.roblox.com/asset/?id=6724771531'

					TextLabel_3.Parent = Dropdown
					TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel_3.BackgroundTransparency = 1.000
					TextLabel_3.Position = UDim2.new(0, 32, 0, -1)
					TextLabel_3.Size = UDim2.new(0.111913361, 208, 0.382215232, 0)
					TextLabel_3.Font = Enum.Font.SourceSansSemibold
					TextLabel_3.Text = text
					TextLabel_3.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel_3.TextSize = 14.000
					TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left

					Button.MouseButton1Down:Connect(function()
						Drop.Visible = not Drop.Visible
						if not Drop.Visible then
							Drop.CanvasPosition = Vector2.new(0,0)
						end
					end)
					local indrop = false
					local ind = false
					Drop.MouseEnter:Connect(function()
						indrop = true
					end)
					Drop.MouseLeave:Connect(function()
						indrop = false
					end)
					Button.MouseEnter:Connect(function()
						ind = true
					end)
					Button.MouseLeave:Connect(function()
						ind = false
					end)
					game:GetService('UserInputService').InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
							if Drop.Visible == true and not indrop and not ind then
								Drop.Visible = false
								Drop.CanvasPosition = Vector2.new(0,0)
							end
						end
					end)
					values[tabname][sectorname][text] = Element.value
					
							elseif type == 'lmao' then 
								Section.Size = Section.Size + UDim2.new(0,0,0,39) 
								Element.value = {Dropdown = data.options[1]} 

								local Dropdown = Instance.new("Frame") 
								local Button = Instance.new("TextButton") 
								local TextLabel = Instance.new("TextLabel") 
								local Drop = Instance.new("ScrollingFrame") 
								local Button_2 = Instance.new("TextButton") 
								local TextLabel_2 = Instance.new("TextLabel") 
								local UIListLayout = Instance.new("UIListLayout") 
								local ImageLabel = Instance.new("ImageLabel") 
								local TextLabel_3 = Instance.new("TextLabel") 

								Dropdown.Name = "Dropdown" 
								Dropdown.Parent = Inner 
								Dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								Dropdown.BackgroundTransparency = 1.000 
								Dropdown.Position = UDim2.new(0, 0, 0.255102038, 0) 
								Dropdown.Size = UDim2.new(1, 0, 0, 39) 

								Button.Name = "Button" 
								Button.Parent = Dropdown 
								Button.BackgroundColor3 = maincolor 
								Button.BorderColor3 = Color3.fromRGB(27, 27, 35) 
								Button.Position = UDim2.new(0, 30, 0, 16) 
								Button.Size = UDim2.new(0, 175, 0, 17) 
								Button.AutoButtonColor = false 
								Button.Font = Enum.Font.SourceSans 
								Button.Text = "" 
								Button.TextColor3 = Color3.fromRGB(0, 0, 0) 
								Button.TextSize = 11.000

								TextLabel.Parent = Button 
								TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								TextLabel.BackgroundTransparency = 1.000 
								TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53) 
								TextLabel.Position = UDim2.new(0, 5, 0, 0) 
								TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0) 
								TextLabel.Font = Enum.Font.Gotham 
								TextLabel.Text = Element.value.Dropdown 
								TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200) 
								TextLabel.TextSize = 11.000
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

								local abcd = TextLabel 

								Drop.Name = "Drop" 
								Drop.Parent = Button 
								Drop.Active = true 
								Drop.BackgroundColor3 = maincolor 
								Drop.BorderColor3 = Color3.fromRGB(27, 27, 35) 
								Drop.Position = UDim2.new(0, 0, 1, 1) 
								Drop.Size = UDim2.new(1, 0, 0, 20) 
								Drop.Visible = false 
								Drop.BottomImage = "http://www.roblox.com/asset/?id=6724808282" 
								Drop.CanvasSize = UDim2.new(0, 0, 0, 0) 
								Drop.ScrollBarThickness = 4 
								Drop.TopImage = "http://www.roblox.com/asset/?id=6724808282" 
								Drop.MidImage = "http://www.roblox.com/asset/?id=6724808282" 
								Drop.AutomaticCanvasSize = "Y" 
								Drop.ZIndex = 5 
								Drop.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255) 

								UIListLayout.Parent = Drop 
								UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
								UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 

								local num = #data.options 
								if num > 5 then 
									Drop.Size = UDim2.new(1, 0, 0, 85) 
								else 
									Drop.Size = UDim2.new(1, 0, 0, 17*num) 
								end 
								local first = true 
							function gay()
								for i,v in ipairs(data.options) do 
									do 
										local Button = Instance.new("TextButton") 
										local TextLabel = Instance.new("TextLabel") 

										Button.Name = v 
										Button.Parent = Drop 
										Button.BackgroundColor3 = maincolor 
										Button.BorderColor3 = Color3.fromRGB(27, 27, 35) 
										Button.Position = UDim2.new(0, 30, 0, 16) 
										Button.Size = UDim2.new(0, 175, 0, 17) 
										Button.AutoButtonColor = false 
										Button.Font = Enum.Font.SourceSans 
										Button.Text = "" 
										Button.TextColor3 = Color3.fromRGB(0, 0, 0) 
										Button.TextSize = 11.000
										Button.BorderSizePixel = 0 
										Button.ZIndex = 6 

										TextLabel.Parent = Button 
										TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
										TextLabel.BackgroundTransparency = 1.000 
										TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53) 
										TextLabel.Position = UDim2.new(0, 5, 0, -1) 
										TextLabel.Size = UDim2.new(-0.21714285, 208, 1, 0) 
										TextLabel.Font = Enum.Font.Gotham 
										TextLabel.Text = v 
										TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200) 
										TextLabel.TextSize = 11.000
										TextLabel.TextXAlignment = Enum.TextXAlignment.Left 
										TextLabel.ZIndex = 6 

										Button.MouseButton1Down:Connect(function() 
											Drop.Visible = false 
											Element.value.Dropdown = v 
											abcd.Text = v 
											values[tabname][sectorname][text] = Element.value 
											callback(Element.value) 
											Drop.CanvasPosition = Vector2.new(0,0) 
										end) 
										Button.MouseEnter:Connect(function() 
											library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(255, 255, 255)}) 
										end) 
										Button.MouseLeave:Connect(function() 
											library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  Color3.fromRGB(200, 200, 200)}) 
										end) 

										first = false 
							Players.PlayerAdded:Connect(function(player)
								Button:Destroy()
								TextLabel:Destroy()
							end)
 
							Players.PlayerRemoving:Connect(function(player) 
								Button:Destroy()
								TextLabel:Destroy()
							end)
									end 
								end 
							end
gay()



Players.PlayerAdded:Connect(function()
table.clear(data.options)
for i,v in pairs(game.Players:GetPlayers()) do
table.insert(data.options, v.Name)
end
	gay()
end)

Players.PlayerRemoving:Connect(function() 
table.clear(data.options)
for i,v in pairs(game.Players:GetPlayers()) do
table.insert(data.options, v.Name)
end
	gay()
end)

--[[for _,Player in pairs(game.Players:GetPlayers()) do
	if Player ~= LocalPlayer then
		table.clear(data.options)
		data.options = {}
		if  GetTeam(Player) ~= "TTT" and GetTeam(Player) ~= GetTeam(LocalPlayer) then
			insertwithoutdupes(data.options, Player.Name)
			gay()
			print(Player.Name.. "has been added in list in getplayers")
		elseif GetTeam(Player) ~= "TTT" then
			removewithoutdupes(data.options, Player.Name)
			gay()
			print(Player.Name.. "has been deleted from list in getplayers")
		end
	end
end

for _, team in pairs(game:GetService("Teams"):GetTeams()) do
if team ~= "TTT" then
    team.PlayerAdded:connect(function(player)
		if player.Name == LocalPlayer then
			for i,v in pairs(data.options) do
				if GetTeam(i) == GetTeam(LocalPlayer) and GetTeam(LocalPlayer) ~= 'TTT' then
					removewithoutdupes(data.options, v)
					print("removed in list "..v.. " in localplayer teamchanged event")
					gay()
				elseif GetTeam(i) ~= GetTeam(LocalPlayer) and GetTeam(LocalPlayer) ~= 'TTT' then
					insertwithoutdupes(data.options, v)
					print("added in list "..v.. " in localplayer teamchanged event")
					gay()
				end
			end
		else
			if team ~= GetTeam(LocalPlayer) then
				insertwithoutdupes(data.options, player.Name)
				gay()
			else
				removewithoutdupes(data.options, player.Name)
				gay()
			end
		end
    end)
end
end--]]
								function Element:SetValue(val) 
									Element.value = val 
									abcd.Text = val.Dropdown 
									values[tabname][sectorname][text] = Element.value 
									callback(val) 
								end 

								ImageLabel.Parent = Button 
								ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								ImageLabel.BackgroundTransparency = 1.000 
								ImageLabel.Position = UDim2.new(0, 165, 0, 6) 
								ImageLabel.Size = UDim2.new(0, 6, 0, 4) 
								ImageLabel.Image = "http://www.roblox.com/asset/?id=6724771531" 

								TextLabel_3.Parent = Dropdown 
								TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								TextLabel_3.BackgroundTransparency = 1.000 
								TextLabel_3.Position = UDim2.new(0, 32, 0, -1) 
								TextLabel_3.Size = UDim2.new(0.111913361, 208, 0.382215232, 0) 
								TextLabel_3.Font = Enum.Font.Gotham 
								TextLabel_3.Text = text 
								TextLabel_3.TextColor3 = Color3.fromRGB(200, 200, 200) 
								TextLabel_3.TextSize = 11.000
								TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left 

								Button.MouseButton1Down:Connect(function() 
									Drop.Visible = not Drop.Visible 
									if not Drop.Visible then 
										Drop.CanvasPosition = Vector2.new(0,0) 
									end 
								end) 
								local indrop = false 
								local ind = false 
								Drop.MouseEnter:Connect(function() 
									indrop = true 
								end) 
								Drop.MouseLeave:Connect(function() 
									indrop = false 
								end) 
								Button.MouseEnter:Connect(function() 
									ind = true 
								end) 
								Button.MouseLeave:Connect(function() 
									ind = false 
								end) 
								game:GetService("UserInputService").InputBegan:Connect(function(input) 
									if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then 
										if Drop.Visible == true and not indrop and not ind then 
											Drop.Visible = false 
											Drop.CanvasPosition = Vector2.new(0,0) 
										end 
									end 
								end) 
								values[tabname][sectorname][text] = Element.value
					
				elseif type == 'Slider' then

					Section.Size = Section.Size + UDim2.new(0,0,0,25)

					local Slider = Instance.new('Frame')
					local TextLabel = Instance.new('TextLabel')
					local Button = Instance.new('TextButton')
					local Frame = Instance.new('Frame')
					local Value = Instance.new('TextBox')

					Slider.Name = 'Slider'
					Slider.Parent = Inner
					Slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Slider.BackgroundTransparency = 1.000
					Slider.Position = UDim2.new(0, 0, 0.653061211, 0)
					Slider.Size = UDim2.new(1, 0, 0, 25)

					local Gradient = Instance.new('UIGradient')

					Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(180, 180, 180))}
					Gradient.Rotation = 90
					Gradient.Name = 'Gradient'
					Gradient.Parent = Slider

					TextLabel.Parent = Slider
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.Position = UDim2.new(0, 32, 0, -2)
					TextLabel.Size = UDim2.new(0, 100, 0, 15)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = text
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left

					Button.Name = 'Button'
					Button.Parent = Slider
					Button.BackgroundColor3 = maincolor
					Button.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Button.Position = UDim2.new(0, 30, 0, 15)
					Button.Size = UDim2.new(0, 175, 0, 5)
					Button.AutoButtonColor = false
					Button.Font = Enum.Font.SourceSans
					Button.Text = ''
					Button.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button.TextSize = 14.000

					Frame.Parent = Button
					Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) colorchanger:Connect(function() Frame.BackgroundColor3 = values.misc.ui['ui slider'].Color end)
					Frame.BorderSizePixel = 0
					Frame.Size = UDim2.new(0.5, 0, 1, 0)

					Value.Name = 'Value'
					Value.Parent = Slider
					Value.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Value.BackgroundTransparency = 1.000
					Value.Position = UDim2.new(0, 150, 0, -1)
					Value.Size = UDim2.new(0, 55, 0, 15)
					Value.Font = Enum.Font.SourceSansSemibold
					Value.Text = '50'
					Value.TextColor3 = Color3.fromRGB(200, 200, 200)
					Value.TextSize = 14.000
					Value.TextXAlignment = Enum.TextXAlignment.Right
					local min, max, default = data.min or 0, data.max or 100, data.default or 0
					Element.value = {Slider = default}

					function Element:SetValue(value)
						Element.value = value
						local a
						if min > 0 then
							a = ((Element.value.Slider - min)) / (max-min)
						else
							a = (Element.value.Slider-min)/(max-min)
						end
						Value.Text = Element.value.Slider
						Frame.Size = UDim2.new(a,0,1,0)
						values[tabname][sectorname][text] = Element.value
						callback(value)
					end
					local a
					if min > 0 then
						a = ((Element.value.Slider - min)) / (max-min)
					else
						a = (Element.value.Slider-min)/(max-min)
					end
					Value.Text = Element.value.Slider
					Frame.Size = UDim2.new(a,0,1,0)
					values[tabname][sectorname][text] = Element.value
					local uis = game:GetService('UserInputService')
					local mouse = game.Players.LocalPlayer:GetMouse()
					local val

					
					Value.FocusLost:Connect(function()
						values[tabname][sectorname][text].Slider = tonumber(Value.Text)
						callback(tonumber(Value.Text))
						--Value.Text = Element.value.Slider
						Frame.Size = UDim2.new((tonumber(Value.Text)-min)/(max-min),0,1,0)
					end)

					Button.MouseButton1Down:Connect(function()
						Frame.Size = UDim2.new(0, math.clamp(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5)
						val = math.floor((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) or 0
						Value.Text = val
						Element.value.Slider = val
						values[tabname][sectorname][text] = Element.value
						callback(Element.value)
						moveconnection = mouse.Move:Connect(function()
							Frame.Size = UDim2.new(0, math.clamp(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5)
							val = math.floor((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min))
							Value.Text = val
							Element.value.Slider = val
							values[tabname][sectorname][text] = Element.value
							callback(Element.value)
						end)
						releaseconnection = uis.InputEnded:Connect(function(Mouse)
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
								Frame.Size = UDim2.new(0, math.clamp(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5)
								val = math.floor((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min))
								values[tabname][sectorname][text] = Element.value
								callback(Element.value)
								moveconnection:Disconnect()
								releaseconnection:Disconnect()
							end
						end)
					end)
--[[
							elseif type == 'Button2' then 

								Section.Size = Section.Size + UDim2.new(0,0,0,24) 
								local Button = Instance.new("Frame") 
								local Button_2 = Instance.new("TextButton") 
								local TextLabel = Instance.new("TextLabel") 

								Button.Name = "Button" 
								Button.Parent = Inner 
								Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								Button.BackgroundTransparency = 1.000 
								Button.Position = UDim2.new(0, 0, 0.236059487, 0) 
								Button.Size = UDim2.new(1, 0, 0, 24) 

								Button_2.Name = "Button" 
								Button_2.Parent = Button 
								Button_2.BackgroundColor3 = maincolor 
								Button_2.BorderColor3 = Color3.fromRGB(27, 27, 35) 
								Button_2.Position = UDim2.new(0, 30, 0.5, -9) 
								Button_2.Size = UDim2.new(0, 175, 0, 18) 
								Button_2.AutoButtonColor = false 
								Button_2.Font = Enum.Font.SourceSans 
								Button_2.Text = "" 
								Button_2.TextColor3 = Color3.fromRGB(0, 0, 0) 
								Button_2.TextSize = 11.000

								TextLabel.Parent = Button_2 
								TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255) 
								TextLabel.BackgroundTransparency = 1.000 
								TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53) 
								TextLabel.Size = UDim2.new(1, 0, 1, 0) 
								TextLabel.Font = Enum.Font.Gotham 
								TextLabel.Text = text 
								TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200) 
								TextLabel.TextSize = 11.000

								function Element:SetValue() 
								end 
								
								
								local pressedButton = false
								Button_2.MouseButton1Down:Connect(function() 
									TextLabel.TextColor3 = MainUIColor 
									library:Tween(TextLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)}) 
									if TextLabel.Text ~= 'Are you sure?' then
										TextLabel.Text = 'Are you sure?'
										wait(4)
										if not pressedButton then
											TextLabel.Text = text
										end
									elseif TextLabel.Text == 'Are you sure?' then
										pressedButton = true
										local lmfaooo, lol = pcall(function()
											callback()
										end)
											if lmfaooo then
												TextLabel.Text = 'Success!'
												wait(1)
												TextLabel.Text = text
											else 
												TextLabel.Text = 'Error!'
												wait(1)
												TextLabel.Text = text
												print(lol)
											end
										pressedButton = false
									end
								end) 
								Button_2.MouseEnter:Connect(function() 
									library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)}) 
								end) 
								Button_2.MouseLeave:Connect(function() 
									library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)}) 
								end)
]]--
				elseif type == 'Button' then

					Section.Size = Section.Size + UDim2.new(0,0,0,24)
					local Button = Instance.new('Frame')
					local Button_2 = Instance.new('TextButton')
					local TextLabel = Instance.new('TextLabel')

					Button.Name = 'Button'
					Button.Parent = Inner
					Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					Button.BackgroundTransparency = 1.000
					Button.Position = UDim2.new(0, 0, 0.236059487, 0)
					Button.Size = UDim2.new(1, 0, 0, 24)

					
					Button_2.Name = 'Button'
					Button_2.Parent = Button
					Button_2.BackgroundColor3 = maincolor
					Button_2.BorderColor3 = Color3.fromRGB(27, 27, 35)
					Button_2.Position = UDim2.new(0, 30, 0.5, -9)
					Button_2.Size = UDim2.new(0, 175, 0, 18)
					Button_2.AutoButtonColor = false
					Button_2.Font = Enum.Font.SourceSans
					Button_2.Text = ''
					Button_2.TextColor3 = Color3.fromRGB(0, 0, 0)
					Button_2.TextSize = 14.000

					local Gradient = Instance.new('UIGradient')

					Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(180, 180, 180))}
					Gradient.Rotation = 90
					Gradient.Name = 'Gradient'
					Gradient.Parent = Button_2

					TextLabel.Parent = Button_2
					TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
					TextLabel.BackgroundTransparency = 1.000
					TextLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
					TextLabel.Size = UDim2.new(1, 0, 1, 0)
					TextLabel.Font = Enum.Font.SourceSansSemibold
					TextLabel.Text = text
					TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
					TextLabel.TextSize = 14.000

					function Element:SetValue()
					end

					Button_2.MouseButton1Down:Connect(function()
						TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
						library:Tween(TextLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
						callback()
					end)
					Button_2.MouseEnter:Connect(function()
						library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)})
					end)
					Button_2.MouseLeave:Connect(function()
						library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(200, 200, 200)})
					end)
				end
				ConfigLoad:Connect(function(cfg)
					pcall(function()
						local fix = library:ConfigFix(cfg)
						if fix[tabname][sectorname][text] ~= nil then
							Element:SetValue(fix[tabname][sectorname][text])
						end
					end)
				end)

				return Element
			end
			return Sector
		end

		return Tab
	end

	Ova.Parent = game.CoreGui

	return menu
end

--maybe remove if more than 200 locals :sadge:

local UserInputService = game:GetService('UserInputService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')
local Lighting = game:GetService('Lighting')
local PlayerGui = LocalPlayer.PlayerGui
local Camera = workspace.CurrentCamera
local ClientScript = LocalPlayer.PlayerGui.Client
local Client = getsenv(ClientScript)

repeat RunService.RenderStepped:Wait() until game:IsLoaded()

--local Crosshairs = PlayerGui.GUI.Crosshairs
--local Crosshair = PlayerGui.GUI.Crosshairs.Crosshair
local backtrackfolder = Instance.new("Folder", workspace)
backtrackfolder.Name = "backtrackfolder"
local oldcreatebullethole = Client.createbullethole
local LGlove, RGlove, LSleeve, RSleeve, RArm, LArm
local WeaponObj = {}
local SelfObj = {}
local Viewmodels =  ReplicatedStorage.Viewmodels
local Weapons =  ReplicatedStorage.Weapons
local ViewmodelOffset = CFrame.new(0,0,0)
local switch180roll = false
local RayIgnore = workspace.Ray_Ignore
local RageTarget
local GetIcon = require(game.ReplicatedStorage.GetIcon)
local BodyVelocity = Instance.new('BodyVelocity')
BodyVelocity.MaxForce = Vector3.new(math.huge, 0, math.huge)
local Collision = {Camera, workspace.Ray_Ignore, workspace.Debris}
local FakelagFolder = Instance.new('Folder', workspace.Camera)
FakelagFolder.Name = 'Fakelag'
local FakeAnim = Instance.new('Animation', workspace)
FakeAnim.AnimationId = 'rbxassetid://0'
local Gloves = ReplicatedStorage.Gloves
if Gloves:FindFirstChild('ImageLabel') then
	Gloves.ImageLabel:Destroy()
end
local GloveModels = Gloves.Models
local Multipliers = {
	['Head'] = 4,
	['FakeHead'] = 4,
	['HeadHB'] = 4,
	['UpperTorso'] = 1,
	['LowerTorso'] = 1.25,
	['LeftUpperArm'] = 1,
	['LeftLowerArm'] = 1,
	['LeftHand'] = 1,
	['RightUpperArm'] = 1,
	['RightLowerArm'] = 1,
	['RightHand'] = 1,
	['LeftUpperLeg'] = 0.75,
	['LeftLowerLeg'] = 0.75,
	['LeftFoot'] = 0.75,
	['RightUpperLeg'] = 0.75,
	['RightLowerLeg'] = 0.75,
	['RightFoot'] = 0.75,
}
local ChamItems = {}
local Skyboxes = {
	['nebula'] = {
		SkyboxLf = 'rbxassetid://159454286',
		SkyboxBk = 'rbxassetid://159454299',
		SkyboxDn = 'rbxassetid://159454296',
		SkyboxFt = 'rbxassetid://159454293',
		SkyboxLf = 'rbxassetid://159454286',
		SkyboxRt = 'rbxassetid://159454300',
		SkyboxUp = 'rbxassetid://159454288',
	},
	['vaporwave'] = {
		SkyboxLf = 'rbxassetid://1417494402',
		SkyboxBk = 'rbxassetid://1417494030',
		SkyboxDn = 'rbxassetid://1417494146',
		SkyboxFt = 'rbxassetid://1417494253',
		SkyboxLf = 'rbxassetid://1417494402',
		SkyboxRt = 'rbxassetid://1417494499',
		SkyboxUp = 'rbxassetid://1417494643',
	},
	['clouds'] = {
		SkyboxLf = 'rbxassetid://570557620',
		SkyboxBk = 'rbxassetid://570557514',
		SkyboxDn = 'rbxassetid://570557775',
		SkyboxFt = 'rbxassetid://570557559',
		SkyboxLf = 'rbxassetid://570557620',
		SkyboxRt = 'rbxassetid://570557672',
		SkyboxUp = 'rbxassetid://570557727',
	},
	['twilight'] = {
		SkyboxLf = 'rbxassetid://264909758',
		SkyboxBk = 'rbxassetid://264908339',
		SkyboxDn = 'rbxassetid://264907909',
		SkyboxFt = 'rbxassetid://264909420',
		SkyboxLf = 'rbxassetid://264909758',
		SkyboxRt = 'rbxassetid://264908886',
		SkyboxUp = 'rbxassetid://264907379',
	},
}
local NewScope
do
	local ScreenGui = Instance.new('ScreenGui')
	local Frame = Instance.new('Frame')
	local Frame_2 = Instance.new('Frame')

	ScreenGui.Enabled = false
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
	ScreenGui.IgnoreGuiInset = true

	Frame.Parent = ScreenGui
	Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Frame.BorderSizePixel = 0
	Frame.Position = UDim2.new(0, 0, 0.5, 0)
	Frame.Size = UDim2.new(1, 0, 0, 1)

	Frame_2.Parent = ScreenGui
	Frame_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Frame_2.BorderSizePixel = 0
	Frame_2.Position = UDim2.new(0.5, 0, 0, 0)
	Frame_2.Size = UDim2.new(0, 1, 1, 0)

	ScreenGui.Parent = game.CoreGui

	NewScope = ScreenGui
end
local oldSkybox

local function VectorRGB(RGB)
	return Vector3.new(RGB.R, RGB.G, RGB.B)
end
local function new(name, prop)
	local obj = Instance.new(name)
	for i,v in pairs(prop) do
		if i ~= 'Parent' then
			obj[i] = v
		end
	end
	if prop['Parent'] ~= nil then
		obj.Parent = prop['Parent']
	end
end
local function UpdateAccessory(Accessory)
	Accessory.Material = values.visuals.effects['accessory material'].Dropdown == 'Smooth' and 'SmoothPlastic' or 'ForceField'
	Accessory.Mesh.VertexColor = VectorRGB(values.visuals.effects['accessory chams'].Color)
	Accessory.Color = values.visuals.effects['accessory chams'].Color
	Accessory.Transparency = values.visuals.effects['accessory chams'].Transparency
	if values.visuals.effects['accessory material'].Dropdown ~= 'ForceField' then
		Accessory.Mesh.TextureId = ''
	else
		Accessory.Mesh.TextureId = Accessory.StringValue.Value
	end
end
local function ReverseAccessory(Accessory)
	Accessory.Material = 'SmoothPlastic'
	Accessory.Mesh.VertexColor = Vector3.new(1,1,1)
	Accessory.Mesh.TextureId = Accessory.StringValue.Value
	Accessory.Transparency = 0
end
local function UpdateWeapon(obj) 
	local selected = values.visuals.effects["weapon material"].Dropdown
	local ffanim = values.visuals.effects["weapon ff anim"].Dropdown
	if obj:IsA("MeshPart") and selected == "ForceField" then 
		if ffanim == "none" then
			obj.TextureID = ""
		elseif ffanim == "scanning" then
			obj.TextureID = "rbxassetid://5843010904"
		elseif ffanim == "lava" then
			obj.TextureID = "rbxassetid://53883408"
		elseif ffanim == "pulse" then
			obj.TextureID = "rbxassetid://wtf"
		end
	elseif obj:IsA('MeshPart') then obj.TextureID = '' end
	if obj:IsA('Part') and obj:FindFirstChild('Mesh') and not obj:IsA('BlockMesh') then
		obj.Mesh.VertexColor = VectorRGB(values.visuals.effects['weapon chams'].Color)
		if selected == 'Smooth' or selected == 'Glass' then
			obj.Mesh.TextureId = 'rbxassetid://0'
		else
			pcall(function()
				obj.Mesh.TextureId = obj.Mesh.OriginalTexture.Value
				obj.Mesh.TextureID = obj.Mesh.OriginalTexture.Value
			end)
		end
	end
	obj.Color = values.visuals.effects['weapon chams'].Color
	obj.Material = selected == 'Smooth' and 'SmoothPlastic' or selected == 'Flat' and 'Neon' or selected == 'ForceField' and 'ForceField' or 'Glass'
	obj.Reflectance = values.visuals.effects['reflectance'].Slider/10
	obj.Transparency = values.visuals.effects['weapon chams'].Transparency
end
local Skins = ReplicatedStorage.Skins
local function MapSkin(Gun, Skin, CustomSkin)
	if CustomSkin ~= nil then
		for _,Data in pairs(CustomSkin) do
			local Obj = Camera.Arms:FindFirstChild(Data.Name)
			if Obj ~= nil and Obj.Transparency ~= 1 then
				Obj.TextureId = Data.Value
			end
		end
	else
		local SkinData = Skins:FindFirstChild(Gun):FindFirstChild(Skin)
		if not SkinData:FindFirstChild('Animated') then
			for _,Data in pairs(SkinData:GetChildren()) do
				local Obj = Camera.Arms:FindFirstChild(Data.Name)
				if Obj ~= nil and Obj.Transparency ~= 1 then
					if Obj:FindFirstChild('Mesh') then
						Obj.Mesh.TextureId = v.Value
					elseif not Obj:FindFirstChild('Mesh') then
						Obj.TextureID = Data.Value
					end
				end
			end
		end
	end
end
local function ChangeCharacter(NewCharacter)
	for _,Part in pairs (LocalPlayer.Character:GetChildren()) do
		if Part:IsA('Accessory') then
			Part:Destroy()
		end
		if Part:IsA('BasePart') then
			if NewCharacter:FindFirstChild(Part.Name) then
				Part.Color = NewCharacter:FindFirstChild(Part.Name).Color
				Part.Transparency = NewCharacter:FindFirstChild(Part.Name).Transparency
			end
			if Part.Name == 'FakeHead' then
				Part.Color = NewCharacter:FindFirstChild('Head').Color
				Part.Transparency = NewCharacter:FindFirstChild('Head').Transparency
			end
		end

		if (Part.Name == 'Head' or Part.Name == 'FakeHead') and Part:FindFirstChildOfClass('Decal') and NewCharacter.Head:FindFirstChildOfClass('Decal') then
			Part:FindFirstChildOfClass('Decal').Texture = NewCharacter.Head:FindFirstChildOfClass('Decal').Texture
		end
	end

	if NewCharacter:FindFirstChildOfClass('Shirt') then
		if LocalPlayer.Character:FindFirstChildOfClass('Shirt') then
			LocalPlayer.Character:FindFirstChildOfClass('Shirt'):Destroy()
		end
		local Clone = NewCharacter:FindFirstChildOfClass('Shirt'):Clone()
		Clone.Parent = LocalPlayer.Character
	end

	if NewCharacter:FindFirstChildOfClass('Pants') then
		if LocalPlayer.Character:FindFirstChildOfClass('Pants') then
			LocalPlayer.Character:FindFirstChildOfClass('Pants'):Destroy()
		end
		local Clone = NewCharacter:FindFirstChildOfClass('Pants'):Clone()
		Clone.Parent = LocalPlayer.Character
	end

	for _,Part in pairs (NewCharacter:GetChildren()) do
		if Part:IsA('Accessory') then
			local Clone = Part:Clone()
			for _,Weld in pairs (Clone.Handle:GetChildren()) do
				if Weld:IsA('Weld') and Weld.Part1 ~= nil then
					Weld.Part1 = LocalPlayer.Character[Weld.Part1.Name]
				end
			end
			Clone.Parent = LocalPlayer.Character
		end
	end

	if LocalPlayer.Character:FindFirstChildOfClass('Shirt') then
		local String = Instance.new('StringValue')
		String.Name = 'OriginalTexture'
		String.Value = LocalPlayer.Character:FindFirstChildOfClass('Shirt').ShirtTemplate
		String.Parent = LocalPlayer.Character:FindFirstChildOfClass('Shirt')

		if table.find(values.visuals.effects.removals.Jumbobox, 'clothes') then
			LocalPlayer.Character:FindFirstChildOfClass('Shirt').ShirtTemplate = ''
		end
	end
	if LocalPlayer.Character:FindFirstChildOfClass('Pants') then
		local String = Instance.new('StringValue')
		String.Name = 'OriginalTexture'
		String.Value = LocalPlayer.Character:FindFirstChildOfClass('Pants').PantsTemplate
		String.Parent = LocalPlayer.Character:FindFirstChildOfClass('Pants')

		if table.find(values.visuals.effects.removals.Jumbobox, 'clothes') then
			LocalPlayer.Character:FindFirstChildOfClass('Pants').PantsTemplate = ''
		end
	end
	for i,v in pairs(LocalPlayer.Character:GetChildren()) do
		if v:IsA('BasePart') and v.Transparency ~= 1 then
			table.insert(SelfObj, v)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = v.Color
			Color.Parent = v

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = v.Material.Name
			String.Parent = v
		elseif v:IsA('Accessory') and v.Handle.Transparency ~= 1 then
			table.insert(SelfObj, v.Handle)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = v.Handle.Color
			Color.Parent = v.Handle

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = v.Handle.Material.Name
			String.Parent = v.Handle
		end
	end

	if values.visuals.self['self chams'].Toggle then
		for _,obj in pairs(SelfObj) do
			if obj.Parent ~= nil then
			
				obj.Material = values.visuals.self['self material'].Dropdown
				obj.Color = values.visuals.self['self chams'].Color
			end
		end
	end
end
local function GetDeg(pos1, pos2)
	local start = pos1.LookVector
	local vector = CFrame.new(pos1.Position, pos2).LookVector
	local angle = math.acos(start:Dot(vector))
	local deg = math.deg(angle)
	return deg
end
local Ping = game.Stats.PerformanceStats.Ping:GetValue()
local saved

for i,v in pairs(Viewmodels:GetChildren()) do
	if v:FindFirstChild('HumanoidRootPart') and v.HumanoidRootPart.Transparency ~= 1 then
		v.HumanoidRootPart.Transparency = 1
	end
end

local Models = game:GetObjects('rbxassetid://6708336356')[1]
repeat wait() until Models ~= nil
local ChrModels = game:GetObjects('rbxassetid://7266357063')[1]
repeat wait() until ChrModels ~= nil

local AllKnives = {
	'CT Knife',
	'T Knife',
	'Banana',
	'Bayonet',
	'Bearded Axe',
	'Butterfly Knife',
	'Cleaver',
	'Crowbar',
	'Falchion Knife',
	'Flip Knife',
	'Gut Knife',
	'Huntsman Knife',
	'Karambit',
	'Sickle',
}

local AllGloves = {}


for _,fldr in pairs(Gloves:GetChildren()) do
	if fldr ~= GloveModels and fldr.Name ~= 'Racer' then
		AllGloves[fldr.Name] = {}
		for _2,modl in pairs(fldr:GetChildren()) do
			table.insert(AllGloves[fldr.Name], modl.Name)
		end
	end
end

for i,v in pairs(Models.Knives:GetChildren()) do
	table.insert(AllKnives, v.Name)
end

local AllSkins = {}
local AllWeapons = {}
local AllCharacters = {}

for i,v in pairs(ChrModels:GetChildren()) do
	table.insert(AllCharacters, v.Name)
end

local skins = {
    {["Weapon"] = "AWP", ["SkinName"] = "Twitch", ["Skin"] = {["Scope"] = "7826242521", ["Handle"] = "7826240654", ["Mag"] = "7826240654", ["Barrel"] = "7826240654", ["Slide"] = "7826240654", ["Slide 2"] = "7826240654"}},
	{["Weapon"] = "AK47", ["SkinName"] = "Lunar", ["Skin"] = {["Handle"] = "6734293962", ["Mag"] = "6734293962", ["Part1"] = "6734293962", ["Bolt"] = "6734293962"}},
	{["Weapon"] = "AK47", ["SkinName"] = "Troll Supreme", ["Skin"] = {["Handle"] = "9526420102", ["Mag"] = "9526580457", ["Part1"] = "9526420102", ["Bolt"] = "9526420102"}},
	{["Weapon"] = "M4A4", ["SkinName"] = "Lunar", ["Skin"] = {["Handle"] = "6723789191", ["Sight"] = "6723789837", ["Mag"] = "6723789191", ["Chamber"] = "6723789191", ["Barrel"] = "6723789191", ["Cover"] = "6723789191", ["notex"] = "6723789191", ["Back"] = "6723789191", ["Bolt"] = "6723789191"}},
	{["Weapon"] = "M4A4", ["SkinName"] = "Troll Supreme", ["Skin"] = {["Handle"] = "9526388500", ["Sight"] = "9526386739", ["Mag"] = "9526388500", ["Chamber"] = "9526388500", ["Barrel"] = "9526388500", ["Cover"] = "9526388500", ["notex"] = "9526388500", ["Back"] = "9526388500", ["Bolt"] = "9526388500"}},
	{["Weapon"] = "DesertEagle", ["SkinName"] = "Troll Supreme", ["Skin"] = {["Handle"] = "9526353239", ["Mag"] = "9526355601"}}
}

for _,skin in pairs (skins) do
	local Folder = Instance.new('Folder')
	Folder.Name = skin['SkinName']
	Folder.Parent = Skins[skin['Weapon']]

	for _,model in pairs (skin['Skin']) do
		local val = Instance.new('StringValue')
		val.Name = _
		val.Value = 'rbxassetid://'..model
		val.Parent = Folder
	end
end

for i,v in pairs(Skins:GetChildren()) do
	table.insert(AllWeapons, v.Name)
end

table.sort(AllWeapons, function(a,b)
	return a < b
end)

for i,v in ipairs(AllWeapons) do
	AllSkins[v] = {}
	table.insert(AllSkins[v], 'Inventory')
	for _,v2 in pairs(Skins[v]:GetChildren()) do
		if not v2:FindFirstChild('Animated') then
			table.insert(AllSkins[v], v2.Name)
		end
	end
end

makefolder('ovalua')

local allluas = {}

for _,lua in pairs(listfiles('ovalua')) do
	local luaname = string.gsub(lua, 'ovalua\\', '')
	table.insert(allluas, luaname)
end

RunService.RenderStepped:Wait()

local gui = library:New(versiondisplay)
local legit = gui:Tab('legit')
local rage = gui:Tab('rage')
local visuals = gui:Tab('visuals')
local misc = gui:Tab('misc')
local skins = gui:Tab('skins')
local luas = gui:Tab('luas')

getgenv().api = {}
api.newtab = function(name)
	return gui:Tab(name)
end
api.newsection = function(tab, name, side)
	return tab:Sector(name, side)
end
api.newelement = function(section, type, name, data, callback)
	section:Element(type, name, data, callback)
end


local luascripts = luas:Sector('lua scripts', 'Left')
luascripts:Element('Scroll', 'lua', {options = allluas, Amount = 5})
luascripts:Element('Button', 'load', {}, function()
	loadstring(readfile('ovalua\\'..values.luas['lua scripts'].lua.Scroll))()
end)

local knife = skins:Sector('knife', 'Left')
knife:Element('Toggle', 'knife changer')
knife:Element('Scroll', 'model', {options = AllKnives, Amount = 15})

local glove = skins:Sector('glove', 'Left')
glove:Element('Toggle', 'glove changer')
glove:Element('ScrollDrop', 'model', {options = AllGloves, Amount = 9})

local sleeves = skins:Sector('misc', 'Left')
sleeves:Element('Toggle', 'Remove sleeves')

local skin = skins:Sector('skins', 'Right')
skin:Element('Toggle', 'skin changer')
skin:Element('ScrollDrop', 'skin', {options = AllSkins, Amount = 15, alphabet = true})

local characters = skins:Sector('characters', 'Right')
characters:Element('Toggle', 'character changer', nil, function(tbl)
	if tbl.Toggle then
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Gun') then
			ChangeCharacter(ChrModels:FindFirstChild(values.skins.characters.skin.Scroll))
		end
	end
end)
characters:Element('Scroll', 'skin', {options = AllCharacters, Amount = 9, alphabet = true}, function(tbl)
	if values.skins.characters['character changer'].Toggle then
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Gun') then
			ChangeCharacter(ChrModels:FindFirstChild(tbl.Scroll))
		end
	end
end)

local trannyenabled = false
local socks = false
local trannyware = skins:Sector("trannyware", "Right") 
local a = Instance.new("MeshPart",workspace)
a.Size = Vector3.new(1.35,1.4,1.35)
a.CanCollide = false
a.Anchored = true
a.MeshId = "rbxassetid://4249338569"
a.TextureID = "rbxassetid://4249293955"

trannyware:Element('Toggle', 'skirt', {}, function(tbl)
    trannyenabled = tbl.Toggle
end)

trannyware:Element('Toggle', 'socks', {}, function(tbl)
    socks = tbl.Toggle
end)

game:GetService("RunService").RenderStepped:connect(function()
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("LowerTorso") and trannyenabled then
        a.Position = game.Players.LocalPlayer.Character.LowerTorso.Position
        a.Rotation = game.Players.LocalPlayer.Character.LowerTorso.Rotation
    end
    if socks and game.Players.LocalPlayer.Character then
        if game.Players.LocalPlayer.Character:FindFirstChild("Pants") then
            game.Players.LocalPlayer.Character.Pants.PantsTemplate = "rbxassetid://5381345577"
        end
    end
    a.Transparency = trannyenabled and 0 or 1
end)

local why = legit:Sector('why?', 'Left')
why:Element('Button', 'click me', {}, function()
	CreateHitElement(" Here is the Problem,\
  \
 the Script has more than 200\
 locals, that means no more\
 updates and anything because\
 there is no local left to add\
 anything new, so we decided\
 to delete legit tab so we could\
 add more important functions.",Color3.fromRGB(236, 245, 66),28, 0, 240, 0, 140)
end)
--[[
local aimbot = legit:Sector('aimbot', 'Left')
aimbot:Element('ToggleKeybind', 'aim assist')
aimbot:Element('ToggleKeybind', 'silent aim')
aimbot:Element('ToggleKeybind', 'triggerbot')

local main = legit:MSector('main', 'Left')
local default = main:Tab('default')
local pistol = main:Tab('pistol')
local smg = main:Tab('smg')
local rifle = main:Tab('rifle')
local sniper = main:Tab('sniper')

local function AddLegit(Tab)
	Tab:Element('Jumbobox', 'conditions', {options = {'visible', 'standing', 'blind', 'smoke'}})
	Tab:Element('Dropdown', 'target', {options = {'crosshair', 'health', 'distance'}})
	Tab:Element('Dropdown', 'hitbox', {options = {'closest', 'head', 'chest'}})
	Tab:Element('Slider', 'field of view', {min = 0, max = 420, default = 120})
	Tab:Element('Slider', 'smoothing', {min = 1, max = 50, default = 1})
	Tab:Element('Toggle', 'silent aim')
	Tab:Element('Slider', 'hitchance', {min = 1, max = 100, default = 100})
	Tab:Element('Dropdown', 'priority', {options = {'closest', 'head', 'chest'}})
	Tab:Element('Toggle', 'triggerbot')
	Tab:Element('Slider', 'delay (ms)', {min = 0, max = 300, default = 200})
	Tab:Element('Slider', 'minimum dmg', {min = 0, max = 100, default = 15})
end

AddLegit(default)

pistol:Element('Toggle', 'override default')
AddLegit(pistol)

smg:Element('Toggle', 'override default')
AddLegit(smg)

rifle:Element('Toggle', 'override default')
AddLegit(rifle)

sniper:Element('Toggle', 'override default')
AddLegit(sniper)

local settings = legit:Sector('settings', 'Right')
settings:Element('Toggle', 'free for all')
settings:Element('Toggle', 'forcefield check')
settings:Element('ToggleTrans', 'draw fov', {default = {Color = Color3.fromRGB(255,255,255), Transparency = 0}})
settings:Element('Toggle', 'filled fov')
settings:Element('Slider', 'fov thickness', {min = 1, max = 10, default = 1})
]]--
local aimbot = rage:Sector('aimbot', 'Left')
aimbot:Element('Toggle', 'enabled')
aimbot:Element('Dropdown', 'origin', {options = {'character', 'camera'}})
aimbot:Element('Toggle', 'silent aim')
aimbot:Element('Dropdown', 'automatic fire', {options = {'off', 'standard', 'hitpart', 'silent'}})
aimbot:Element('Toggle', 'automatic penetration')
aimbot:Element('Dropdown', 'penetration', {options = {'normal', 'medium', 'high', 'XD'}})
aimbot:Element('Jumbobox', 'resolver', {options = {'pitch', 'roll', 'arms', 'animation', 'bhop'}})
aimbot:Element('Slider', 'resolver offset (default = 10)', {min = 0, max = 50, default = 0})
aimbot:Element("Toggle", "front track")
aimbot:Element("Slider", "X distance", {min = -50, max = 50, default = -5})
aimbot:Element('Slider', 'Y distance', {min = 1, max = 50, default = 5})
aimbot:Element('Toggle', 'delay shot')
aimbot:Element('Toggle', 'force hit')
aimbot:Element('Dropdown', 'prediction', {options = {'off', 'cframe', 'velocity', 'automatic'}})
aimbot:Element('Toggle', 'teammates')
aimbot:Element('Toggle', 'ignore on start')
aimbot:Element('ToggleKeybind', 'auto baim')
aimbot:Element("Toggle", "knifebot")
aimbot:Element("Dropdown", "knifebot type", {options = {"normal", "rapid"}}) 
aimbot:Element("Slider", "Knifebot Radius", {min = -1, max = 9000, default = 20})
aimbot:Element("Toggle", "knife wallcheck")

local weapons = rage:MSector('weapons', 'Left')
local default = weapons:Tab('default')
local pistol = weapons:Tab('pistol')
local rifle = weapons:Tab('rifle')
local scout = weapons:Tab('scout')
local awp = weapons:Tab('awp')
local auto = weapons:Tab('auto')

local function AddRage(Tab)
	Tab:Element('Jumbobox', 'hitboxes', {options = {'head', 'torso', 'pelvis', 'arms', 'hand'}})
	Tab:Element('Toggle', 'prefer body')
	Tab:Element('Slider', 'minimum damage', {min = 1, max = 100, default = 20})
	Tab:Element('Slider', 'max fov', {min = 1, max = 180, default = 180})
end

default:Element('ToggleKeybind', 'override keybind')
AddRage(default)

pistol:Element('Toggle', 'override default')
AddRage(pistol)

rifle:Element('Toggle', 'override default')
AddRage(rifle)

scout:Element('Toggle', 'override default')
AddRage(scout)

awp:Element('Toggle', 'override default')
AddRage(awp)

auto:Element('Toggle', 'override default')
AddRage(auto)

local loopkillloop

local Loopkill = rage:Sector("loop kill", "Right") 
Loopkill:Element("lmao", "Player", {options = loopkillplr, Amount = 20}, function(tbl)
	pcall(function()
		loopkillloop:Disconnect()
	end)
 	if game.Players:FindFirstChild(tbl.Dropdown) then
		loopkillloop = RunService.RenderStepped:Connect(function()
			wait(0.1)
			values.rage["loop kill"]['Alive: '].stringchange('Alive: '..(IsAlive(game.Players:FindFirstChild(tbl.Dropdown)) and 'yes' or 'no'))
			values.rage['loop kill']['Team: '].stringchange('Team: '..game.Players:FindFirstChild(tbl.Dropdown).Team.Name)
			values.rage['loop kill']['Account age: '].stringchange('Account age: '..game.Players:FindFirstChild(tbl.Dropdown).AccountAge..' days')
		end)
		
		values.rage["loop kill"]['Alive: '].stringchange('Alive: ')
		values.rage['loop kill']['Team: '].stringchange('Team: ')
		values.rage['loop kill']['Account age: '].stringchange('Account age: ')
	end
 end)

Loopkill:Element("Toggle", "loop kill for hexagon retards", nil, function(tbl)
if tbl.Toggle then


local step2
	step2 = RunService.RenderStepped:Connect(function()
	if not (tbl.Toggle) then step2:Disconnect() return end
	--values.other.other.Player.Dropdown
				if Players[values.rage["loop kill"]['Player'].Dropdown].Character and Players[values.rage["loop kill"]['Player'].Dropdown].Team ~= LocalPlayer.Team and Players[values.rage["loop kill"]['Player'].Dropdown].Character:FindFirstChild("UpperTorso") then
                ReplicatedStorage.Events.HitPart:FireServer(
                    Players[values.rage["loop kill"]['Player'].Dropdown].Character.Head, -- 1
                    predict(Players[values.rage["loop kill"]['Player'].Dropdown].Character.Head, game:GetService("Stats").PerformanceStats.Ping:GetValue()), --2
                    "Banana", --3
                    100, -- Range --4
                    game.Players.LocalPlayer.Character:WaitForChild("Gun"), --5
                    Vector3.new(), -- Start Position --6
                    Vector3.new(),
                    100, -- Damage Modifier
                    false,
                    false,
                    Vector3.new(),
                    100,
                    Vector3.new()
                )
				end
	end)
	end
end)

Loopkill:Element("Toggle", "loop kill that uses stormy's kill all", nil, function(tbl)
if tbl.Toggle then
local step1
	step1 = RunService.RenderStepped:Connect(function()
	if not (tbl.Toggle) then step1:Disconnect() return end
	--values.other.other.Player.Dropdown
				if Players[values.rage["loop kill"]['Player'].Dropdown].Character and Players[values.rage["loop kill"]['Player'].Dropdown].Team ~= LocalPlayer.Team and Players[values.rage["loop kill"]['Player'].Dropdown].Character:FindFirstChild("UpperTorso") then
					local oh1 = Players[values.rage["loop kill"]['Player'].Dropdown].Character.Head
					local oh2 = Players[values.rage["loop kill"]['Player'].Dropdown].Character.Head.CFrame.p
					local oh3 = Client.gun.Name
					local oh4 = 4096
					local oh5 = LocalPlayer.Character.Gun
					local oh8 = 15
					local oh9 = false
					local oh10 = false
					local oh11 = Vector3.new(0,0,0)
					local oh12 = 16868
					local oh13 = Vector3.new(0, 0, 0)
					ReplicatedStorage.Events.HitPart:FireServer(oh1, oh2, oh3, oh4, oh5, oh6, oh7, oh8, oh9, oh10, oh11, oh12, oh13)
				end
	end)
	end
end)

Loopkill:Element('ToggleTrans', 'Target Chams', {default = {Color = Color3.fromRGB(255,255,255)}}, function(tbl)
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character and Player.Name == values.rage["loop kill"]['Player'].Dropdown then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == 'VisibleCham' then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = tbl.Transparency
				end
			end
		end
	end
Players.PlayerAdded:Connect(function(Player)
	Player:GetPropertyChangedSignal("Team"):Connect(function()
		wait()
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Name == values.rage["loop kill"]['Player'].Dropdown then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == "VisibleCham" then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = tbl.Transparency
				end
			end
		end
	end)
end)
	LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function(new)
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character and Player.Name == values.rage["loop kill"]['Player'].Dropdown then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == 'VisibleCham' then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = tbl.Transparency
				end
			end
		end
	end
	end)
end)

Loopkill:Element('ToggleTrans', 'Target Vchams', {default = {Color = Color3.fromRGB(255,255,255)}}, function(tbl)
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character and Player.Name == values.rage["loop kill"]['Player'].Dropdown then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == 'WallCham' then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = tbl.Transparency
				end
			end
		end
	end
Players.PlayerAdded:Connect(function(Player)
	Player:GetPropertyChangedSignal("Team"):Connect(function()
		wait()
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Name == values.rage["loop kill"]['Player'].Dropdown then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == "WallCham" then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = tbl.Transparency
				end
			end
		end
	end)
end)
	LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function(new)
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character and Player.Name == values.rage["loop kill"]['Player'].Dropdown then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == 'WallCham' then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = tbl.Transparency
				end
			end
		end
	end
	end)
end)

Loopkill:Element("ToggleColor", "Target box", {default = {Color = Color3.fromRGB(255,255,255)}}) 
Loopkill:Element("ToggleColor", "Target name", {default = {Color = Color3.fromRGB(255,255,255)}}) 
Loopkill:Element("ToggleColor", "Target health", {default = {Color = Color3.fromRGB(0,1,0)}}) 
Loopkill:Element("ToggleColor", "Target weapon", {default = {Color = Color3.fromRGB(255,255,255)}}) 
Loopkill:Element("ToggleColor", "Target weapon icon", {default = {Color = Color3.fromRGB(255,255,255)}})
local ragebotwhitelist = {}
Loopkill:Element('Button', 'Add in ragebot whitelist', {}, function()
	if #ragebotwhitelist == 0 then
		table.insert(ragebotwhitelist,game.Players[values.rage["loop kill"]['Player'].Dropdown].Character)
	else
		insertwithoutdupes(ragebotwhitelist, game.Players[values.rage["loop kill"]['Player'].Dropdown].Character)
	end
end)
--original        Button2
Loopkill:Element('Button', 'Clear whitelist', {}, function()
		table.clear(ragebotwhitelist)
end)

Loopkill:Element('Label', 'Alive: ')
Loopkill:Element('Label', 'Team: ')
Loopkill:Element('Label', 'Account age: ')

local pitches = {'none', 'up', 'down', 'zero', '180', 'spin', 'random', 'among'}
local antiaim = rage:Sector('angles', 'Right')
antiaim:Element('ToggleKeybind', 'enabled')
antiaim:Element('Dropdown', 'yaw base', {options = {'camera', 'targets', 'spin', 'random'}})
antiaim:Element('Slider', 'yaw offset', {min = -180, max = 180, default = 0})
antiaim:Element('Toggle', 'jitter')
antiaim:Element('Slider', 'jitter offset', {min = -180, max = 180, default = 0})
antiaim:Element('Slider', 'jitter pitch', {min = -100, max = 100, default = 0})
antiaim:Element('Slider', 'jitter wait (ms)', {min = 0, max = 100, default = 0})
antiaim:Element('Toggle', 'shoot pitch')
antiaim:Element('Slider', 'offset', {min = -180, max = 180, default = 0})
antiaim:Element('Slider', 'pitch', {min = -100, max = 100, default = 0})
antiaim:Element('Slider', 'wait (ms)', {min = 0, max = 100, default = 0})
local shotthingy = false
game:GetService("Workspace").FunFacts["Shots were fired"].Changed:Connect(function()
	if not shotthingy then
		shotthingy = true 

		if values.rage.angles['shoot pitch'].Toggle then
			spawn(function()
				for i=1,10 do wait()
					pcall(function()
						game.ReplicatedStorage.Events.ControlTurn:FireServer(values.rage.angles['pitch'].Slider/7, game.Players.LocalPlayer.Character:FindFirstChild('Climbing') and true or false)
					end)
				end
			end)
		end

		wait(values.rage.angles['wait (ms)'].Slider/100)

		shotthingy = false
	end
end)
antiaim:Element('Dropdown', 'pitch', {options = pitches})
antiaim:Element('Toggle', 'custom pitch')
antiaim:Element('Slider', 'pitch value', {min = -100, max = 100, default = 0})

antiaim:Element('Toggle', 'extend pitch')
antiaim:Element('Dropdown', 'body roll', {options = {'off', '180', 'switch'}})
antiaim:Element('Slider', 'roll offset', {min = -200, max = 200, default = 0})

antiaim:Element('Slider', 'spin speed', {min = 1, max = 200, default = 4})

antiaim:Element('ToggleKeybind', 'overwrite keybind')
antiaim:Element('Dropdown', 'overwrite pitch', {options = pitches})
antiaim:Element('ToggleKeybind', 'lock yaw')


local others = rage:Sector('others', 'Right')
others:Element('Toggle', 'remove head')
others:Element('Toggle', 'no animations')
others:Element('Dropdown', 'leg movement', {options = {'off', 'slide'}})

			local LagTick = 0
			local fakelag = rage:Sector('fakelag', 'Right')

			fakelag:Element('Toggle', 'DDOS', {Type = "Toggle", Key = "T"},function(tbl)
				if tbl.Toggle then
					spawn(function()
						while values.rage.fakelag["DDOS"].Toggle   do

								RunService.RenderStepped:Wait()
								RunService.RenderStepped:Wait()
								for i = 1,values.rage.fakelag["DDOS Amount"].Slider,1 do
									local ohInstance1 = LocalPlayer.Character.Gun.Mag              
									ReplicatedStorage.Events.DropMag:FireServer(ohInstance1)
									for i,v in pairs(workspace["Ray_Ignore"]:GetChildren()) do
										if v.Name == "MagDrop" then
											v:Destroy()
										end
									end
								end
       
						end 
					end)
				end
			end)
			fakelag:Element('Slider', 'DDOS Amount', {min = 1, max = 10, default = 1})

			fakelag:Element('Slider', 'set ping', {min = -100, max = 100, default = 0})
			fakelag:Element('ToggleKeybind', 'enabled', {default = {Toggle = false}}, function(tbl)
				if tbl.Toggle then
				else
					FakelagFolder:ClearAllChildren()
					game:GetService('NetworkClient'):SetOutgoingKBPSLimit(9e9)
				end
			end)
			fakelag:Element("Toggle", "fakelag indicator", {}, function(tbl)    
				game:GetService("CoreGui")["fl indicator"].Enabled = tbl.Toggle
			end)
			fakelag:Element('Dropdown', 'amount', {options = {'static', 'freeze', 'tfreeze', 'underfreeze'}})
			fakelag:Element('Slider', 'limit', {min = 1, max = 106, default = 8})
			fakelag:Element('Slider', 'under y', {min = 1, max = 50, default = 8})
			fakelag:Element('Toggle', 'random')
			fakelag:Element('ToggleColor', 'visualize lag', {default = {Toggle = false, Color = Color3.fromRGB(255,255,255)}}, function(tbl)
				if tbl.Toggle then
					for _,obj in pairs(FakelagFolder:GetChildren()) do
						obj.Color = tbl.Color
					end
				else
					FakelagFolder:ClearAllChildren()
				end
			end)
            fakelag:Element('ToggleKeybind', 'ping spike')

			local savedcamerapart = Instance.new('Part', RayIgnore)
			savedcamerapart.Anchored = true
			savedcamerapart.CanCollide = false
			savedcamerapart.Size = Vector3.new(1, 1, 1)
			savedcamerapart.Transparency = 1
			coroutine.wrap(function()
				local flindicator = Instance.new("ScreenGui")
				local wgrgerqgerq = Instance.new("TextLabel")
				local grgrgr = Instance.new("UIGradient")
				local gradins = Instance.new("Frame")
				local qewgrqgwrgqr = Instance.new("TextLabel")
				local asdwasff = Instance.new("Frame")
				local lolfaggot = Instance.new("Frame")
				local gergergre = Instance.new("UIGradient")

				flindicator.Name = "fl indicator"
				flindicator.Enabled = false
				flindicator.Parent = game.CoreGui
				flindicator.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

				wgrgerqgerq.Name = "wgrgerqgerq"
				wgrgerqgerq.Parent = flindicator
				wgrgerqgerq.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				wgrgerqgerq.BorderColor3 = Color3.fromRGB(14, 29, 32)
				wgrgerqgerq.Position = UDim2.new(0.161994383, 0, 0.437578738, 0)
				wgrgerqgerq.Size = UDim2.new(0, 62, 0, 22)
				wgrgerqgerq.Font = Enum.Font.Ubuntu
				wgrgerqgerq.Text = ""
				wgrgerqgerq.AutomaticSize = Enum.AutomaticSize.X
				wgrgerqgerq.TextColor3 = Color3.fromRGB(255, 255, 255)
				wgrgerqgerq.TextSize = 10.000
				wgrgerqgerq.TextStrokeTransparency = 0.000
				wgrgerqgerq.TextXAlignment = Enum.TextXAlignment.Left

				grgrgr.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(46, 43, 44)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 24, 24))}
				grgrgr.Rotation = 90
				grgrgr.Name = "grgrgr"
				grgrgr.Parent = wgrgerqgerq

				gradins.Name = "gradins"
				gradins.Parent = wgrgerqgerq
				gradins.AutomaticSize = Enum.AutomaticSize.X
				gradins.BackgroundColor3 = Color3.fromRGB(222, 232, 255)
				gradins.BorderSizePixel = 0
				gradins.Size = UDim2.new(0, 62, 0, 2)

				qewgrqgwrgqr.Name = "qewgrqgwrgqr"
				qewgrqgwrgqr.Parent = gradins
				qewgrqgwrgqr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				qewgrqgwrgqr.BackgroundTransparency = 1.000
				qewgrqgwrgqr.BorderColor3 = Color3.fromRGB(27, 42, 53)
				qewgrqgwrgqr.Position = UDim2.new(0, 0, 1, 0)
				qewgrqgwrgqr.Size = UDim2.new(0, 62, 0, 19)
				qewgrqgwrgqr.Font = Enum.Font.Ubuntu
				qewgrqgwrgqr.AutomaticSize = Enum.AutomaticSize.X
				qewgrqgwrgqr.Text = "   Fakelag Indicator"
				qewgrqgwrgqr.TextColor3 = Color3.fromRGB(255, 255, 255)
				qewgrqgwrgqr.TextSize = 10.000
				qewgrqgwrgqr.TextStrokeTransparency = 0.000
				qewgrqgwrgqr.TextXAlignment = Enum.TextXAlignment.Left

				asdwasff.Name = "asdwasff"
				asdwasff.Parent = gradins
				asdwasff.BackgroundColor3 = Color3.fromRGB(25, 24, 24)
				asdwasff.BorderColor3 = Color3.fromRGB(25, 24, 24)
				asdwasff.AutomaticSize = Enum.AutomaticSize.X
				asdwasff.Position = UDim2.new(0, 0, 9.90899658, 2)
				asdwasff.Size = UDim2.new(0, 102, 0, 14)

				lolfaggot.Name = "lolfaggot"
				lolfaggot.Parent = asdwasff
				lolfaggot.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				lolfaggot.BorderSizePixel = 0
				lolfaggot.Position = UDim2.new(0, 0, 0, -1)
				lolfaggot.Size = UDim2.new(0, 0, 0, 14)

				gergergre.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(172, 208, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(75, 92, 112))}
				gergergre.Rotation = 90
				gergergre.Name = "gergergre"
				gergergre.Parent = lolfaggot

				local function OWOK_fake_script() -- wgrgerqgerq.LocalScript 
					local script = Instance.new('LocalScript', wgrgerqgerq)

					local watermark = script.Parent
					watermark.Draggable = true
					watermark.Active = true
				end
				coroutine.wrap(OWOK_fake_script)()

				while wait(1/16) do
					LagTick = math.clamp(LagTick + 1, 0, values.rage.fakelag.limit.Slider)
					if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('UpperTorso') and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') and values.rage.fakelag.enabled.Toggle and values.rage.fakelag.enabled.Active then
						if LagTick >= (values.rage.fakelag.random.Toggle and math.random(0, values.rage.fakelag.limit.Slider) or values.rage.fakelag.limit.Slider)  then
							if values.rage.fakelag.amount.Dropdown == 'static' then 
								game:GetService('NetworkClient'):SetOutgoingKBPSLimit(9e9)
								FakelagFolder:ClearAllChildren()
								LagTick = 0
								if values.rage.fakelag['visualize lag'].Toggle then
									for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
										if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
											local Part = Instance.new("Part")
											Part.BottomSurface = Enum.SurfaceType.Smooth
											Part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
											Part.Color = values.rage.fakelag['visualize lag'].Color
											Part.Material = Enum.Material.ForceField
											Part.Shape = Enum.PartType.Ball
											Part.Size = Vector3.new(2, 2, 2)
											Part.TopSurface = Enum.SurfaceType.Smooth
											Part.Parent = FakelagFolder
											Part.Anchored = true
											Part.CanCollide = false
											Part.Position = LocalPlayer.Character.HumanoidRootPart.Position
										end
									end
								end
							elseif values.rage.fakelag.amount.Dropdown == 'freeze' and allowedtofreeze then 
								LagTick = 0
								FakelagFolder:ClearAllChildren()

								pcall(function()
									workspace.FreezeCharacter2:Remove()
								end)
								wait(0.1)
								lolfaggot:TweenSize(UDim2.new(0, 102, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.1,true)
								pcall(function()
									local part = Instance.new('Part', workspace)

									part.Size = Vector3.new(30, 1, 30) 


									part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
									part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
									part.CanCollide = false
									part.Transparency = 1
									part.Name = 'FreezeCharacter2'


									local weld = Instance.new('Weld',part)
									weld.Part0 = part
									weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart


								if values.rage.fakelag['visualize lag'].Toggle then
									for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
										if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
											local Part = Instance.new("Part")
											Part.BottomSurface = Enum.SurfaceType.Smooth
											Part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
											Part.Color = values.rage.fakelag['visualize lag'].Color
											Part.Material = Enum.Material.ForceField
											Part.Shape = Enum.PartType.Ball
											Part.Size = Vector3.new(2, 2, 2)
											Part.TopSurface = Enum.SurfaceType.Smooth
											Part.Parent = FakelagFolder
											Part.Anchored = true
											Part.CanCollide = false
											Part.Position = LocalPlayer.Character.HumanoidRootPart.Position
										end
									end
								end
								end)

								wait(0.1)
								lolfaggot:TweenSize(UDim2.new(0, 0, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.1,true)
							elseif values.rage.fakelag.amount.Dropdown == 'tfreeze' and allowedtofreeze then 
								LagTick = 0
								FakelagFolder:ClearAllChildren()
								pcall(function()

								end)
								pcall(function()
									workspace.FreezeCharacter2:Remove()
								end)
								local loopstuff
								pcall(function()
									saved = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
									savedcamerapart.CFrame = workspace.Camera.Focus
									workspace.Camera.CameraSubject = savedcamerapart
									loopstuff = game:GetService('RunService').Stepped:Connect(function()
										savedcamerapart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, savedcamerapart.CFrame.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
									end)
									game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, -values.rage.fakelag['under y'].Slider, 0)
								end)

								wait(0.15)
								lolfaggot:TweenSize(UDim2.new(0, 102, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.15,true)
								pcall(function()
									local part = Instance.new('Part', workspace)

									part.Size = Vector3.new(30, 1, 30) 


									part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
									part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
									part.CanCollide = false
									part.Transparency = 1
									part.Name = 'FreezeCharacter2'


									local weld = Instance.new('Weld',part)
									weld.Part0 = part
									weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart


								if values.rage.fakelag['visualize lag'].Toggle then
									for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
										if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
											local Part = Instance.new("Part")
											Part.BottomSurface = Enum.SurfaceType.Smooth
											Part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
											Part.Color = values.rage.fakelag['visualize lag'].Color
											Part.Material = Enum.Material.ForceField
											Part.Shape = Enum.PartType.Ball
											Part.Size = Vector3.new(2, 2, 2)
											Part.TopSurface = Enum.SurfaceType.Smooth
											Part.Parent = FakelagFolder
											Part.Anchored = true
											Part.CanCollide = false
											Part.Position = LocalPlayer.Character.HumanoidRootPart.Position
										end
									end
								end
								end)

								wait(0.01)
								lolfaggot:TweenSize(UDim2.new(0, 0, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.01,true)
								pcall(function()
									loopstuff:Disconnect()
									workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
									workspace.FreezeCharacter2.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, saved.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
								end)


								wait(0.1)
								lolfaggot:TweenSize(UDim2.new(0, 102, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.1,true)
							elseif values.rage.fakelag.amount.Dropdown == 'underfreeze' and allowedtofreeze then 
								LagTick = 0
								FakelagFolder:ClearAllChildren()

								pcall(function()
									workspace.FreezeCharacter2:Remove()
								end)
								local loopstuff
								pcall(function()
									saved = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
									savedcamerapart.CFrame = workspace.Camera.Focus
									workspace.Camera.CameraSubject = savedcamerapart
									loopstuff = game:GetService('RunService').Stepped:Connect(function()
										savedcamerapart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, savedcamerapart.CFrame.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
									end)
									game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, -values.rage.fakelag['under y'].Slider, 0)
								end)

								wait(0.15)
								lolfaggot:TweenSize(UDim2.new(0, 0, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.15,true)
								pcall(function()
									local part = Instance.new('Part', workspace)

									part.Size = Vector3.new(30, 1, 30) 


									part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
									part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
									part.CanCollide = false
									part.Transparency = 1
									part.Name = 'FreezeCharacter2'


									local weld = Instance.new('Weld',part)
									weld.Part0 = part
									weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart


								if values.rage.fakelag['visualize lag'].Toggle then
									for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
										if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
											local Part = Instance.new("Part")
											Part.BottomSurface = Enum.SurfaceType.Smooth
											Part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
											Part.Color = values.rage.fakelag['visualize lag'].Color
											Part.Material = Enum.Material.ForceField
											Part.Shape = Enum.PartType.Ball
											Part.Size = Vector3.new(2, 2, 2)
											Part.TopSurface = Enum.SurfaceType.Smooth
											Part.Parent = FakelagFolder
											Part.Anchored = true
											Part.CanCollide = false
											Part.Position = LocalPlayer.Character.HumanoidRootPart.Position
										end
									end
								end
								end)

								wait(0.01)
								lolfaggot:TweenSize(UDim2.new(0, 102, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.01,true)
								pcall(function()
									loopstuff:Disconnect()
									workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
									workspace.FreezeCharacter2.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, saved.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
								end)


								wait(0.1)
								lolfaggot:TweenSize(UDim2.new(0, 0, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.1,true)
							end
						else
							lolfaggot:TweenSize(UDim2.new(0, 0, 0, 14),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.1,true)
							if values.rage.fakelag.enabled.Toggle and values.rage.fakelag.amount.Dropdown == 'static' then
								game:GetService('NetworkClient'):SetOutgoingKBPSLimit(1)
							end
						end
					else

						pcall(function()
							workspace.FreezeCharacter2:Remove()
						end)
						FakelagFolder:ClearAllChildren()
						game:GetService('NetworkClient'):SetOutgoingKBPSLimit(9e9)
					end
				end
			end)()
			fakelag:Element('ToggleKeybind', 'FreezeLOL!', nil, function(tbl)
				if tbl.Toggle and tbl.Active then
					local Freto = Instance.new("Part")
					Freto.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
					Freto.CanCollide = false

					Freto.BottomSurface = Enum.SurfaceType.Smooth
					Freto.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
					Freto.Name = "Freto"
					Freto.Size = Vector3.new(30, 1, 30)
					Freto.TopSurface = Enum.SurfaceType.Smooth
					Freto.Parent = game:GetService("Workspace")
					Freto.Transparency = 1

					local Part = Instance.new("Part")
					Part.CanCollide = false
					Part.Anchored = true
					Part.BottomSurface = Enum.SurfaceType.Smooth
					Part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
					Part.Material = Enum.Material.ForceField
					Part.Shape = Enum.PartType.Ball
					Part.Size = Vector3.new(2, 2, 2)
					Part.TopSurface = Enum.SurfaceType.Smooth
					Part.Transparency = 0.3
					Part.Parent = Freto
					Part.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

					local Weld = Instance.new("Weld", Freto)
					Weld.Parent = Freto
					Weld.Part0 = Freto
					Weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart
				else
					game.Workspace.Freto:Destroy()
				end
			end)
			freezebusy1 = false
			freezebusy2 = false

--[[
local LagTick = 0
local fakelag = rage:Sector('fakelag', 'Right')
fakelag:Element('Slider', 'set ping', {min = -100, max = 100, default = 0})
game:GetService('Players').LocalPlayer.Ping.Changed:Connect(function()
	if values.rage.fakelag['set ping'].Slider ~= 0 then 
		game:GetService('ReplicatedStorage').Events.UpdatePing:FireServer( values.rage.fakelag['set ping'].Slider/10)
	end
end)
fakelag:Element('ToggleKeybind', 'enabled', {default = {Toggle = false}}, function(tbl)
	if tbl.Toggle then
	else
		FakelagFolder:ClearAllChildren()
		game:GetService('NetworkClient'):SetOutgoingKBPSLimit(9e9)
	end
end)
fakelag:Element('Dropdown', 'amount', {options = {'static', 'freeze', 'tfreeze', 'underfreeze'}})
fakelag:Element('Slider', 'limit', {min = 1, max = 16, default = 8})
fakelag:Element('Slider', 'under y', {min = 1, max = 50, default = 8})
fakelag:Element('Toggle', 'random')
fakelag:Element('ToggleColor', 'visualize lag', {default = {Toggle = false, Color = Color3.fromRGB(255,255,255)}}, function(tbl)
	if tbl.Toggle then
		for _,obj in pairs(FakelagFolder:GetChildren()) do
			obj.Color = tbl.Color
		end
	else
		FakelagFolder:ClearAllChildren()
	end
end)

local savedcamerapart = Instance.new('Part', RayIgnore)
savedcamerapart.Anchored = true
savedcamerapart.CanCollide = false
savedcamerapart.Size = Vector3.new(1, 1, 1)
savedcamerapart.Transparency = 1
fakelag:Element('ToggleKeybind', 'ping spike')
coroutine.wrap(function()
	while wait(1/16) do
		LagTick = math.clamp(LagTick + 1, 0, values.rage.fakelag.limit.Slider)
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('UpperTorso') and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') and values.rage.fakelag.enabled.Toggle and values.rage.fakelag.enabled.Active then
			if LagTick >= (values.rage.fakelag.random.Toggle and math.random(0, values.rage.fakelag.limit.Slider) or values.rage.fakelag.limit.Slider)  then
				if values.rage.fakelag.amount.Dropdown == 'static' then 
					game:GetService('NetworkClient'):SetOutgoingKBPSLimit(9e9)
					FakelagFolder:ClearAllChildren()
					LagTick = 0
					if values.rage.fakelag['visualize lag'].Toggle then
						for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
							if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
								local part = Instance.new('Part')
								part.CFrame = hitbox.CFrame
								part.Anchored = true
								part.CanCollide = false
								part.Material = Enum.Material.ForceField
								part.Color = values.rage.fakelag['visualize lag'].Color
								part.Name = hitbox.Name
								part.Transparency = 0
								part.Size = hitbox.Size
								part.Parent = FakelagFolder
							end
						end
					end
				elseif values.rage.fakelag.amount.Dropdown == 'freeze' and allowedtofreeze then 
					LagTick = 0
					FakelagFolder:ClearAllChildren()

					pcall(function()
						workspace.FreezeCharacter2:Remove()
					end)
					wait(0.1)
					
					pcall(function()
						local part = Instance.new('Part', workspace)

						part.Size = Vector3.new(30, 1, 30) 
		
						
						part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
						part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
						part.CanCollide = false
						part.Transparency = 1
						part.Name = 'FreezeCharacter2'
		
	
						local weld = Instance.new('Weld',part)
						weld.Part0 = part
						weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart
	
	
						if values.rage.fakelag['visualize lag'].Toggle then
							for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
								if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
									local part = Instance.new('Part')
									part.CFrame = hitbox.CFrame
									part.Anchored = true
									part.CanCollide = false
									part.Material = Enum.Material.ForceField
									part.Color = values.rage.fakelag['visualize lag'].Color
									part.Name = hitbox.Name
									part.Transparency = 0
									part.Size = hitbox.Size
									part.Parent = FakelagFolder
								end
							end
						end
				    end)

					wait(0.1)
				elseif values.rage.fakelag.amount.Dropdown == 'tfreeze' and allowedtofreeze then 
					LagTick = 0
					FakelagFolder:ClearAllChildren()
					pcall(function()

					end)
					pcall(function()
						workspace.FreezeCharacter2:Remove()
					end)
					local loopstuff
					pcall(function()
						saved = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
						savedcamerapart.CFrame = workspace.Camera.Focus
						workspace.Camera.CameraSubject = savedcamerapart
						loopstuff = game:GetService('RunService').Stepped:Connect(function()
							savedcamerapart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, savedcamerapart.CFrame.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
						end)
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, -values.rage.fakelag['under y'].Slider, 0)
					end)

					wait(0.15)

					pcall(function()
						local part = Instance.new('Part', workspace)

						part.Size = Vector3.new(30, 1, 30) 
		
						
						part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
						part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
						part.CanCollide = false
						part.Transparency = 1
						part.Name = 'FreezeCharacter2'
		
	
						local weld = Instance.new('Weld',part)
						weld.Part0 = part
						weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart
	
	
						if values.rage.fakelag['visualize lag'].Toggle then
							for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
								if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
									local part = Instance.new('Part')
									part.CFrame = hitbox.CFrame
									part.Anchored = true
									part.CanCollide = false
									part.Material = Enum.Material.ForceField
									part.Color = values.rage.fakelag['visualize lag'].Color
									part.Name = hitbox.Name
									part.Transparency = 0
									part.Size = hitbox.Size
									part.Parent = FakelagFolder
								end
							end
						end
				    end)
					
					wait(0.01)

					pcall(function()
						loopstuff:Disconnect()
						workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
						workspace.FreezeCharacter2.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, saved.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
					end)


					wait(0.1)
				elseif values.rage.fakelag.amount.Dropdown == 'underfreeze'  and allowedtofreeze then 
					LagTick = 0
					FakelagFolder:ClearAllChildren()

					pcall(function()
						workspace.FreezeCharacter2:Remove()
					end)
					local loopstuff
					pcall(function()
						saved = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
						savedcamerapart.CFrame = workspace.Camera.Focus
						workspace.Camera.CameraSubject = savedcamerapart
						loopstuff = game:GetService('RunService').Stepped:Connect(function()
							savedcamerapart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, savedcamerapart.CFrame.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
						end)
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, -values.rage.fakelag['under y'].Slider, 0)
					end)

					wait(0.15)

					pcall(function()
						local part = Instance.new('Part', workspace)

						part.Size = Vector3.new(30, 1, 30) 
		
						
						part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
						part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
						part.CanCollide = false
						part.Transparency = 1
						part.Name = 'FreezeCharacter2'
		
	
						local weld = Instance.new('Weld',part)
						weld.Part0 = part
						weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart
	
	
						if values.rage.fakelag['visualize lag'].Toggle then
							for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
								if hitbox:IsA('BasePart') and hitbox.Name ~= 'HumanoidRootPart' then
									local part = Instance.new('Part')
									part.CFrame = hitbox.CFrame
									part.Anchored = true
									part.CanCollide = false
									part.Material = Enum.Material.ForceField
									part.Color = values.rage.fakelag['visualize lag'].Color
									part.Name = hitbox.Name
									part.Transparency = 0
									part.Size = hitbox.Size
									part.Parent = FakelagFolder
								end
							end
						end
				    end)
					
					wait(0.01)

					pcall(function()
						loopstuff:Disconnect()
						workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
						workspace.FreezeCharacter2.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.x, saved.y, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.z)
					end)


					wait(0.1)
				end
			else
				if values.rage.fakelag.enabled.Toggle and values.rage.fakelag.amount.Dropdown == 'static' then
					game:GetService('NetworkClient'):SetOutgoingKBPSLimit(1)
				end
			end
		else
			
			pcall(function()
				workspace.FreezeCharacter2:Remove()
			end)
			FakelagFolder:ClearAllChildren()
			game:GetService('NetworkClient'):SetOutgoingKBPSLimit(9e9)
		end
	end
end)()

freezebusy1 = false
freezebusy2 = false
]]--

local exploits = rage:Sector('exploits', 'Left')
exploits:Element('ToggleKeybind', 'around the world')
exploits:Element('Slider', 'height', {min = -200, max = 200, default = 0})
exploits:Element('Slider', 'distance', {min = 1, max = 500, default = 0})
exploits:Element('Slider', 'speed', {min = 1, max = 100, default = 0})

exploits:Element('ToggleKeybind', 'custom tap')
exploits:Element('Slider', 'tap amount', {min = 0, max = 10, default = 0})
exploits:Element('ToggleKeybind', 'kill all')
exploits:Element('Toggle', 'whizz all', {}, function(tbl)
	while tbl.Toggle and LocalPlayer.Character:FindFirstChild('Gun') do
    wait()
		for _,Player in pairs(Players:GetPlayers()) do
			game:GetService('ReplicatedStorage').Events.Whizz:FireServer(Player)
		end
	end
end)

--[[
exploits:Element('ToggleKeybind', 'quick peek')
exploits:Element('Slider', 'wbr', {min = 1, max = 100, default = 1,})
exploits:Element('ToggleTrans', 'visualize circle', {default = {Color = Color3.fromRGB(255,255,255)}})
exploits:Element('Toggle', 'unfreeze shoot')
exploits:Element('Dropdown', 'peek method', {options = {'freeze', 'teleport', 'tween'}})
exploits:Element('Slider', 'tween speed', {min = 1, max = 100, default = 1,})

exploits:Element('Toggle', 'limit peek')
exploits:Element('Slider', 'limit distance', {min = 1, max = 200, default = 10,})

peektimewait = 0
exploits:Element('Toggle', 'time limit')
exploits:Element('Slider', 'time duration', {min = 1, max = 85, default = 5,})
]]--

local quickpeekshit = rage:Sector('quick peeks', 'Left')
quickpeekshit:Element('ToggleKeybind', 'quick peek')
quickpeekshit:Element('Slider', 'wbr', {min = 1, max = 100, default = 1,})
quickpeekshit:Element('ToggleTrans', 'visualize circle', {default = {Color = Color3.fromRGB(255,255,255)}})
quickpeekshit:Element('Toggle', 'unfreeze shoot')
quickpeekshit:Element('Dropdown', 'peek method', {options = {'freeze', 'teleport', 'tween'}})
quickpeekshit:Element('Slider', 'tween speed', {min = 1, max = 100, default = 1,})

quickpeekshit:Element('Toggle', 'limit peek')
quickpeekshit:Element('Slider', 'limit distance', {min = 1, max = 200, default = 10,})

peektimewait = 0
quickpeekshit:Element('Toggle', 'time limit')
quickpeekshit:Element('Slider', 'time duration', {min = 1, max = 85, default = 5,})

OldClientFireBullet = Client.firebullet

quickpeekshit:Element('ToggleKeybind', 'quick peek (up/down)', {}, function(tbl)
if tbl.Toggle and tbl.Active then
	local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos + Vector3.new(0,values.rage['quick peeks']['distance (up/down)'].Slider,0)
	wait(0.3)
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
end --values.rage.exploits['quick peek'].Toggle
end)
quickpeekshit:Element('Slider', 'distance (up/down)', {min = -100, max = 100, default = 5})
quickpeekshit:Element('ToggleKeybind', 'quick peek (front/back)', {}, function(tbl)
if tbl.Toggle and tbl.Active then
	local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos + Vector3.new(0,0,values.rage['quick peeks']['distance (front/back)'].Slider)
	wait(0.3)
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
end --values.rage.exploits['quick peek'].Toggle
end)
quickpeekshit:Element('Slider', 'distance (front/back)', {min = -100, max = 100, default = 5})
quickpeekshit:Element('ToggleKeybind', 'quick peek (left)', {}, function(tbl)
if tbl.Toggle and tbl.Active then
	local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos + Vector3.new(-values.rage['quick peeks']['distance'].Slider,0,0)
	wait(0.3)
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
end --values.rage.exploits['quick peek'].Toggle
end)
quickpeekshit:Element('ToggleKeybind', 'quick peek (right)', {}, function(tbl)
if tbl.Toggle and tbl.Active then
	local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos + Vector3.new(values.rage['quick peeks']['distance'].Slider,0,0)
	wait(0.3)
	LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
end
end)

quickpeekshit:Element('Slider', 'distance', {min = 1, max = 100, default = 5})

local function DrawLine()
    local l = Drawing.new("Line")
    l.Visible = false
    l.From = Vector2.new(0, 0)
    l.To = Vector2.new(1, 1)
    l.Color = values.visuals.players['skeleton'].Color
    l.Thickness = 1
    l.Transparency = 1
    return l
end

local function DrawESP(plr)
    repeat wait() until plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil
    local limbs = {}
    local R15 = (plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15) and true or false
    if R15 then 
        limbs = {
            -- Spine
            Head_UpperTorso = DrawLine(),
            UpperTorso_LowerTorso = DrawLine(),
            -- Left Arm
            UpperTorso_LeftUpperArm = DrawLine(),
            LeftUpperArm_LeftLowerArm = DrawLine(),
            LeftLowerArm_LeftHand = DrawLine(),
            -- Right Arm
            UpperTorso_RightUpperArm = DrawLine(),
            RightUpperArm_RightLowerArm = DrawLine(),
            RightLowerArm_RightHand = DrawLine(),
            -- Left Leg
            LowerTorso_LeftUpperLeg = DrawLine(),
            LeftUpperLeg_LeftLowerLeg = DrawLine(),
            LeftLowerLeg_LeftFoot = DrawLine(),
            -- Right Leg
            LowerTorso_RightUpperLeg = DrawLine(),
            RightUpperLeg_RightLowerLeg = DrawLine(),
            RightLowerLeg_RightFoot = DrawLine(),
        }
    else 
        limbs = {
            Head_Spine = DrawLine(),
            Spine = DrawLine(),
            LeftArm = DrawLine(),
            LeftArm_UpperTorso = DrawLine(),
            RightArm = DrawLine(),
            RightArm_UpperTorso = DrawLine(),
            LeftLeg = DrawLine(),
            LeftLeg_LowerTorso = DrawLine(),
            RightLeg = DrawLine(),
            RightLeg_LowerTorso = DrawLine()
        }
    end
    local function Visibility(state)
        for i, v in pairs(limbs) do
            v.Visible = state
        end
    end

    local function Colorize(color)
        for i, v in pairs(limbs) do
            v.Color = color
        end
    end

        local connection
        connection = RunService.RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 then
                local HUM, vis = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if vis then
                    -- Head
                    local H = Camera:WorldToViewportPoint(plr.Character.Head.Position)
                    if limbs.Head_UpperTorso.From ~= Vector2.new(H.X, H.Y) then
                        --Spine
                        local UT = Camera:WorldToViewportPoint(plr.Character.UpperTorso.Position)
                        local LT = Camera:WorldToViewportPoint(plr.Character.LowerTorso.Position)
                        -- Left Arm
                        local LUA = Camera:WorldToViewportPoint(plr.Character.LeftUpperArm.Position)
                        local LLA = Camera:WorldToViewportPoint(plr.Character.LeftLowerArm.Position)
                        local LH = Camera:WorldToViewportPoint(plr.Character.LeftHand.Position)
                        -- Right Arm
                        local RUA = Camera:WorldToViewportPoint(plr.Character.RightUpperArm.Position)
                        local RLA = Camera:WorldToViewportPoint(plr.Character.RightLowerArm.Position)
                        local RH = Camera:WorldToViewportPoint(plr.Character.RightHand.Position)
                        -- Left leg
                        local LUL = Camera:WorldToViewportPoint(plr.Character.LeftUpperLeg.Position)
                        local LLL = Camera:WorldToViewportPoint(plr.Character.LeftLowerLeg.Position)
                        local LF = Camera:WorldToViewportPoint(plr.Character.LeftFoot.Position)
                        -- Right leg
                        local RUL = Camera:WorldToViewportPoint(plr.Character.RightUpperLeg.Position)
                        local RLL = Camera:WorldToViewportPoint(plr.Character.RightLowerLeg.Position)
                        local RF = Camera:WorldToViewportPoint(plr.Character.RightFoot.Position)

                        --Head
                        limbs.Head_UpperTorso.From = Vector2.new(H.X, H.Y)
                        limbs.Head_UpperTorso.To = Vector2.new(UT.X, UT.Y)

                        --Spine
                        limbs.UpperTorso_LowerTorso.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_LowerTorso.To = Vector2.new(LT.X, LT.Y)

                        -- Left Arm
                        limbs.UpperTorso_LeftUpperArm.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_LeftUpperArm.To = Vector2.new(LUA.X, LUA.Y)

                        limbs.LeftUpperArm_LeftLowerArm.From = Vector2.new(LUA.X, LUA.Y)
                        limbs.LeftUpperArm_LeftLowerArm.To = Vector2.new(LLA.X, LLA.Y)

                        limbs.LeftLowerArm_LeftHand.From = Vector2.new(LLA.X, LLA.Y)
                        limbs.LeftLowerArm_LeftHand.To = Vector2.new(LH.X, LH.Y)

                        -- Right Arm
                        limbs.UpperTorso_RightUpperArm.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_RightUpperArm.To = Vector2.new(RUA.X, RUA.Y)

                        limbs.RightUpperArm_RightLowerArm.From = Vector2.new(RUA.X, RUA.Y)
                        limbs.RightUpperArm_RightLowerArm.To = Vector2.new(RLA.X, RLA.Y)

                        limbs.RightLowerArm_RightHand.From = Vector2.new(RLA.X, RLA.Y)
                        limbs.RightLowerArm_RightHand.To = Vector2.new(RH.X, RH.Y)

                        -- Left Leg
                        limbs.LowerTorso_LeftUpperLeg.From = Vector2.new(LT.X, LT.Y)
                        limbs.LowerTorso_LeftUpperLeg.To = Vector2.new(LUL.X, LUL.Y)

                        limbs.LeftUpperLeg_LeftLowerLeg.From = Vector2.new(LUL.X, LUL.Y)
                        limbs.LeftUpperLeg_LeftLowerLeg.To = Vector2.new(LLL.X, LLL.Y)

                        limbs.LeftLowerLeg_LeftFoot.From = Vector2.new(LLL.X, LLL.Y)
                        limbs.LeftLowerLeg_LeftFoot.To = Vector2.new(LF.X, LF.Y)

                        -- Right Leg
                        limbs.LowerTorso_RightUpperLeg.From = Vector2.new(LT.X, LT.Y)
                        limbs.LowerTorso_RightUpperLeg.To = Vector2.new(RUL.X, RUL.Y)

                        limbs.RightUpperLeg_RightLowerLeg.From = Vector2.new(RUL.X, RUL.Y)
                        limbs.RightUpperLeg_RightLowerLeg.To = Vector2.new(RLL.X, RLL.Y)

                        limbs.RightLowerLeg_RightFoot.From = Vector2.new(RLL.X, RLL.Y)
                        limbs.RightLowerLeg_RightFoot.To = Vector2.new(RF.X, RF.Y)
                    end

                    if limbs.Head_UpperTorso.Visible ~= true then
                        Visibility(true)
                    end
                else 
                    if limbs.Head_UpperTorso.Visible ~= false then
                        Visibility(false)
                    end
                end
            else 
                if limbs.Head_UpperTorso.Visible ~= false then
                    Visibility(false)
                end
                if game.Players:FindFirstChild(plr.Name) == nil then 
                    for i, v in pairs(limbs) do
						v.Transparency = 0
                        v:Remove()
                    end
                    connection:Disconnect()
                end
				if GetTeam(plr) == GetTeam(LocalPlayer) and not (values.visuals.players.teammates.Toggle) then
					Visibility(false)
				   for i, v in pairs(limbs) do
						v.Transparency = 0
                        v:Remove()
                    end
                    connection:Disconnect()
				end
            end
				if not values.visuals.players['skeleton'].Toggle then 
				Visibility(false)
				   for i, v in pairs(limbs) do
						v.Transparency = 0
                        v:Remove()
                    end
                    connection:Disconnect()
				end			
			
        end)


end

local players = visuals:Sector('players', 'Left')
players:Element('Toggle', 'teammates')
players:Element('ToggleColor', 'box', {default = {Color = Color3.fromRGB(255,255,255)}})
players:Element('ToggleColor', 'name', {default = {Color = Color3.fromRGB(255,255,255)}})
players:Element('ToggleColor', 'skeleton', {default = {Color = Color3.fromRGB(255,255,255)}}, function(tbl)
	if tbl.Toggle then
		for i, v in pairs(game:GetService("Players"):GetPlayers()) do
			if v.Name ~= LocalPlayer.Name and (values.visuals.players.teammates.Toggle and true or v.Team ~= LocalPlayer) then
				DrawESP(v)
			end
		end
		game.Players.PlayerAdded:Connect(function(newplr)
			if newplr.Name ~= LocalPlayer.Name and tbl.Toggle then
				DrawESP(newplr)
			end
		end)
	end
end)
players:Element('ToggleColor', 'health', {default = {Color = Color3.fromRGB(255,255,255)}})
players:Element('ToggleColor', 'weapon', {default = {Color = Color3.fromRGB(255,255,255)}})
players:Element('ToggleColor', 'weapon icon', {default = {Color = Color3.fromRGB(255,255,255)}})
players:Element('Jumbobox', 'indicators', {options = {'armor'}})
players:Element('Jumbobox', 'outlines', {options = {'drawings', 'text'}, default = {Jumbobox = {'drawings', 'text'}}})
players:Element('Dropdown', 'font', {options = {'Plex', 'Monospace', 'System', 'UI'}})
players:Element('Slider', 'size', {min = 12, max = 16, default = 13})

players:Element('Slider', 'cham thickness', {min = 0, max = 10, default = 0})

players:Element('ToggleTrans', 'chams', {default = {Color = Color3.fromRGB(255,255,255), Transparency = 0}}, function(tbl)
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == 'WallCham' then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
							
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = values.visuals.players['chams'].Transparency
				end
			end
		end
	end
end)

players:Element('Slider', 'vcham thickness', {min = 0, max = 10, default = 0})

players:Element('ToggleTrans', 'visible chams',  {default = {Color = Color3.fromRGB(255,255,255), Transparency = 0}}, function(tbl)
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == 'VisibleCham' then
					if tbl.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = tbl.Color
					Obj.Transparency = values.visuals.players['visible chams'].Transparency
				end
			end
		end
	end
end)

local effects = visuals:Sector('effects', 'Right')
effects:Element('ToggleTrans', 'weapon chams', {default = {Color = Color3.fromRGB(255,255,255), Transparency = 0}}, function(tbl)
	if WeaponObj == nil then return end
	if tbl.Toggle then
		for i,v in pairs(WeaponObj) do
			UpdateWeapon(v)
		end
	else
		for i,v in pairs(WeaponObj) do
			if v:IsA('MeshPart') then v.TextureID = v.OriginalTexture.Value end
			if v:IsA('Part') and v:FindFirstChild('Mesh') and not v:IsA('BlockMesh') then
				v.Mesh.TextureId = v.Mesh.OriginalTexture.Value
				v.Mesh.VertexColor = Vector3.new(1,1,1)
			end
			v.Color = v.OriginalColor.Value
			v.Material = v.OriginalMaterial.Value
			v.Transparency = 0
		end
	end
end)
effects:Element('Dropdown', 'weapon material', {options = {'Smooth', 'Flat', 'ForceField', 'Glass'}}, function(tbl)
	if WeaponObj == nil then return end
	if values.visuals.effects['weapon chams'].Toggle then
		for i,v in pairs(WeaponObj) do
			UpdateWeapon(v)
		end
	end
end)
effects:Element("Dropdown", "weapon ff anim", {options = {"none", "scanning", "lava", "pulse"}}, function(tbl)
	if values.visuals.effects["weapon chams"].Toggle and values.visuals.effects["weapon material"].Dropdown == "ForceField" then
		for i,v in pairs(WeaponObj) do
			UpdateWeapon(v)
		end
	end
end)
effects:Element('Slider', 'reflectance', {min = 0, max = 100, default = 0}, function(tbl)
	if values.visuals.effects['weapon chams'].Toggle then
		for i,v in pairs(WeaponObj) do
			UpdateWeapon(v)
		end
	end
end)
effects:Element('ToggleTrans', 'accessory chams', {default = {Color = Color3.fromRGB(255,255,255)}}, function(val)
	if RArm == nil or LArm == nil then return end
	if val.Toggle then
		if RGlove ~= nil then
			UpdateAccessory(RGlove)
		end
		if RSleeve ~= nil then
			UpdateAccessory(RSleeve)
		end
		if LGlove ~= nil then
			UpdateAccessory(LGlove)
		end
		if LSleeve ~= nil then
			UpdateAccessory(LSleeve)
		end
	else
		if RGlove then
			ReverseAccessory(RGlove)
		end
		if LGlove then
			ReverseAccessory(LGlove)
		end
		if RSleeve then
			ReverseAccessory(RSleeve)
		end
		if LSleeve then
			ReverseAccessory(LSleeve)
		end
	end
end)
effects:Element('Dropdown', 'accessory material', {options = {'Smooth','ForceField'}}, function(val)
	if RArm == nil or LArm == nil then return end
	if values.visuals.effects['accessory chams'].Toggle then
		if RGlove ~= nil then
			UpdateAccessory(RGlove)
		end
		if RSleeve ~= nil then
			UpdateAccessory(RSleeve)
		end
		if LGlove ~= nil then
			UpdateAccessory(LGlove)
		end
		if LSleeve ~= nil then
			UpdateAccessory(LSleeve)
		end
	end
end)
effects:Element('ToggleTrans', 'arm chams', {default = {Color = Color3.fromRGB(255,255,255)}}, function(val)
	if RArm == nil then return end
	if LArm == nil then return end
	if val.Toggle then
		RArm.Color = val.Color
		LArm.Color = val.Color
		RArm.Transparency = val.Transparency
		LArm.Transparency = val.Transparency
	else
		RArm.Color = RArm.Color3Value.Value
		LArm.Color = RArm.Color3Value.Value
		RArm.Transparency = 0
		LArm.Transparency = 0
	end
end)

effects:Element('Jumbobox', 'removals', {options = {'scope', 'scope lines', 'flash', 'smoke', 'decals', 'shadows', 'clothes'}}, function(val)
	local tbl = val.Jumbobox
	if table.find(tbl, 'decals') then
		Client.createbullethole = function() end
		for i,v in pairs(workspace.Debris:GetChildren()) do
			if v.Name == 'Bullet' or v.Name == 'SurfaceGui' then
				v:Destroy()
			end
		end
	else
		Client.createbullethole = oldcreatebullethole
	end
	if table.find(tbl, 'clothes') then
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('UpperTorso') then
			if LocalPlayer.Character:FindFirstChild('Shirt') then
				LocalPlayer.Character:FindFirstChild('Shirt').ShirtTemplate = ''
			end
			if LocalPlayer.Character:FindFirstChild('Pants') then
				LocalPlayer.Character:FindFirstChild('Pants').PantsTemplate = ''
			end
		end
	else
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('UpperTorso') then
			if LocalPlayer.Character:FindFirstChild('Shirt') then
				LocalPlayer.Character:FindFirstChild('Shirt').ShirtTemplate = LocalPlayer.Character:FindFirstChild('Shirt').OriginalTexture.Value
			end
			if LocalPlayer.Character:FindFirstChild('Pants') then
				LocalPlayer.Character:FindFirstChild('Pants').PantsTemplate = LocalPlayer.Character:FindFirstChild('Pants').OriginalTexture.Value
			end
		end
	end
	if table.find(tbl, 'scope') then
		PlayerGui.GUI.Crosshairs.Scope.ImageTransparency = 1
		PlayerGui.GUI.Crosshairs.Scope.Scope.ImageTransparency = 1
		PlayerGui.GUI.Crosshairs.Frame1.Transparency = 1
		PlayerGui.GUI.Crosshairs.Frame2.Transparency = 1
		PlayerGui.GUI.Crosshairs.Frame3.Transparency = 1
		PlayerGui.GUI.Crosshairs.Frame4.Transparency = 1
	else
		PlayerGui.GUI.Crosshairs.Scope.ImageTransparency = 0
		PlayerGui.GUI.Crosshairs.Scope.Scope.ImageTransparency = 0
		PlayerGui.GUI.Crosshairs.Frame1.Transparency = 0
		PlayerGui.GUI.Crosshairs.Frame2.Transparency = 0
		PlayerGui.GUI.Crosshairs.Frame3.Transparency = 0
		PlayerGui.GUI.Crosshairs.Frame4.Transparency = 0
	end
	PlayerGui.Blnd.Enabled = not table.find(tbl, 'flash') and true or false
	Lighting.GlobalShadows = not table.find(tbl, 'shadows') and true or false
	if RayIgnore:FindFirstChild('Smokes') then
		if table.find(tbl, 'smoke') then
			for i,smoke in pairs(RayIgnore.Smokes:GetChildren()) do
				smoke.ParticleEmitter.Rate = 0
			end
		else
			for i,smoke in pairs(RayIgnore.Smokes:GetChildren()) do
				smoke.ParticleEmitter.Rate = smoke.OriginalRate.Value
			end
		end
	end
end)
effects:Element('Toggle', 'force crosshair')
effects:Element('ToggleColor', 'world color', {default = {Color = Color3.fromRGB(255,255,255)}}, function(val)
	if val.Toggle then
		Camera.ColorCorrection.TintColor = val.Color
	else
		Camera.ColorCorrection.TintColor = Color3.fromRGB(255,255,255)
	end
end)
effects:Element("Toggle", "old sounds", {}, function(tbl)
if tbl.Toggle then
--maked by encgldapp, remaked by erog, that script has all bolt shoot etc sounds from cb 2018 (no dual berretas because im gay), enjoy! :) (ion is hot)

local oldsounds
oldsounds = RunService.RenderStepped:Connect(function()
if not (tbl.Toggle) then oldsounds:Disconnect() return end
	pcall(function()
		local player = game:GetService("Players").LocalPlayer.Character
		if player.EquippedTool.Value == "AK47" then
			player.Gun.Shoot.SoundId = "rbxassetid://168436671"
			player.Gun.bolt.SoundId = "rbxassetid://1684275289"
			player.Gun.boltin.SoundId = "rbxassetid://3599995642"
			player.Gun.boltrelease.SoundId = "rbxassetid://515216512"
			player.Gun.magin.SoundId = "rbxassetid://1684275593"
			player.Gun.magout.SoundId = "rbxassetid://1684275849"
		end
		if player.EquippedTool.Value == "M4A1" then
			player.Gun.SShoot.SoundId = "rbxassetid://1665639883"
			player.Gun.Equip.SoundId = "rbxassetid://6564247176"
        	player.Gun.Remove.SoundId = "rbxassetid://1665639103"
			player.Gun.Shoot.SoundId = "rbxassetid://223013951"
			player.Gun.Apply.SoundId = "rbxassetid://1665639351"
			player.Gun.Turn1.SoundId = "rbxassetid://925145888"
			player.Gun.Turn2.SoundId = "rbxassetid://925145967"
			player.Gun.Turn3.SoundId = "rbxassetid://925146060"
			player.Gun.Turn4.SoundId = "rbxassetid://925146170"
			player.Gun.Turn5.SoundId = "rbxassetid://925146323"
			player.Gun.Turn6.SoundId = "rbxassetid://925146323"
			player.Gun.Turn7.SoundId = "rbxassetid://925146323"
			player.Gun.bolt.SoundId = "rbxassetid://1684291592"
			player.Gun.boltin.SoundId = "rbxassetid://1684291797"
			player.Gun.boltrelease.SoundId = "rbxassetid://1684291797"
			player.Gun.magin.SoundId = "rbxassetid://1684292119"
			player.Gun.magout.SoundId = "rbxassetid://1684292401"
		end
        if player.EquippedTool.Value == "Glock" then
			player.Gun.Shoot.SoundId = "rbxassetid://1665635507"
			player.Gun.Switch.SoundId = "rbxassetid://240962650"
			player.Gun.maghit.SoundId = "rbxassetid://888771897"
			player.Gun.magin.SoundId = "rbxassetid://1684288365"
			player.Gun.magout.SoundId = "rbxassetid://1684288526"
			player.Gun.slide.SoundId = "rbxassetid://1684288735"
			player.Gun.slidein.SoundId = "rbxassetid://1684289044"
		end
		if player.EquippedTool.Value == "Galil" then
			player.Gun.Shoot.SoundId = "rbxassetid://344800912"
			player.Gun.Equip.SoundId = "rbxassetid://1665634238"
			player.Gun.bolt.SoundId = "rbxassetid://1684286891"
			player.Gun.boltin.SoundId = "rbxassetid://1684287138"
			player.Gun.magin.SoundId = "rbxassetid://1684287952"
			player.Gun.magout.SoundId = "rbxassetid://1684288128"
		end
		if player.EquippedTool.Value == "USP" then
			player.Gun.SShoot.SoundId = "rbxassetid://1112952739"
			player.Gun.Shoot.SoundId = "rbxassetid://1665652648"
			player.Gun.apply.SoundId = "rbxassetid://1665639351"
			player.Gun.magin.SoundId = "rbxassetid://206942341"
			player.Gun.magout.SoundId = "rbxassetid://206942338"
			player.Gun.remove.SoundId = "rbxassetid://1665639103"
			player.Gun.slide.SoundId = "rbxassetid://223013136"
			player.Gun.slidein.SoundId = "rbxassetid://206942322"
			player.Gun.turn1.SoundId = "rbxassetid://936530480"
			player.Gun.turn2.SoundId = "rbxassetid://936530564"
			player.Gun.turn3.SoundId = "rbxassetid://936530659"
			player.Gun.turn4.SoundId = "rbxassetid://936530800"
			player.Gun.turn5.SoundId = "rbxassetid://936530926"
			player.Gun.turn6.SoundId = "rbxassetid://936530926"
			player.Gun.turn7.SoundId = "rbxassetid://936530926"
		end
		if player.EquippedTool.Value == "DualBerettas" then 
			player.Gun1.Shoot.SoundId = "rbxassetid://251030881"
			player.Gun2.Shoot.SoundId = "rbxassetid://251030881"
		end
		if player.EquippedTool.Value == "P250" then
			player.Gun.Shoot.SoundId = "rbxassetid://340365431"
            player.Gun.Shoot.TimePosition = 0
			player.Gun.magin.SoundId = "rbxassetid://1684297881"
			player.Gun.magout.SoundId = "rbxassetid://1684298091"
			player.Gun.slide.SoundId = "rbxassetid://1684298337"
			player.Gun.slidein.SoundId = "rbxassetid://1684298585"
		end
		if player.EquippedTool.Value == "DesertEagle" then
			player.Gun.Shoot.SoundId = "rbxassetid://202918645"
			player.Gun.Equip.SoundId = "rbxassetid://223012521"
			player.Gun.magin.SoundId = "rbxassetid://1684279318"
			player.Gun.magout.SoundId = "rbxassetid://1684279591"
			player.Gun.slide.SoundId = "rbxassetid://1684279824"
			player.Gun.slidein.SoundId = "rbxassetid://1684280102"
		end
		if player.EquippedTool.Value == "M249" then
			player.Gun.Shoot.SoundId = "rbxassetid://193868290"
			player.Gun.bolt.SoundId = "rbxassetid://1158042711"
			player.Gun.boltin.SoundId = "rbxassetid://1158042903"
			player.Gun.boxin.SoundId = "rbxassetid://1158045048"
			player.Gun.boxout.SoundId = "rbxassetid://1158045203"
			player.Gun.bullets.SoundId = "rbxassetid://1158043093"
			player.Gun.close.SoundId = "rbxassetid://1158044531"
			player.Gun.open.SoundId = "rbxassetid://1158044816"
		end
		if player.EquippedTool.Value == "MP9" then
			player.Gun.Shoot.SoundId = "rbxassetid://222888810"
			player.Gun.bolt.SoundId = "rbxassetid://1684295316"
			player.Gun.boltin.SoundId = "rbxassetid://1684295598"
			player.Gun.magin.SoundId = "rbxassetid://1684294512"
			player.Gun.magout.SoundId = "rbxassetid://1684294744"
		end
		if player.EquippedTool.Value == "UMP" then
			player.Gun.Shoot.SoundId = "rbxassetid://206953341"
			player.Gun.bolt.SoundId = "rbxassetid://1684306766"
			player.Gun.boltin.SoundId = "rbxassetid://1684285841"
			player.Gun.magin.SoundId = "rbxassetid://1684306283"
			player.Gun.magout.SoundId = "rbxassetid://1684306521"
		end
		if player.EquippedTool.Value == "P90" then
			player.Gun.Shoot.SoundId = "rbxassetid://1665644012"
			player.Gun.bolt.SoundId = "rbxassetid://1684297105"
			player.Gun.boltin.SoundId = "rbxassetid://1684297300"
			player.Gun.maghit.SoundId = "rbxassetid://1684296035"
			player.Gun.magin.SoundId = "rbxassetid://1684296357"
			player.Gun.magout.SoundId = "rbxassetid://1684296652"
		end
		if player.EquippedTool.Value == "Bizon" then
			player.Gun.Equip.SoundId = "rbxassetid://485606203"
			player.Gun.Shoot.SoundId = "rbxassetid://1544325366"
			player.Gun.bolt.SoundId = "rbxassetid://1183581141"
			player.Gun.boltin.SoundId = "rbxassetid://1544325072"
			player.Gun.magin.SoundId = "rbxassetid://1505933747"
			player.Gun.magout.SoundId = "rbxassetid://1505933951"
		end
		if player.EquippedTool.Value == "Famas" then
			player.Gun.Shoot.SoundId = "rbxassetid://206953280"
			player.Gun.Switch.SoundId = "rbxassetid://240962650"
			player.Gun.bolt.SoundId = "rbxassetid://1684281554"
			player.Gun.boltin.SoundId = "rbxassetid://1684281882"
			player.Gun.maghit.SoundId = "rbxassetid://1684282232"
			player.Gun.magin.SoundId = "rbxassetid://1684282468"
			player.Gun.magout.SoundId = "rbxassetid://1684284000"
		end
		if player.EquippedTool.Value == "Scout" then
			player.Gun.Shoot.SoundId = "rbxassetid://2476571739"
			player.Gun.bolt.SoundId = "rbxassetid://516399716"
			player.Gun.boltin.SoundId = "rbxassetid://516399736"
			player.Gun.maghit.SoundId = "rbxassetid://516399754"
			player.Gun.magin.SoundId = "rbxassetid://516399767"
			player.Gun.magout.SoundId = "rbxassetid://516399791"
            player.Gun.Zoom.SoundId = "rbxassetid://2862871544"
            player.Gun.Zoom.PlaybackSpeed = 1
		end
		if player.EquippedTool.Value == "AUG" then
			player.Gun.Shoot.SoundId = "rbxassetid://1657593449"
			player.Gun.bolt.SoundId = "rbxassetid://1684276056"
			player.Gun.boltin.SoundId = "rbxassetid://1684276387"
			player.Gun.maghit.SoundId = "rbxassetid://1684276669"
			player.Gun.magin.SoundId = "rbxassetid://1684276943"
			player.Gun.magout.SoundId = "rbxassetid://1684277138"
		end
		if player.EquippedTool.Value == "AWP" then
			player.Gun.Shoot.SoundId = "rbxassetid://1112948895"
			player.Gun.bolt.SoundId = "rbxassetid://1684277591"
			player.Gun.boltin.SoundId = "rbxassetid://1684277363"
			player.Gun.maghit.SoundId = "rbxassetid://1684277814"
			player.Gun.magin.SoundId = "rbxassetid://1684278055"
			player.Gun.magout.SoundId = "rbxassetid://1684278254"
            player.Gun.Zoom.SoundId = "rbxassetid://2862871544"
            player.Gun.Zoom.PlaybackSpeed = 1
		end
		if player.EquippedTool.Value == "G3SG1" then
			player.Gun.Shoot.SoundId = "rbxassetid://340365815"
			player.Gun.bolt.SoundId = "rbxassetid://1684285559"
			player.Gun.boltin.SoundId = "rbxassetid://1684285841"
			player.Gun.maghit.SoundId = "rbxassetid://777244606"
			player.Gun.magin.SoundId = "rbxassetid://1684286087"
			player.Gun.magout.SoundId = "rbxassetid://1684286303"
	    player.Gun.Zoom.SoundId = "rbxassetid://1684300267"
            player.Gun.Zoom.PlaybackSpeed = 1
		end
		if player.EquippedTool.Value == "MAC10" then
			player.Gun.Shoot.SoundId = "rbxassetid://242422782"
			player.Gun.bolt.SoundId = "rbxassetid://1684293112"
			player.Gun.boltin.SoundId = "rbxassetid://1684293359"
			player.Gun.maghit.SoundId = "rbxassetid://1183581737"
			player.Gun.magin.SoundId = "rbxassetid://1684292666"
			player.Gun.magout.SoundId = "rbxassetid://1684292928"
		end
		if player.EquippedTool.Value == "SawedOff" then
			player.Gun.Shoot.SoundId = "rbxassetid://1158047483"
			player.Gun.bolt.SoundId = "rbxassetid://222889105"
			player.Gun.insert1.SoundId = "rbxassetid://1657167530"
			player.Gun.insert2.SoundId = "rbxassetid://1657167827"
			player.Gun.insert3.SoundId = "rbxassetid://1657168103"
			player.Gun.insert4.SoundId = "rbxassetid://1657167530"
			player.Gun.insert5.SoundId = "rbxassetid://1657167827"
		end
		if player.EquippedTool.Value == "CZ" then
			player.Gun.Shoot.SoundId = "rbxassetid://458727115"
			player.Gun.magin.SoundId = "rbxassetid://1684284159"
			player.Gun.magout.SoundId = "rbxassetid://1684284647"
			player.Gun.slide.SoundId = "rbxassetid://1684284931"
			player.Gun.slidein.SoundId = "rbxassetid://1684285158"
		end
		if player.EquippedTool.Value == "Nova" then
			player.Gun.Shoot.SoundId = "rbxassetid://206953213"
			player.Gun.bolt.SoundId = "rbxassetid://206953217"
			player.Gun.insert1.SoundId = "rbxassetid://1657167530"
			player.Gun.insert2.SoundId = "rbxassetid://1657167827"
			player.Gun.insert3.SoundId = "rbxassetid://1657168103"
			player.Gun.insert4.SoundId = "rbxassetid://1657167530"
			player.Gun.insert5.SoundId = "rbxassetid://1657167827"
		end
		if player.EquippedTool.Value == "XM" then
			player.Gun.Shoot.SoundId = "rbxassetid://202918888"
			player.Gun.bolt.SoundId = "rbxassetid://361445424"
			player.Gun.boltin.SoundId = "rbxassetid://361445427"
			player.Gun.insert1.SoundId = "rbxassetid://1657167530"
			player.Gun.insert2.SoundId = "rbxassetid://1657167827"
			player.Gun.insert3.SoundId = "rbxassetid://1657168103"
			player.Gun.insert4.SoundId = "rbxassetid://1657167530"
			player.Gun.insert5.SoundId = "rbxassetid://1657167827"
		end
		if player.EquippedTool.Value == "MAG7" then
			player.Gun.Shoot.SoundId = "rbxassetid://395724758"
			player.Gun.maghit.SoundId = "rbxassetid://515216161"
			player.Gun.magin.SoundId = "rbxassetid://395724624"
			player.Gun.magout.SoundId = "rbxassetid://395724665"
			player.Gun.pump.SoundId = "rbxassetid://206953217"
		end

		if player.EquippedTool.Value == "Negev" then
			player.Gun.Shoot.SoundId = "rbxassetid://396243767"
			player.Gun.bolt.SoundId = "rbxassetid://1158042711"
			player.Gun.boltin.SoundId = "rbxassetid://1158042903"
			player.Gun.bullets.SoundId = "rbxassetid://1158043093"
			player.Gun.lidclose.SoundId = "rbxassetid://1158044531"
			player.Gun.lidopen.SoundId = "rbxassetid://1158044816"
			player.Gun.magin.SoundId = "rbxassetid://1158045048"
			player.Gun.magout.SoundId = "rbxassetid://1158045203"
		end

		if player.EquippedTool.Value == "SG" then
			player.Gun.Shoot.SoundId = "rbxassetid://347270113"
			player.Gun.bolt.SoundId = "rbxassetid://1684300765"
			player.Gun.boltin.SoundId = "rbxassetid://1684301039"
			player.Gun.magin.SoundId = "rbxassetid://1684301939"
			player.Gun.magout.SoundId = "rbxassetid://1684302178"
		end
		if player.EquippedTool.Value == "T Knife" then
			player.Gun.Shoot1.SoundId = "rbxassetid://1665637464"
			player.Gun.Shoot2.SoundId = "rbxassetid://1665637740"
		end
		if player.EquippedTool.Value == "CT Knife" then
			player.Gun.Shoot1.SoundId = "rbxassetid://1665637464"
			player.Gun.Shoot2.SoundId = "rbxassetid://1665637740"
		end
        if player.EquippedTool.Value == "M4A4" then
			player.Gun.Equip.SoundId = "rbxassetid://1665638797"
			player.Gun.Shoot.SoundId = "rbxassetid://202918741"
			player.Gun.bolt.SoundId = "rbxassetid://1684291592"
			player.Gun.boltin.SoundId = "rbxassetid://1684291797"
			player.Gun.boltrelease.SoundId = "rbxassetid://1684291797"
			player.Gun.magin.SoundId = "rbxassetid://1684292119"
			player.Gun.magout.SoundId = "rbxassetid://1684292401"
		end
        if player.EquippedTool.Value == "FiveSeven" then
			player.Gun.Shoot.SoundId = "rbxassetid://212374232"
			player.Gun.magin.SoundId = "rbxassetid://1684284159"
			player.Gun.magout.SoundId = "rbxassetid://1684284647"
			player.Gun.slide.SoundId = "rbxassetid://1684284931"
			player.Gun.slidein.SoundId = "rbxassetid://1684285158"
		end
        if player.EquippedTool.Value == "Tec9" then
			player.Gun.Shoot.SoundId = "rbxassetid://206953317"
			player.Gun.bolt.SoundId = "rbxassetid://206953330"
			player.Gun.boltin.SoundId = "rbxassetid://206953326"
			player.Gun.magin.SoundId = "rbxassetid://206953325"
			player.Gun.magout.SoundId = "rbxassetid://206953321"
            player.Gun.Shoot.TimePosition = 0
		end
        if player.EquippedTool.Value == "R8" then
                    player.Gun.Shoot.SoundId = "rbxassetid://3292861902"
        player.Gun.Shoot.PlaybackSpeed = 1
        end
	end)
end)

end
end)

effects:Element("Toggle", "x-ray", {}, function(tbl)
if tbl.Toggle then
		for _,i in pairs(workspace:GetDescendants()) do
			if i:IsA("BasePart") and not i.Parent:FindFirstChild("Humanoid") and not i.Parent.Parent:FindFirstChild("Humanoid") then
				i.LocalTransparencyModifier = values.visuals.effects["map transparency"].Slider
			end
		end
else
			for _,i in pairs(workspace:GetDescendants()) do
			if i:IsA("BasePart") and not i.Parent:FindFirstChild("Humanoid") and not i.Parent.Parent:FindFirstChild("Humanoid") then
				i.LocalTransparencyModifier = 0
			end
		end
end
end)

effects:Element("Slider", "map transparency", {min = 0.0, max = 1.0, default = 0.5})
effects:Element("Slider", "time changer", {min = 0, max = 15, default = 0}, function(tbl)
    while wait() do
      if game.Lighting.ClockTime ~= tbl.Slider then
         game.Lighting.ClockTime = tbl.Slider
      end
   end
end)
effects:Element('Toggle', 'shadowmap technology', nil, function(val) sethiddenproperty(Lighting, 'Technology', val.Toggle and 'ShadowMap' or 'Legacy') end)

local self = visuals:Sector('self', 'Right')
self:Element('ToggleKeybind', 'third person', {}, function(tbl)
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Humanoid') then
		if tbl.Toggle then
			if tbl.Active then
				LocalPlayer.CameraMaxZoomDistance = values.visuals.self.distance.Slider
				LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider
				LocalPlayer.CameraMaxZoomDistance = values.visuals.self.distance.Slider
				LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider
			else
				LocalPlayer.CameraMaxZoomDistance = 0
				LocalPlayer.CameraMinZoomDistance = 0
				LocalPlayer.CameraMaxZoomDistance = 0
				LocalPlayer.CameraMinZoomDistance = 0
			end
		else
			LocalPlayer.CameraMaxZoomDistance = 0
			LocalPlayer.CameraMinZoomDistance = 0
		end
	end
end)
self:Element('Toggle', 'hide arms')

self:Element('Slider', 'distance', {min = 6, max = 18, default = 12}, function(tbl)
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Humanoid') then
		if values.visuals.self['third person'].Toggle then
			if values.visuals.self['third person'].Active then
				LocalPlayer.CameraMaxZoomDistance = tbl.Slider
				LocalPlayer.CameraMinZoomDistance = tbl.Slider
				LocalPlayer.CameraMaxZoomDistance = tbl.Slider
				LocalPlayer.CameraMinZoomDistance = tbl.Slider
			else
				LocalPlayer.CameraMaxZoomDistance = 0
				LocalPlayer.CameraMinZoomDistance = 0
			end
		else
			LocalPlayer.CameraMaxZoomDistance = 0
			LocalPlayer.CameraMinZoomDistance = 0
		end
	end
end)
LocalPlayer:GetPropertyChangedSignal('CameraMinZoomDistance'):Connect(function(current)
	if values.visuals.self['third person'].Toggle then
		if values.visuals.self['third person'].Active then
			if current ~= values.visuals.self.distance.Slider then
				LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider
			end
		end
	end
end)
self:Element('Slider', 'fov changer', {min = 0, max = 120, default = 80}, function(value)
	RunService.RenderStepped:Wait()
	if LocalPlayer.Character == nil then return end
	if fov == value.Slider then return end
	if values.visuals.self['on scope'].Toggle or not LocalPlayer.Character:FindFirstChild('AIMING') then
		Camera.FieldOfView = value.Slider
	end
end)
self:Element('Toggle', 'on scope')
self:Element('Toggle', 'viewmodel changer')
self:Element('Slider', 'viewmodel x', {min = -50, max = 50}, function(val)
	ViewmodelOffset = CFrame.new(values.visuals.self['viewmodel x'].Slider/7, values.visuals.self['viewmodel y'].Slider/7, values.visuals.self['viewmodel z'].Slider/7) * CFrame.Angles(0, 0, values.visuals.self.roll.Slider/50)
end)
self:Element('Slider', 'viewmodel y', {min = -50, max = 50}, function(val)
	ViewmodelOffset = CFrame.new(values.visuals.self['viewmodel x'].Slider/7, values.visuals.self['viewmodel y'].Slider/7, values.visuals.self['viewmodel z'].Slider/7) * CFrame.Angles(0, 0, values.visuals.self.roll.Slider/50)
end)
self:Element('Slider', 'viewmodel z', {min = -50, max = 50}, function(val)
	ViewmodelOffset = CFrame.new(values.visuals.self['viewmodel x'].Slider/7, values.visuals.self['viewmodel y'].Slider/7, values.visuals.self['viewmodel z'].Slider/7) * CFrame.Angles(0, 0, values.visuals.self.roll.Slider/50)
end)
self:Element('Slider', 'roll', {min = -100, max = 100}, function(val)
	ViewmodelOffset = CFrame.new(values.visuals.self['viewmodel x'].Slider/7, values.visuals.self['viewmodel y'].Slider/7, values.visuals.self['viewmodel z'].Slider/7) * CFrame.Angles(0, 0, values.visuals.self.roll.Slider/50)
end)
self:Element('ToggleColor', 'self chams', {default = {Color = Color3.fromRGB(255,255,255)}}, function(tbl)
	if tbl.Toggle then
		for _,obj in pairs(SelfObj) do
			if obj.Parent ~= nil then
				obj.Material = values.visuals.self['self material'].Dropdown
				obj.Color = tbl.Color
			end
		end
	else
		for _,obj in pairs(SelfObj) do
			if obj.Parent ~= nil then
				obj.Material = obj.OriginalMaterial.Value
				obj.Color = obj.OriginalColor.Value
			end
		end
	end
end)
self:Element('Dropdown', 'self material', {options = {'Plastic', 'Neon', 'ForceField', 'Glass'}})

self:Element('Slider', 'scope blend', {min = 0, max = 100, default = 0})

local ads = Client.updateads
Client.updateads = function(self, ...)
	local args = {...}
	coroutine.wrap(function()
		wait()
		if LocalPlayer.Character ~= nil then
			for _,part in pairs(LocalPlayer.Character:GetDescendants()) do
				if part:IsA('Part') or part:IsA('MeshPart') then
					if part.Transparency ~= 1 then
						part.Transparency = LocalPlayer.Character:FindFirstChild('AIMING') and values.visuals.self['scope blend'].Slider/100 or 0
					end
				end
				if part:IsA('Accessory') then
					part.Handle.Transparency = LocalPlayer.Character:FindFirstChild('AIMING') and values.visuals.self['scope blend'].Slider/100 or 0
				end
			end
		end
	end)()
	return ads(self, ...)
end
local trail = visuals:Sector('trail', 'Left')

trail:Element('Toggle', 'enable', {Toggle = true})

trail:Element('Toggle', 'face camera', {Toggle = false})

trail:Element('ToggleColor', 'custom color', {default = {Color = Color3.fromRGB(255,255,255)}})

trail:Element('Slider', 'size (x,z)', {min = 1, max = 50, default = 10})

trail:Element('Slider', 'offset (y)', {min = 1, max = 50, default = 10})

trail:Element('Slider', 'max length', {min = 1, max = 100, default = 20})

trail:Element('TextBox', 'image', {placeholder = 'image id here'})

local world = visuals:Sector('world', 'Left')
world:Element('ToggleTrans', 'molly radius', {default = {Color = Color3.fromRGB(255,0,0)}}, function(tbl)
	if RayIgnore:FindFirstChild('Fires') == nil then return end
	if tbl.Toggle then
		for i,fire in pairs(RayIgnore:FindFirstChild('Fires'):GetChildren()) do
			fire.Transparency = tbl.Transparency
			fire.Color = tbl.Color
		end
	else
		for i,fire in pairs(RayIgnore:FindFirstChild('Fires'):GetChildren()) do
			fire.Transparency = 1
		end
	end
end)
world:Element('ToggleColor', 'smoke radius', {default = {Color = Color3.fromRGB(0, 255, 0)}}, function(tbl)
	if RayIgnore:FindFirstChild('Smokes') == nil then return end
	if tbl.Toggle then
		for i,smoke in pairs(RayIgnore:FindFirstChild('Smokes'):GetChildren()) do
			smoke.Transparency = 0
			smoke.Color = tbl.Color
		end
	else
		for i,smoke in pairs(RayIgnore:FindFirstChild('Smokes'):GetChildren()) do
			smoke.Transparency = 1
		end
	end
end)
world:Element('ToggleTrans', 'bullet tracers', {default = {Color = Color3.fromRGB(0, 0, 255)}})
world:Element('Dropdown', 'tracers material', {options = {'Smooth', 'Flat', 'ForceField', 'Glass'}})
world:Element('Slider', 'tracers duration', {min = 1, max = 5, default = 3})
world:Element('Slider', 'tracers thickness', {min = 0, max = 100, default = 0})

world:Element("ToggleColor", "bullet tracers2", {default = {Color = Color3.fromRGB(255, 255, 255)}})
world:Element('Dropdown', 'tracers2', {options = {'Beamer', 'BS', 'Line'}})
world:Element('Slider', 'duration2', {min = 0, max = 10, default = 0.5})
local Folder = Instance.new("Folder")
	Folder.Parent = game:GetService("Workspace")

	local Settings = {
		StartColor = Color3.new(1, 1, 1),
		EndColor = Color3.new(1, 0, 0),
		StartWidth = 0.63,
		EndWidth = 0.63,
		ShowImpactPoint = false,
		ImpactTransparency = 0,
		ImpactColor = Color3.new(1, 1, 1),
		Time = values.visuals.world['duration2'].Slider
	}
	local funcs = {}
	function createbullettracer2(v1, v2)
		local colorSequence = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Settings.StartColor),
			ColorSequenceKeypoint.new(1, Settings.EndColor),
		})
	local Part = Instance.new("Part")
	Part.CanCollide = false
	Part.CFrame = CFrame.new(v1)
	Part.Size = Vector3.new(0, 0, 0)
	Part.TopSurface = Enum.SurfaceType.Smooth
	Part.Parent = Folder
	Part.Transparency = Settings.ShowImpactPoint and Settings.ImpactTransparency or 1
	Part.Anchored = true


	local Part2 = Instance.new("Part")

	Part2.CFrame = CFrame.new(v2)
	Part2.Size = Vector3.new(0, 0, 0)
	Part2.Transparency = Settings.ShowImpactPoint and Settings.ImpactTransparency or 1
	Part2.Parent = Folder
	Part2.Anchored = true
	Part2.CanCollide = false
		
	local Object1 = Instance.new("Attachment")
	Object1.Name = "1"
	Object1.Parent = Part

	local Object2 = Instance.new("Attachment")
	Object2.Name = "2"
	Object2.Parent = Part2

	local Beam = Instance.new("Beam")
	Beam.Attachment0 = Object1
	Beam.Attachment1 = Object2
	Beam.LightInfluence = 1
	Beam.Texture = values.visuals.world["tracers2"].Dropdown == "Line" and "rbxassetid://4872917021" or values.visuals.world["tracers2"].Dropdown == "BS" and "rbxassetid://446111271" or values.visuals.world["tracers2"].Dropdown == "Beamer" and "rbxassetid://1825953680"
	Beam.Parent = Folder
	Beam.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, values.visuals.world["bullet tracers2"].Color), ColorSequenceKeypoint.new(1, values.visuals.world["bullet tracers2"].Color)}
	delay(Settings.Time, function()
		for i = 0.5, 1, 0.02 do
			wait()
			Beam.Transparency = NumberSequence.new(i)
		end
		Part:Destroy()
		Part2:Destroy()
	end)
end

world:Element('ToggleTrans', 'impacts', {default = {Color = Color3.fromRGB(255, 0, 0)}})
world:Element('Dropdown', 'impacts material', {options = {'Smooth', 'Flat', 'ForceField', 'Glass'}})
world:Element('Slider', 'impacts duration', {min = 1, max = 5, default = 3})
world:Element('Slider', 'impacts thickness', {min = 0, max = 100, default = 0})

world:Element('ToggleTrans', 'hit chams', {default = {Color = Color3.fromRGB(0, 0, 255)}})
world:Element('Dropdown', 'hit material', {options = {'Smooth', 'Flat', 'ForceField', 'Glass'}})
world:Element('Slider', 'hit duration', {min = 1, max = 5, default = 3})

world:Element('Dropdown', 'hitsound', {options = {'none', 'skeet', 'neverlose', 'rust', 'bag', 'baimware', 'nn dog', 'retro', 'tf2'}})
world:Element('TextBox', 'customsound', {placeholder = 'sound id here'})

world:Element('Dropdown', 'killsound', {options = {'none', 'skeet', 'neverlose', 'rust', 'bag', 'baimware', 'nn dog', 'retro', 'tf2'}})

world:Element('Slider', 'sound volume', {min = 1, max = 5, default = 3})
world:Element('Dropdown', 'skybox', {options = {'none', 'nebula', 'vaporwave', 'clouds'}}, function(tbl)
	local sky = tbl.Dropdown
	if sky ~= 'none' then
		if Lighting:FindFirstChildOfClass('Sky') then Lighting:FindFirstChildOfClass('Sky'):Destroy() end
		local skybox = Instance.new('Sky')
		skybox.SkyboxLf = Skyboxes[sky].SkyboxLf
		skybox.SkyboxBk = Skyboxes[sky].SkyboxBk
		skybox.SkyboxDn = Skyboxes[sky].SkyboxDn
		skybox.SkyboxFt = Skyboxes[sky].SkyboxFt
		skybox.SkyboxRt = Skyboxes[sky].SkyboxRt
		skybox.SkyboxUp = Skyboxes[sky].SkyboxUp
		skybox.Name = 'override'
		skybox.Parent = Lighting
	else
		if Lighting:FindFirstChildOfClass('Sky') then Lighting:FindFirstChildOfClass('Sky'):Destroy() end
		if oldSkybox ~= nil then oldSkybox:Clone().Parent = Lighting end
	end
end)
world:Element('ToggleColor', 'item esp', {default = {Color = Color3.fromRGB(255, 255, 255)}}, function(tbl)
	for i,weapon in pairs(workspace.Debris:GetChildren()) do
		if weapon:IsA('BasePart') and Weapons:FindFirstChild(weapon.Name) then
			weapon.BillboardGui.ImageLabel.Visible = tbl.Toggle and table.find(values.visuals.world['types'].Jumbobox, 'icon') and true or false
		end
	end
end)
world:Element('Jumbobox', 'types', {options = {'icon'}}, function(tbl)
	for i,weapon in pairs(workspace.Debris:GetChildren()) do
		if weapon:IsA('BasePart') and Weapons:FindFirstChild(weapon.Name) then
			weapon.BillboardGui.ImageLabel.Visible = values.visuals.world['item esp'].Toggle and table.find(tbl.Jumbobox, 'icon') and true or false
			weapon.BillboardGui.ImageLabel.ImageColor3 = values.visuals.world['item esp'].Color
		end
	end
end)
local configs = misc:Sector('configs', 'Left')
configs:Element('TextBox', 'config', {placeholder = 'config name', Triggers = false})
configs:Element('Button', 'save', {}, function() if values.misc.configs.config.Text ~= '' then library:SaveConfig(values.misc.configs.config.Text) end end)
configs:Element('Button', 'load', {}, function() if values.misc.configs.config.Text ~= '' then ConfigLoad:Fire(values.misc.configs.config.Text) end end)
configs:Element('Toggle', 'keybind list', nil, function(tbl)
	library:SetKeybindVisible(tbl.Toggle)
end)

local server = misc:Sector("server", "Right")

server:Element("Button", "Rejoin", nil, function()
tpservice= game:GetService("TeleportService")
plr = game.Players.LocalPlayer

tpservice:Teleport(game.PlaceId, plr)
end)
server:Element("Button", "Serverhop", nil, function()
	local x = {}
	for _, v in ipairs(game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")).data) do
		if type(v) == "table" and v.maxPlayers > v.playing and v.id ~= game.JobId then
			x[#x + 1] = v.id
		end
	end
	if #x > 0 then
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, x[math.random(1, #x)])
	else
		return print("Failed")
	end
end)

server:Element("Button", "Discord invite", {}, function() 
	setclipboard("https://discord.gg/AGXpEgqkqn") 
end)

local advanced = misc:Sector("advanced", "Right")
advanced:Element("ToggleKeybind", "god mode", nil, function(tbl)
    if tbl.Toggle and tbl.Active then
        local ReplicatedStorage = game:GetService("ReplicatedStorage");
        local ApplyGun = ReplicatedStorage.Events.ApplyGun;
        ApplyGun:FireServer({
        Model = ReplicatedStorage.Hostage.Hostage,
        Name = "USP"
        }, game.Players.LocalPlayer);
    end 
end)
advanced:Element("ToggleKeybind", "noclip")
        local NoclipLoop = RunService.Stepped:Connect(function()
            if not LocalPlayer.Character then return end
            if not values.misc.advanced["noclip"].Toggle and not values.misc.advanced["noclip"].Toggle then return end
            for _,part in pairs (LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide == true then
                    part.CanCollide = false
                end
            end
        end)
advanced:Element("ToggleKeybind", "fly mode", {}, function(tbl)
if tbl.Toggle then
		FlyLoop = RunService.Stepped:Connect(function()
		if not (tbl.Toggle) then FlyLoop:Disconnect() return end
				spawn(function()
					pcall(function()
						local velocity = Vector3.new(0, 1, 0)
						
						if UserInputService:IsKeyDown(Enum.KeyCode.W) then
							velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * values.misc.advanced["fly speed"].Slider)
						end
						if UserInputService:IsKeyDown(Enum.KeyCode.A) then
							velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * -values.misc.advanced["fly speed"].Slider)
						end
						if UserInputService:IsKeyDown(Enum.KeyCode.S) then
							velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * -values.misc.advanced["fly speed"].Slider)
						end
						if UserInputService:IsKeyDown(Enum.KeyCode.D) then
							velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * values.misc.advanced["fly speed"].Slider)
						end
						
						LocalPlayer.Character.HumanoidRootPart.Velocity = velocity
						LocalPlayer.Character.Humanoid.PlatformStand = true
					end)
				end)
		end)
		
		NoclipLoop = RunService.Stepped:Connect(function()
		if not (tbl.Toggle) then NoclipLoop:Disconnect() return end
			for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
				if v:IsA("BasePart") and v.CanCollide == true then
					v.CanCollide = false
				end
			end
		end)
	end
end)
advanced:Element("Slider", "fly speed", {min = 1, max = 100, default = 16})
advanced:Element("Button", "destroy stormy", {}, function()
    game.Players.localPlayer.Character.UpperTorso.Waist:Destroy()
end)

--                  not working rn
--[[
advanced:Element('Button', 'destroy gui', {}, function()
	game.CoreGui('electric boogalo'):Destroy()
    game.CoreGui('watermark'):Destroy()
	game.CoreGui('fl indicator'):Destroy()
    game.CoreGui('KeybindList'):Destroy()
	game.CoreGui('Spec'):Destroy()
end)


advanced:Element('Button', 'destroy gui', {}, function()
if coregui:FindFirstChild('electric boogalo') and coregui:FindFirstChild('watermark') and coregui:FindFirstChild('fl indicator') and coregui:FindFirstChild('Spec') and coregui:FindFirstChild('KeybindList') then
	coregui:FindFirstChild('electric boogalo'):FindFirstChild('UIScale'):Destroy()
	coregui:FindFirstChild('electric boogalo'):FindFirstChild('TextButton'):Destroy()
	coregui:FindFirstChild('electric boogalo'):FindFirstChild('cursor'):Destroy()
	coregui:FindFirstChild('electric boogalo'):FindFirstChild('Menu'):Destroy()
	coregui:FindFirstChild('watermark'):FindFirstChild('watermark'):Destroy()
	coregui:FindFirstChild('fl indicator'):FindFirstChild('wgrgerqgerq'):Destroy()
    coregui:FindFirstChild('KeybindList'):FindFirstChild('TextLabel'):Destroy()
	coregui:FindFirstChild('Spec'):FindFirstChild('holder'):Destroy()
end
end)
]]--

--                  not working rn
--[[
local Backtrack = misc:Sector("Backtrack", "Right")

Backtrack:Element("ToggleColor", "enabled", {}, function(tbl)
	if tbl.Toggle then
		Backtracking = RunService.RenderStepped:Connect(function()
			if IsAlive(LocalPlayer) then
				for i,v in pairs(game.Players:GetPlayers()) do
					if IsAlive(v) and GetTeam(v) ~= GetTeam(LocalPlayer) then
						local NewBacktrackPart = Instance.new("Part")
						NewBacktrackPart.Name = v.Name
						NewBacktrackPart.Anchored = true
						NewBacktrackPart.CanCollide = false
						NewBacktrackPart.Transparency = values.misc.Backtrack["Transparency (0.01 = 1)"].Slider/100
						NewBacktrackPart.Color = tbl.Color
						NewBacktrackPart.Size = v.Character.Head.Size
						NewBacktrackPart.CFrame = v.Character.Head.CFrame
						NewBacktrackPart.Parent = backtrackfolder
						
						local BacktrackTag = Instance.new("ObjectValue")
						BacktrackTag.Parent = NewBacktrackPart
						BacktrackTag.Name = "PlayerName"
						BacktrackTag.Value = v
						spawn(function() -- values.misc.movement["noclip"].Toggle
							wait(values.misc.Backtrack["Time (ms)"].Slider/1000)
							NewBacktrackPart:Destroy()
						end)
					end
				end
			end
		end)
	else
		Backtracking:Disconnect()
	end
end)

Backtrack:Element("Slider", "Time (ms)", {min = 0, max = 1000, default = 200})
Backtrack:Element("Slider", "Transparency (0.01 = 1)", {min = 1, max = 100, default = 0})
]]--
local client = misc:Sector('client', 'Right')

client:Element('Toggle', 'auto join team')
client:Element('Dropdown', 'team', {options = {'CT', 'T'}})

client:Element('Toggle', 'infinite cash', nil, function(tbl)
	if tbl.Toggle then
		LocalPlayer.Cash.Value = 8000
	end
end)

client:Element('Toggle', 'infinite crouch')
client:Element('Jumbobox', 'damage bypass', {options = {'fire', 'fall'}})
client:Element('Jumbobox', 'gun modifiers', {options = {'recoil', 'spread', 'reload', 'equip', 'ammo', 'automatic', 'penetration', 'firerate'}})
client:Element('Toggle', 'remove killers', {}, function(tbl)
	if tbl.Toggle then
		if workspace:FindFirstChild('Map') and workspace:FindFirstChild('Map'):FindFirstChild('Killers') then
			local clone = workspace:FindFirstChild('Map'):FindFirstChild('Killers'):Clone()
			clone.Name = 'KillersClone'
			clone.Parent = workspace:FindFirstChild('Map')

			workspace:FindFirstChild('Map'):FindFirstChild('Killers'):Destroy()
		end
	else
		if workspace:FindFirstChild('Map') and workspace:FindFirstChild('Map'):FindFirstChild('KillersClone') then
			workspace:FindFirstChild('Map'):FindFirstChild('KillersClone').Name = 'Killers'
		end
	end
end)
client:Element('ToggleColor', 'hitmarker', {default = {Color = Color3.fromRGB(255,255,255)}})
client:Element('Toggle', 'buy any grenade')
client:Element('Toggle', 'chat alive')
client:Element('Jumbobox', 'shop', {options = {'inf time', 'anywhere'}})
client:Element('Toggle', 'anti spectate')

local oldgrenadeallowed = Client.grenadeallowed
Client.grenadeallowed = function(...)
	if values.misc.client['buy any grenade'].Toggle then
		return true
	end

	return oldgrenadeallowed(...)
end

local movement = misc:Sector('movement', 'Left')
movement:Element('Toggle', 'bunny hop')
movement:Element('Dropdown', 'direction', {options = {'forward', 'directional', 'directional 2'}})
movement:Element('Dropdown', 'type', {options = {'gyro', 'cframe', 'velocity' , 'idk'}})
movement:Element('Slider', 'speed', {min = 0, max = 200, default = 40})
movement:Element('ToggleKeybind', 'overwrite')
movement:Element('Slider', 'overwrite speed', {min = 0, max = 200, default = 40})
movement:Element('Toggle', 'no gun')

movement:Element('Toggle', 'no velocity')

movement:Element('ToggleKeybind', 'no launch')

movement:Element('Slider', 'launch block (y velocity)', {min = 0, max = 100, default = 40})

movement:Element('ToggleKeybind', 'jump bug')
movement:Element('ToggleKeybind', 'edge jump')
movement:Element('ToggleKeybind', 'edge bug')

movement:Element('ToggleKeybind', 'gravity change')
movement:Element('Slider', 'gravity amount', {min = 0, max = 300, default = 80})

movement:Element('Toggle', 'height change')
movement:Element('Slider', 'height amount', {min = -35, max = 35, default = 0})

movement:Element('Toggle', 'client offset')
movement:Element('Slider', 'offset (y)', {min = -45, max = 45, default = 0})

local chat = misc:Sector('chat', 'Left')
chat:Element('Toggle', 'chat spam', nil, function(tbl)
	if tbl.Toggle then
		while values.misc.chat['chat spam'].Toggle do
			game:GetService('ReplicatedStorage').Events.PlayerChatted:FireServer(textboxtriggers(values.misc.chat['spam message'].Text), false, 'Innocent', false, true)
			wait(values.misc.chat['speed (ms)'].Slider/1000)
		end
	end
end)
chat:Element('TextBox', 'spam message', {placeholder = 'message'})
chat:Element('Slider', 'speed (ms)', {min = 150, max = 1000, default = 500})
chat:Element('Toggle', 'kill say')
chat:Element('TextBox', 'message', {placeholder = 'message'})
chat:Element('Toggle', 'no filter')

local grenades = misc:Sector('grenades', 'Right')
grenades:Element('ToggleKeybind', 'spam grenades')
coroutine.wrap(function()
	while true do
		wait(0.5)
		if values.misc.grenades['spam grenades'].Toggle and values.misc.grenades['spam grenades'].Active then
			local oh1 = game:GetService('ReplicatedStorage').Weapons[values.misc.grenades.grenade.Dropdown].Model
			local oh3 = 25
			local oh4 = 35
			local oh6 = ''
			local oh7 = ''
			game:GetService('ReplicatedStorage').Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7)
		end
	end
end)()

grenades:Element('Dropdown', 'grenade', {options = {'Flashbang', 'Smoke Grenade', 'Molotov', 'HE Grenade', 'Decoy Grenade'}})
grenades:Element('Button', 'grenade crash', {}, function()
	RunService.RenderStepped:Connect(function()
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('UpperTorso') then
			local oh1 = game:GetService('ReplicatedStorage').Weapons[values.misc.grenades.grenade.Dropdown].Model
			local oh3 = 25
			local oh4 = 35
			local oh6 = ''
			local oh7 = ''
			game:GetService('ReplicatedStorage').Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7)
			game:GetService('ReplicatedStorage').Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7)
			game:GetService('ReplicatedStorage').Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7)
		end
	end)
end)
grenades:Element("Button", "crash server", {}, function()      
	while true do
        pcall(function()
            game:GetService("RunService").RenderStepped:Wait()
            for i = 1,100,1 do
                local ohInstance1 = LocalPlayer.Character.Gun.Mag																																																																									-- Server Crasher exploit by property (Mexicanhook). mis hermanos solo usan mexicanhook
                
                game:GetService("ReplicatedStorage").Events.DropMag:FireServer(ohInstance1)
            end
        end)
	end   
end)

local Dance = Instance.new('Animation')
Dance.AnimationId = ''
Dance.Name = 'Dance'

local LoadedAnim

local animations = misc:Sector('animations', 'Right')
animations:Element('ToggleKeybind', 'enabled', nil)

animations:Element('Slider', 'animation speed', {min = 0, max = 100, default = 1}, function()
	pcall(function()
		LoadedAnim:Stop()
	end)
end)

local animationsplay = {
	['idle'] = 'rbxassetid://2510196951',
	['fall over'] = 'rbxassetid://3716468774',
	['float'] = 'rbxassetid://1467170425',
	['sit down'] = 'rbxassetid://1467173451',
	['crouch'] = 'rbxassetid://896341616',
	['crunch'] = 'rbxassetid://4526742158',
    ['end spin'] = 'rbxassetid://6157859952',
	['headless pass'] = 'rbxassetid://5819194191',
	['floss'] = 'rbxassetid://5917459365',
	['default'] = 'rbxassetid://3732699835',
    ['Nothing'] = 'rbxassetid://2597335002',
	['toy walk'] = 'rbxassetid://6080889050',
	['laugh'] = 'rbxassetid://4529383951',
    ['Praisin'] = 'rbxassetid://2804019904',
	['grabbed'] = 'rbxassetid://5855133419',
	['getting eaten'] = 'rbxassetid://5855127786',
    ['No Touchin'] = 'rbxassetid://2805054405',
    ['Default'] = 'rbxassetid://3732699835',
    ['Thriller'] = 'rbxassetid://4174360426',
    ['Showtime Swing'] = 'rbxassetid://4802193849',
    ['Skateboard'] = 'rbxassetid://3725767158',
    ['Crazy Chainsaw'] = 'rbxassetid://5822705079',
    ['Summer Slack'] = 'rbxassetid://3226145532',
--  ['happy sit'] = 'rbxassetid://2743669791',
--  ['Break Neck'] = 'rbxassetid://9130448580'
	['air sit'] = 'rbxassetid://5593420812',
	['sleep'] = 'rbxassetid://4165553098',
	['flying ragdoll'] = 'rbxassetid://5855128842',
	['naruto run'] = 'rbxassetid://4189480820',
	['hands on head'] = 'rbxassetid://6698274740',
	['sit'] = 'rbxassetid://507768133',
    ['Fake walk'] = 'rbxassetid://1330180905',
    ['Fake jump'] = 'rbxassetid://896586529',
    ['Fake sit'] = 'rbxassetid://507768133',
    ['Fake walk'] = 'rbxassetid://1330180905',
    ['Fake swim'] = 'rbxassetid://616119360',
    ['sexy'] = 'rbxassetid://7465981288',
    ['OTR Dance'] = 'rbxassetid://5937560570',
    ['Dorky Dance'] = 'rbxassetid://4212455378',
    ['Monkey'] = 'rbxassetid://3333499508',
    ['Hips Poppin'] = 'rbxassetid://6797888062',
    ['Line Dance'] = 'rbxassetid://4049037604'
}

local animlist = {}

for a,b in next, animationsplay do 
	table.insert(animlist, a)
end
animations:Element('Dropdown', 'animation', {options = animlist}, function(tbl)
	pcall(function()
		LoadedAnim:Stop()
	end)

	Dance.AnimationId = animationsplay[tbl.Dropdown]
end)

animations:Element('TextBox', 'custom animation', {placeholder = 'animation id'}, function(tbl)
	pcall(function()
		LoadedAnim:Stop()
	end)

	Dance.AnimationId = 'rbxassetid://'..tbl.Text
end)

local loadouts = misc:Sector("loadouts", "Right")
loadouts:Element("Button", "G3SG1", {}, function()
-- pasted from google
local gun = "G3SG1" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 8, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
-- pasted from google
local gun = "DesertEagle" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 7, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
end)
loadouts:Element("Button", "AK47", {}, function()
-- pasted from google
local gun = "AK47" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 8, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
-- pasted from google
local gun = "DesertEagle" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 7, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
end)
loadouts:Element("Button", "AWP", {}, function()
-- pasted from google
local gun = "AWP" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 8, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
-- pasted from google
local gun = "DesertEagle" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 7, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
end)
loadouts:Element("Button", "Scout", {}, function()
-- pasted from google
local gun = "Scout" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 8, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
-- pasted from google
local gun = "DesertEagle" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 7, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
end)
loadouts:Element("Button", "early G3SG1", {}, function()
    -- pasted from google
local gun = "G3SG1" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 7, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
end)
loadouts:Element("Button", "DualBerettas", {}, function()
-- pasted from google
local gun = "DualBerettas" -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, 7, gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
end)

local loadout1 = misc:Sector('loadout1', 'Right')

local function longasscode()
return (values.more['loadout1']['what slot'].Dropdown == 'knife' and 5 or values.more['loadout1']['what slot'].Dropdown == 'primary' and 8 or values.more['loadout1']['what slot'].Dropdown == 'pistol' and 7 or values.more['loadout1']['what slot'].Dropdown == 'grenade 1' and 9 or values.more['loadout1']['what slot'].Dropdown == 'grenade 2' and 10 or values.more['loadout1']['what slot'].Dropdown == 'grenade 3' and 11 or values.more['loadout1']['what slot'].Dropdown == 'grenade 4' and 12 or values.more['loadout1']['what slot'].Dropdown == 'bomb' and 13)
end

loadout1:Element('Button', 'hook weapon', {}, function()
-- pasted from google
local gun = values.more['loadout1']['weapon'].Scroll[values.more['loadout1']['weapon'].Dropdown] -- AWP, AK47, G3SG1, ect.
local givefunc
for _, v in pairs(getgc()) do
local parentScript = rawget(getfenv(v), "script")

    if type(v) == "function" and parentScript == game:GetService("Players").LocalPlayer.PlayerGui.Client and islclosure(v) and not is_synapse_function(v) and debug.getinfo(v).name == "giveTool" then
        givefunc = v
        break
    end
end
debug.setupvalue(givefunc, longasscode(), gun) -- index 7 = secondary wep, index 8 = primary wep (i think lol. forgor)
end)

local mydadbeatsme = { 
    Pistol = {"USP", "P2000", "Glock", "DualBerettas", "P250", "FiveSeven", "Tec9", "CZ", "DesertEagle", "R8"}, 
    SMG = {"MP9", "MAC10", "MP7", "UMP", "P90", "Bizon"}, 
    Rifle = {"M4A4", "M4A1", "AK47", "Famas", "Galil", "AUG", "SG"}, 
    Sniper = {"AWP", "Scout", "G3SG1"},
    Other = {"XM", "Nova", "M249", "MAG7", "Negev", "SawedOff"},
    C4 = {"C4"}
} 

loadout1:Element('Dropdown', 'what slot', {options = {'knife', 'primary', 'pistol', 'grenade 1', 'grenade 2', 'grenade 3', 'grenade 4', 'bomb'}})
loadout1:Element('ScrollDrop', 'weapon', {options = mydadbeatsme})

local crosshaireditor = misc:Sector('crosshair editor', 'Right')
local function UpdateCrosshair()
	if values.misc['crosshair editor'].enabled.Toggle then
		local length = values.misc['crosshair editor'].length.Slider
		PlayerGui.GUI.Crosshairs.Crosshair.LeftFrame.Size = UDim2.new(0, length, 0, 2)
		PlayerGui.GUI.Crosshairs.Crosshair.RightFrame.Size = UDim2.new(0, length, 0, 2)
		PlayerGui.GUI.Crosshairs.Crosshair.TopFrame.Size = UDim2.new(0, 2, 0, length)
		PlayerGui.GUI.Crosshairs.Crosshair.BottomFrame.Size = UDim2.new(0, 2, 0, length)
		for _,frame in pairs(PlayerGui.GUI.Crosshairs.Crosshair:GetChildren()) do
			if string.find(frame.Name, 'Frame') then
				frame.BorderColor3 = Color3.new(0,0,0)
				if values.misc['crosshair editor'].border.Toggle then
					frame.BorderSizePixel = 1
				else
					frame.BorderSizePixel = 0
				end
			end
		end
	else
		PlayerGui.GUI.Crosshairs.Crosshair.LeftFrame.Size = UDim2.new(0, 10, 0, 2)
		PlayerGui.GUI.Crosshairs.Crosshair.RightFrame.Size = UDim2.new(0, 10, 0, 2)
		PlayerGui.GUI.Crosshairs.Crosshair.TopFrame.Size = UDim2.new(0, 2, 0, 10)
		PlayerGui.GUI.Crosshairs.Crosshair.BottomFrame.Size = UDim2.new(0, 2, 0, 10)
		for _,frame in pairs(PlayerGui.GUI.Crosshairs.Crosshair:GetChildren()) do
			if string.find(frame.Name, 'Frame') then
				frame.BorderSizePixel = 0
			end
		end
	end
end
crosshaireditor:Element('Toggle', 'enabled', nil, UpdateCrosshair)
crosshaireditor:Element('Slider', 'length', {min = 1, max = 15, default = 10}, UpdateCrosshair)
crosshaireditor:Element('Toggle', 'border', nil, UpdateCrosshair)

watermarkthemes = {}
watermarklocation = nil
fonts = {
	'Legacy',
	'Arial',
	'ArialBold',
	'SourceSans',
	'SourceSansBold',
	'SourceSansSemibold',
	'SourceSansLight',
	'SourceSansItalic',
	'Bodoni',
	'Garamond',
	'Cartoon',
	'Code',
	'Highway',
	'SciFi',
	'Arcade',
	'Fantasy',
	'Antique',
	'Gotham',
	'GothamSemibold',
	'GothamBold',
	'GothamBlack',
	'AmaticSC',
	'Bangers',
	'Creepster',
	'DenkOne',
	'Fondamento',
	'FredokaOne',
	'GrenzeGotisch',
	'IndieFlower',
	'JosefinSans',
	'Jura',
	'Kalam',
	'LuckiestGuy',
	'Merriweather',
	'Michroma',
	'Nunito',
	'Oswald',
	'PatrickHand',
	'PermanentMarker',
	'Roboto',
	'RobotoCondensed',
	'RobotoMono',
	'Sarpanch',
	'SpecialElite',
	'TitilliumWeb',
	'Ubuntu',
}

do
	local watermark = Instance.new('ScreenGui')
	local watermark_2 = Instance.new('Frame')
	local title = Instance.new('TextLabel')
	local none = Instance.new('UIGradient')
	local linetop = Instance.new('UIGradient')
	local linetopandbottem = Instance.new('UIGradient')
	local shadowatbottem = Instance.new('UIGradient')
	local shadowattop = Instance.new('UIGradient')
	local shadowattopandbottom = Instance.new('UIGradient')

	watermarklocation = watermark

	watermark.Name = 'watermark'
	watermark.Parent = game.CoreGui
	watermark.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	watermark_2.Name = 'watermark'
	watermark_2.Parent = watermark
	watermark_2.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
	watermark_2.BorderColor3 = Color3.fromRGB(255, 255, 255)
	watermark_2.Position = UDim2.new(0.912, 0, 0.00858895481, 0)
	watermark_2.Size = UDim2.new(0, 89, 0, 20)
	
	title.Name = 'title'
	title.Parent = watermark_2
	title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	title.BackgroundTransparency = 1.000
	title.Position = UDim2.new(0, 0, 0.0597654358, 0)
	title.Size = UDim2.new(0, 0, 0, 18)
	title.Font = Enum.Font.Nunito
	title.LineHeight = 1.21
	title.Text = '         yes.no'
	title.TextColor3 = Color3.fromRGB(255, 255, 255)
	title.TextSize = 16.000
	title.TextStrokeColor3 = Color3.fromRGB(25, 25, 25)
	title.TextStrokeTransparency = 0.000
	title.TextXAlignment = Enum.TextXAlignment.Left

	none.Enabled = false
	none.Color =ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
	none.Rotation = 0
	none.Name = 'none'
	none.Parent = watermark_2

	linetop.Enabled = false
	linetop.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(0.00, Color3.fromRGB(56, 56, 56)), ColorSequenceKeypoint.new(0.00, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(0.99, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
	linetop.Rotation = -90
	linetop.Name = 'linetop'
	linetop.Parent = watermark_2
	
	shadowatbottem.Enabled = false
	shadowatbottem.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
	shadowatbottem.Rotation = 90
	shadowatbottem.Name = 'shadowatbottem'
	shadowatbottem.Parent = watermark_2

	shadowattop.Enabled = false
	shadowattop.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
	shadowattop.Rotation = -90
	shadowattop.Name = 'shadowattop'
	shadowattop.Parent = watermark_2

	shadowattopandbottom.Enabled = false
	shadowattopandbottom.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(25, 25, 25)), ColorSequenceKeypoint.new(0.59, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 25, 25))}
	shadowattopandbottom.Rotation = -90
	shadowattopandbottom.Name = 'shadowattopandbottom'
	shadowattopandbottom.Parent = watermark_2

	for a,b in next, watermark_2:GetChildren() do -- inserts all the theme names into 'watermarkthemes'
		if b:IsA('UIGradient') then
			table.insert(watermarkthemes, b.Name)
		end
	end
end

local ui = misc:Sector('ui', 'Left')


ui:Element('Toggle', 'spectate list', {default = {Toggle = false}}, function(tbl)
	specmenu.Enabled = tbl.Toggle
end)

ui:Element('ToggleColor', 'ui border', {default = {Color = Color3.fromRGB(255,255,255)}},function() colorchanger:Fire() end)

ui:Element('ToggleColor', 'ui cursor', {default = {Color = Color3.fromRGB(255,255,255)}},function() colorchanger:Fire() end)

ui:Element('ToggleColor', 'ui toggle box', {default = {Color = Color3.fromRGB(255,255,255)}},function() colorchanger:Fire() end)

--[[
ui:Element('ToggleColor', 'ui toggle fill', {default = {Color = Color3.fromRGB(255,255,255)}},function(tbl)
    if tbl.Toggle then
        if v:IsA('Frame') and v.Name == 'Color' and v.Parent.Name == 'Button' and v.BackgroundColor3 == oldUiColor then
            v.BackgroundColor3 = coolcolor
        end
    end
end)
]]--

ui:Element('ToggleColor', 'ui toggle fill', {default = {Color = coolcolor}}, function(tbl)
	if tbl.Toggle then
	local oldUiColor = coolcolor --Colorpick, ColorDrag, HueFrameGradient, Huepick, Huedrag
	coolcolor = tbl.Color
	for i,v in pairs (game:GetService('CoreGui')['electric boogalo'].Menu.Tabs:GetDescendants()) do
		if v:IsA('Frame') and v.Name == 'Color' and v.Parent.Name == 'Button' and v.BackgroundColor3 == oldUiColor then
			v.BackgroundColor3 = coolcolor
		end
	end
        
		else
		
		oldUiColor = tbl.Color
		coolcolor = Color3.fromRGB(255, 255, 255)
		--game:GetService("CoreGui").KeybindList.TextLabel.BorderColor3 = coolcolor
		--game:GetService("CoreGui").SpectatorsList.Spectators.Color.BackgroundColor3 = coolcolor
	for i,v in pairs (game:GetService('CoreGui')['electric boogalo'].Menu.Tabs:GetDescendants()) do
		if v:IsA('Frame') and v.Name == 'Color' and v.Parent.Name == 'Button' and v.BackgroundColor3 == oldUiColor then
			v.BackgroundColor3 = coolcolor
		end
	end
end
end)

ui:Element('ToggleColor', 'ui slider', {default = {Color = Color3.fromRGB(255,255,255)}},function() colorchanger:Fire() end)

ui:Element('ToggleKeybind', 'gui keybind', {default = {Key = Insert, Type = Toggle, Toggle = true}}, function(tbl)
	if tbl.Toggle then
		watermarklocation.watermark.Draggable = tbl.Active
		ovascreengui['ova'].Enabled = tbl.Active
		library.uiopen = tbl.Active
	end
end)


--ui:Element('TextBox', 'custom background', {placeholder = 'background id', default = {text = '7881406037'}})

--(values.misc.ui['custom background'].Text)

local customtitleoffset = 5
local textsave = ''
ui:Element('TextBox', 'custom title', {placeholder = 'title name here'}, function(tbl)
    local lenght = string.len(tbl.Text)
    textsave = tbl.Text
    ovascreengui['ova'].Menu.TextLabel.Text = tbl.Text
end)

themebackground = {
    ['Default'] = 2151741365,
    ['Hearts'] = 6073763717,
    ['Abstract'] = 6073743871,
    ['Hexagon'] = 6073628839,
    ['Circles'] = 6071579801,
    ['Lace With Flowers'] = 6071575925,
    ['Floral'] = 5553946656,
--    ['Custom'] = ' ',
}

Images_names = {}

for a,b in next, themebackground do 
    table.insert(Images_names, a)
end

ui:Element('Dropdown', 'background', {options = Images_names}, function(tbl)
  for a,b in next, themebackground do
    if a == 'Custom' and tbl.Dropdown == 'Custom' then
--      b = values.misc.ui['custom background'].Text
    end
  end
end)

ui:Element('ToggleTrans', 'background color', {default = {Color = Color3.fromRGB(25,25,25), Transparency = 0}})

local teststuff = misc:Sector ("test", "Left")
teststuff:Element('Toggle', 'test')
teststuff:Element('ToggleColor', 'test', {default = {Color = Color3.fromRGB(255, 255, 255)}})
teststuff:Element('ToggleTrans', 'test', {default = {Color = Color3.fromRGB(255 ,255 ,255), Transparency = 0}})
teststuff:Element('ToggleKeybind', 'test')
teststuff:Element('Slider', 'test', {min = 0, max = 100, default = 50})
teststuff:Element('TextBox', 'test', {placeholder = 'test', default = {text = 'test'}})
teststuff:Element('Button', 'test')
teststuff:Element('Dropdown', 'test', {options = {'test1', 'test2'}})
teststuff:Element('Jumbobox', 'test', {options = {'test1', 'test2'}})

local watermark = misc:Sector('watermark', 'Left')

watermark:Element('Toggle', 'enabled', {default = {Toggle = true}}, function(tbl)
	watermarklocation.Enabled = tbl.Toggle
end)

watermark:Element('Dropdown', 'themes', {options = watermarkthemes})


watermark:Element('TextBox', 'watermark text', {placeholder = 'text here', default = {text = '  @user | @time | @version'}}, function(tbl)

	local textierawr = textboxtriggers(tbl.Text)
	watermarklocation.watermark.title.Text = textierawr
end)

watermark:Element('Dropdown', 'text font', {options = fonts}, function(tbl)
	watermarklocation.watermark.title.Font = Enum.Font[tbl.Dropdown]
end)

watermark:Element('Slider', 'text size', {min = 0, max = 50, default = 16}, function(tbl)
	watermarklocation.watermark.title.TextSize = tbl.Slider
end)

watermark:Element('Slider', 'text line height', {min = -50, max = 50, default = 10}, function(tbl)
	watermarklocation.watermark.title.LineHeight = 1.1 * (tbl.Slider / 10)
end)

watermark:Element('Slider', 'watermark lenght', {min = 0, max = 100, default = 40}, function(tbl)
	watermarklocation.watermark.Size = UDim2.new(0, tbl.Slider * 5, 0, 20)
end)

watermark:Element('ToggleColor', 'border color', {default = {Color = Color3.fromRGB(255,255,255)}}, function(tbl)
	watermarklocation.watermark.BorderColor3 = tbl.Color
end)

watermark:Element('ToggleColor', 'text color', {default = {Color = Color3.fromRGB(255,255,255)}}, function(tbl)
	watermarklocation.watermark.title.TextColor3 = tbl.Color
end)


watermark:Element('Slider', 'watermark offset X', {min = -150, max = 20, default = -5}, function(tbl)
	watermarklocation.watermark.Position = UDim2.new(0.912 + (tbl.Slider / 150), 0, watermarklocation.watermark.Position.Y.Scale, 0)
end)

watermark:Element('Slider', 'watermark offset y', {min = -10, max = 150, default = -6}, function(tbl)
	watermarklocation.watermark.Position = UDim2.new(watermarklocation.watermark.Position.X.Scale, 0,  0.00858895481 + (tbl.Slider / 150) , 0)
end)

local objects = {}
local utility = {}

do
	utility.default = {
		Line = {
			Thickness = 1.5,
			Color = Color3.fromRGB(255, 255, 255),
			Visible = false
		},
		Text = {
			Size = 13,
			Center = true,
			Outline = true,
			Font = Drawing.Fonts.Plex,
			Color = Color3.fromRGB(255, 255, 255),
			Visible = false
		},
		Square = {
			Thickness = 1.5,
			Filled = false,
			Color = Color3.fromRGB(255, 255, 255),
			Visible = false
		},
	}
	function utility.create(type, isOutline)
		local drawing = Drawing.new(type)
		for i, v in pairs(utility.default[type]) do
			drawing[i] = v
		end
		if isOutline then
			drawing.Color = Color3.new(0,0,0)
			drawing.Thickness = 3
		end
		return drawing
	end
	function utility.add(plr)
		if not objects[plr] then
			objects[plr] = {
				Name = utility.create('Text'),
				Weapon = utility.create('Text'),
				Armor = utility.create('Text'),
				BoxOutline = utility.create('Square', true),
				Box = utility.create('Square'),
				HealthOutline = utility.create('Line', true),
				Health = utility.create('Line'),
			}
		end
	end
	for _,plr in pairs(Players:GetPlayers()) do
		if Player ~= LocalPlayer then
			utility.add(plr)
		end
	end
	Players.PlayerAdded:Connect(utility.add)
	Players.PlayerRemoving:Connect(function(plr)
		wait()
		if objects[plr] then
			for i,v in pairs(objects[plr]) do
				for i2,v2 in pairs(v) do
					if v then
						v:Remove()
					end
				end
			end

			objects[plr] = nil
		end
	end)
end
local Items = Instance.new('ScreenGui')
Items.Name = 'Items'
Items.Parent = game.CoreGui
Items.ResetOnSpawn = false
Items.ZIndexBehavior = 'Global'
do
	function add(plr)
		local ImageLabel = Instance.new('ImageLabel')
		ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		ImageLabel.BackgroundTransparency = 1.000
		ImageLabel.Size = UDim2.new(0, 62, 0, 25)
		ImageLabel.Visible = false
		ImageLabel.Image = 'rbxassetid://1784884358'
		ImageLabel.ScaleType = Enum.ScaleType.Fit
		ImageLabel.Name = plr.Name
		ImageLabel.AnchorPoint = Vector2.new(0.5,0.5)
		ImageLabel.Parent = Items
	end
	for _,plr in pairs(Players:GetPlayers()) do
		if Player ~= LocalPlayer then
			add(plr)
		end
	end
	Players.PlayerAdded:Connect(add)
	Players.PlayerRemoving:Connect(function(plr)
		wait()
		Items[plr.Name]:Destroy()
	end)
end
local debrisitems = {}
workspace.Debris.ChildAdded:Connect(function(obj)
	if obj:IsA('BasePart') and Weapons:FindFirstChild(obj.Name) then
		RunService.RenderStepped:Wait()

		local BillboardGui = Instance.new('BillboardGui')
		BillboardGui.AlwaysOnTop = true
		BillboardGui.Size = UDim2.new(0, 40, 0, 40)
		BillboardGui.Adornee = obj

		local ImageLabel = Instance.new('ImageLabel')
		ImageLabel.Parent = BillboardGui
		ImageLabel.BackgroundTransparency = 1
		ImageLabel.Size = UDim2.new(1, 0, 1, 0)
		ImageLabel.ImageColor3 = values.visuals.world['item esp'].Color
		ImageLabel.Image = GetIcon.getWeaponOfKiller(obj.Name)
		ImageLabel.ScaleType = Enum.ScaleType.Fit
		ImageLabel.Visible = values.visuals.world['item esp'].Toggle and table.find(values.visuals.world['types'].Jumbobox, 'icon') and true or false

		BillboardGui.Parent = obj
	end
end)
for _, obj in pairs(workspace.Debris:GetChildren()) do
	if obj:IsA('BasePart') and Weapons:FindFirstChild(obj.Name) then
		RunService.RenderStepped:Wait()

		local BillboardGui = Instance.new('BillboardGui')
		BillboardGui.AlwaysOnTop = true
		BillboardGui.Size = UDim2.new(0, 40, 0, 40)
		BillboardGui.Adornee = obj

		local ImageLabel = Instance.new('ImageLabel')
		ImageLabel.Parent = BillboardGui
		ImageLabel.BackgroundTransparency = 1
		ImageLabel.Size = UDim2.new(1, 0, 1, 0)
		ImageLabel.ImageColor3 = values.visuals.world['item esp'].Color
		ImageLabel.Image = GetIcon.getWeaponOfKiller(obj.Name)
		ImageLabel.ScaleType = Enum.ScaleType.Fit
		ImageLabel.Visible = values.visuals.world['item esp'].Toggle and table.find(values.visuals.world['types'].Jumbobox, 'icon') and true or false

		BillboardGui.Parent = obj
	end
end
local function YROTATION(cframe)
	local x, y, z = cframe:ToOrientation()
	return CFrame.new(cframe.Position) * CFrame.Angles(0,y,0)
end
local weps = {
	Pistol = {'USP', 'P2000', 'Glock', 'DualBerettas', 'P250', 'FiveSeven', 'Tec9', 'CZ', 'DesertEagle', 'R8'},
	SMG = {'MP9', 'MAC10', 'MP7', 'UMP', 'P90', 'Bizon'},
	Rifle = {'M4A4', 'M4A1', 'AK47', 'Famas', 'Galil', 'AUG', 'SG'},
	Sniper = {'AWP', 'Scout', 'G3SG1'}
}
local function GetWeaponRage(weapon)
	return table.find(weps.Pistol, weapon) and 'pistol' or table.find(weps.Rifle, weapon) and 'rifle' or weapon == 'AWP' and 'awp' or weapon == 'G3SG1'  and 'auto' or weapon == 'Scout' and 'scout' or 'default'
end
local function GetStatsRage(weapon)
	if weapon == 'default' or values.rage.weapons.default['override keybind'].Toggle and values.rage.weapons.default['override keybind'].Active then
		return values.rage.weapons.default
	else
		if values.rage.weapons[weapon]['override default'].Toggle then
			return values.rage.weapons[weapon]
		else
			return values.rage.weapons.default
		end
	end
end
--[[
local function GetWeaponLegit(weapon)
	return table.find(weps.Pistol, weapon) and 'pistol' or table.find(weps.Rifle, weapon) and 'rifle' or table.find(weps.SMG, weapon) and 'smg' or table.find(weps.Sniper, weapon) and 'sniper' or 'default'
end
local function GetStatsLegit(weapon)
	if weapon == 'default' then
		return values.legit.main.default
	else
		if values.legit.main[weapon]['override default'].Toggle then
			return values.legit.main[weapon]
		else
			return values.legit.main.default
		end
	end
end
]]--
switchtrigger = {false, nil, nil}
savedspinpitch = 0
Jitter = false
jitterwait = false
lockyaw = false
Spin = 0
local RageTarget
Filter = false
local LastStep
TriggerDebounce = false
DisableAA = false
allowedtofreeze = true
--[[
local Fov = Drawing.new('Circle')
Fov.Filled = false
Fov.Color = Color3.fromRGB(25,25,25)
Fov.Transparency = 1
Fov.Position = Vector2.new(Mouse.X, Mouse.Y + 16)
Fov.Radius = 120
Fov.Visible = true
Fov.Thickness = 1
]]--
local Hitboxes = {}
local LastStep 
aroundtheworld_value = 0
local Ping = game.Stats.PerformanceStats.Ping:GetValue()

aroundtheworld_value = 0
savedanimationdance = nil
local steppedlocal

Ping = game.Stats.PerformanceStats.Ping:GetValue()
RageTarget = nil
PlayerIsAlive = false
CamCFrame = Camera.CFrame
CamLook = CamCFrame.LookVector
Character = LocalPlayer.Character
local Root
local frchr
RageTarget = nil
Spin = math.clamp(Spin + values.rage.angles['spin speed'].Slider, 0, 360)

steppedlocal = game:GetService('RunService').Stepped:Connect(function(a)
	LastStep = a
	PlayerIsAlive = false

	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Humanoid') and LocalPlayer.Character:FindFirstChild('Humanoid').Health > 0 and LocalPlayer.Character:FindFirstChild('UpperTorso') and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
		PlayerIsAlive = true
	end
	
	for i,b in next, watermarklocation.watermark:GetChildren() do 
		if b:IsA('UIGradient') then 
			if b.Name == values.misc.watermark.themes.Dropdown then 
				b.Enabled = true
			else
				b.Enabled = false
			end
		end
	end

	if ovascreengui['menu'].Image  ~= 'rbxassetid://'..themebackground[values.misc.ui['background'].Dropdown] then 
		ovascreengui['menu'].Image = 'rbxassetid://'..themebackground[values.misc.ui['background'].Dropdown]
	end

	ovascreengui['menu'].ImageColor3 = values.misc.ui['background color'].Color
	ovascreengui['menu'].ImageTransparency = values.misc.ui['background color'].Transparency


	local textierawr = textboxtriggers(values.misc.watermark['watermark text'].Text)
	watermarklocation.watermark.title.Text = textierawr


	ovascreengui['menu'].BorderColor3 = values.misc.ui['ui border'].Color
	for a,b in next, bordercolorlist do 
		b.BackgroundColor3 = values.misc.ui['ui border'].Color
	end
	
end)

RunService:BindToRenderStep('idk', 444, function()
	if PlayerIsAlive then 
		local RageGuy
		if workspace:FindFirstChild('Map') and Client.gun ~= 'none' and Client.gun.Name ~= 'C4' then
			if values.rage.aimbot.enabled.Toggle and (LocalPlayer.Character.Humanoid.WalkSpeed ~= 0 or values.rage.aimbot['ignore on start'].Toggle) then
				local Origin = values.rage.aimbot.origin.Dropdown == 'character' and workspace.Camera.Focus.p or CamCFrame.p
				local Stats = GetStatsRage(GetWeaponRage(Client.gun.Name))
				
				for _, Player in next, Players:GetChildren() do
					if table.find(values.misc.client['gun modifiers'].Jumbobox, 'firerate') then
						Client.DISABLED = false
					end
					if Player.Character and Player.Character:FindFirstChild('Humanoid') and Player.Character:FindFirstChild('Humanoid').Health > 0 and Player.Team ~= 'TTT' and Player ~= LocalPlayer then
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'pitch') then
							Player.Character.UpperTorso.Waist.C0 = CFrame.new(0, 0.5 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10), 0)
                            Player.Character.Head.Neck.C0 = CFrame.new(0, 0.7 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10), 0)
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'roll') then
							Player.Character.Humanoid.MaxSlopeAngle = 0
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'arms') then
							Player.Character.RightUpperArm:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(1.5 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10), 0.549999952, -0.2)
							Player.Character.LeftUpperArm:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(-(1.5 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10)), 0.549999952, -0.2)
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'animation') then
							for a, b in next, Player.Character.Humanoid:GetPlayingAnimationTracks() do
								b:Stop()
							end
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'bhop') then   
							Player.Character.Head.CFrame = CFrame.new(Player.Character.Head.Position)
							Player.Character.UpperTorso.CFrame = CFrame.new(Player.Character.UpperTorso.Position)
							Player.Character.LowerTorso.CFrame = CFrame.new(Player.Character.LowerTorso.Position)
							Player.Character.LeftLowerArm.CFrame = CFrame.new(Player.Character.LeftLowerArm.Position)
							Player.Character.LeftUpperArm.CFrame = CFrame.new(Player.Character.LeftUpperArm.Position)
							Player.Character.RightLowerArm.CFrame = CFrame.new(Player.Character.RightLowerArm.Position)
							Player.Character.RightUpperArm.CFrame = CFrame.new(Player.Character.RightUpperArm.Position)
							Player.Character.LeftLowerLeg.CFrame = CFrame.new(Player.Character.LeftLowerLeg.Position)
							Player.Character.LeftUpperLeg.CFrame = CFrame.new(Player.Character.LeftUpperLeg.Position)
							Player.Character.RightLowerLeg.CFrame = CFrame.new(Player.Character.RightLowerLeg.Position)
							Player.Character.RightUpperLeg.CFrame = CFrame.new(Player.Character.RightUpperLeg.Position)
						end
                        if values.rage.aimbot["front track"].Toggle then
                        	Player.Character.Head.Neck.C0 = CFrame.new(0,values.rage.aimbot["Y distance"].Slider,values.rage.aimbot["X distance"].Slider) * CFrame.Angles(0, 0, 0)
                        end
					end
					if Player.Team ~= LocalPlayer.Team and Player.Character and Player.Character:FindFirstChild('Humanoid') and not Client.DISABLED and Player.Character:FindFirstChild('Humanoid').Health > 0 and Player.Team ~= 'TTT' and not Player.Character:FindFirstChildOfClass('ForceField') and GetDeg(CamCFrame, Player.Character.Head.Position) <= Stats['max fov'].Slider and Player ~= LocalPlayer then
						if Player.Team ~= game.Players.LocalPlayer.Team and Player:FindFirstChild('Status') and Player.Status.Team.Value ~= game.Players.LocalPlayer.Status.Team.Value and Player.Status.Alive.Value then
                            if Client.gun:FindFirstChild("Melee") and values.rage.aimbot["knifebot"].Toggle then -- knife bot (for fast searching)
                                local Ignore = {unpack(Collision)}
                                if #ragebotwhitelist ~= 0 then
                                    for i,v in pairs(ragebotwhitelist) do
                                        table.insert(v, Ignore)
                                    end
                                end
								if values.rage.aimbot["knifebot type"].Dropdown == "rapid" then
									Client.DISABLED = false
								end
								if not values.rage.aimbot["knife wallcheck"].Toggle then
									table.insert(Ignore, game.Workspace.Map)
								end
								table.insert(Ignore, workspace.Map.Clips)
								table.insert(Ignore, workspace.Map.SpawnPoints)
								table.insert(Ignore, LocalPlayer.Character)
								table.insert(Ignore, Player.Character.HumanoidRootPart)
								if Player.Character:FindFirstChild('BackC4') then
									table.insert(Ignore, Player.Character.BackC4)
								end
								if Player.Character:FindFirstChild('Gun') then
									table.insert(Ignore, Player.Character.Gun)
								end

                                local Ray = Ray.new(Origin, (Player.Character.Head.Position - Origin).unit * values.rage.aimbot["Knifebot Radius"].Slider)
								--local Ray = Ray.new(Origin, (Player.Character.Head.Position - Origin).unit * 40)
								local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore, false, true)

								if Hit and Hit.Parent == Player.Character then                                    
									RageGuy = Hit
									RageTarget = Hit
									if not values.rage.aimbot['silent aim'].Toggle then
										Camera.CFrame = CFrame.new(CamCFrame.Position, Hit.Position)
									end
									Filter = true

									spawn(function()
										wait(0.9)
										--Client.firebullet()
										Filter = false
									end)

									local Arguments = {
										[1] = Hit,
										[2] = Hit.Position,
										[3] = Client.gun.Name,
										[4] = 4096,
										[5] = LocalPlayer.Character.Gun,
										[8] = 1,
										[9] = false,
										[10] = false,
										[11] = Vector3.new(),
										[12] = 16868,
										[13] = Vector3.new()
									}
									game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
								end
							else
								local Ignore = {unpack(Collision)}
								if #ragebotwhitelist ~= 0 then
									for i,v in pairs(ragebotwhitelist) do
										table.insert(v, Ignore)
									end
								end
								table.insert(Ignore, workspace.Map.Clips)
								table.insert(Ignore, workspace.Map.SpawnPoints)
								table.insert(Ignore, LocalPlayer.Character)
								table.insert(Ignore, Player.Character.HumanoidRootPart)
								if Player.Character:FindFirstChild('BackC4') then
									table.insert(Ignore, Player.Character.BackC4)
								end
								if Player.Character:FindFirstChild('Gun') then
									table.insert(Ignore, Player.Character.Gun)
								end

								local Hitboxes = {}
								for _,Hitbox in ipairs(Stats.hitboxes.Jumbobox) do
									if Stats['prefer body'].Toggle then
										if Hitbox == 'torso' then
											table.insert(Hitboxes, Player.Character.UpperTorso)
										elseif Hitbox == 'arms' then
											table.insert(Hitboxes, Player.Character.LeftUpperArm)
											table.insert(Hitboxes, Player.Character.RightUpperArm)
										elseif Hitbox == 'hand' then
											table.insert(Hitboxes, Player.Character.LeftHand)
											table.insert(Hitboxes, Player.Character.RightHand)
									    elseif Hitbox == 'head' and (not values.rage.aimbot['auto baim'].Toggle and not values.rage.aimbot['auto baim'].Active or Player.Character:FindFirstChild('FakeHead')) then
											table.insert(Hitboxes, Player.Character.Head)
											if values.misc.Backtrack.enabled.Toggle then 
												table.insert(Hitboxes, workspace.backtrackfolder[Player.Name].PlayerName.Value.Character.Head)
											end
										else
											table.insert(Hitboxes, Player.Character.LowerTorso) 
										end
									else
										if Hitbox == 'head' then
											table.insert(Hitboxes, Player.Character:FindFirstChild('Head'))
									    elseif Hitbox == 'torso' then
											table.insert(Hitboxes, Player.Character.UpperTorso)
										elseif Hitbox == 'arms' then
											table.insert(Hitboxes, Player.Character.LeftUpperArm)
											table.insert(Hitboxes, Player.Character.RightUpperArm)
										elseif Hitbox == 'hand' then
											table.insert(Hitboxes, Player.Character.LeftHand)
											table.insert(Hitboxes, Player.Character.RightHand)
										else
											table.insert(Hitboxes, Player.Character.LowerTorso) 
										end
									end
								end

								for _,Hitbox in ipairs(Hitboxes) do
									local wallbang = false
									local Ignore2 = {unpack(Ignore)}
									for _,Part in next, Player.Character:GetChildren() do
										if Part ~= Hitbox then table.insert(Ignore2, Part) end
									end

									for a,b in next, game.Players:GetChildren() do 
										if b ~= Player and b.Character then
											for i, h in next, b.Character:GetChildren() do 
												table.insert(Ignore2, h)
											end
										end 
									end

									if values.rage.aimbot['automatic penetration'].Toggle then
										local Hits = {}
										local EndHit, Hit, Pos
										
										local Ray1 = Ray.new(Origin, (Hitbox.Position  - Origin).unit * (Hitbox.Position - Origin).magnitude)
										repeat
											Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore2, false, true)
											if Hit ~= nil and Hit.Parent ~= nil then
												if Hit and Multipliers[Hit.Name] ~= nil then
													EndHit = Hit
												else
													table.insert(Ignore2, Hit)
													table.insert(Hits, {['Position'] = Pos,['Hit'] = Hit})
												end
											end
										until EndHit ~= nil or #Hits >= 4 or Hit == nil 
										
										if EndHit ~= nil and Multipliers[EndHit.Name] ~= nil and #Hits <= 4 then
											if #Hits == 0 then
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name]
												if Player:FindFirstChild('Kevlar') then
													if string.find(EndHit.Name, 'Head') then
														if Player:FindFirstChild('Helmet') then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100
												if Damage >= Stats['minimum damage'].Slider then
													RageGuy = EndHit
													RageTarget = EndHit
													if not values.rage.aimbot['silent aim'].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot['automatic fire'].Dropdown == 'standard' then

														Client.firebullet()
														
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'hitpart' then

														Client.firebullet()
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = false,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = false,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'silent' then
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = false,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = false,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end	
													end
													Filter = false
													break
												end
											else
												wallbang = true
												local penetration = Client.gun.Penetration.Value * 0.011


												if values.rage.aimbot['penetration'].Dropdown == 'XD' then 
													penetration = Client.gun.Penetration.Value * 10000000000
												elseif values.rage.aimbot['penetration'].Dropdown == 'high' then 
													penetration = Client.gun.Penetration.Value * 10
												elseif values.rage.aimbot['penetration'].Dropdown == 'normal' then 
													penetration = Client.gun.Penetration.Value * 0.01
												end

												local limit = 0
												local dmgmodifier = 1
												for i = 1, #Hits do
													local data = Hits[i]
													local part = data['Hit']
													local pos = data['Position']
													local modifier = 1
													if part.Material == Enum.Material.DiamondPlate then
														modifier = 3
													end
													if part.Material == Enum.Material.CorrodedMetal or part.Material == Enum.Material.Metal or part.Material == Enum.Material.Concrete or part.Material == Enum.Material.Brick then
														modifier = 2
													end
													if part.Name == 'Grate' or part.Material == Enum.Material.Wood or part.Material == Enum.Material.WoodPlanks then
														modifier = 0.1
													end
													if part.Name == 'nowallbang' then
														modifier = 100
													end
													if part:FindFirstChild('PartModifier') then
														modifier = part.PartModifier.Value
													end
													if part.Transparency == 1 or part.CanCollide == false or part.Name == 'Glass' or part.Name == 'Cardboard' then
														modifier = 0
													end
													local direction = (Hitbox.Position - pos).unit * math.clamp(Client.gun.Range.Value, 1, 100)
													local ray = Ray.new(pos + direction * 1, direction * -2)
													local _,endpos = workspace:FindPartOnRayWithWhitelist(ray, {part}, true)
													local thickness = (endpos - pos).Magnitude
													thickness = thickness * modifier
													limit = math.min(penetration, limit + thickness)
													dmgmodifier = 1 - limit / penetration
												end
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name] * dmgmodifier
												if Player:FindFirstChild('Kevlar') then
													if string.find(EndHit.Name, 'Head') then
														if Player:FindFirstChild('Helmet') then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100

												if Damage >= Stats['minimum damage'].Slider then
													RageGuy = EndHit
													RageTarget = EndHit
													if not values.rage.aimbot['silent aim'].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot['automatic fire'].Dropdown == 'standard' then
														Client.firebullet()
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'hitpart' then
														Client.firebullet()
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = wallbang,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = wallbang,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'silent' then
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = wallbang,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = wallbang,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end	
													end
													Filter = false
													break
												end
											end
										end
									else
										local Ray = Ray.new(Origin, (Hitbox.Position - Origin).unit * (Hitbox.Position - Origin).magnitude)
										local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore2, false, true)

										if Hit and Multipliers[Hit.Name] ~= nil then
											local Damage = Client.gun.DMG.Value * Multipliers[Hit.Name]
											if Player:FindFirstChild('Kevlar') then
												if string.find(Hit.Name, 'Head') then
													if Player:FindFirstChild('Helmet') then
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												else
													Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
												end
											end
											Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - Hit.Position).Magnitude/500))
											if Damage >= Stats['minimum damage'].Slider then
												RageGuy = Hit
												RageTarget = Hit
												if not values.rage.aimbot['silent aim'].Toggle then
													Camera.CFrame = CFrame.new(CamCFrame.Position, Hit.Position)
												end
												Filter = true
												if values.rage.aimbot['automatic fire'].Dropdown == 'standard' then
													Client.firebullet()
													if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
														for chingchong = 2, values.rage.exploits['tap amount'].Slider do
															Client.firebullet()
														end
													end
												elseif values.rage.aimbot['automatic fire'].Dropdown == 'hitpart' then
													Client.firebullet()
													local Arguments = {
														[1] = EndHit,
														[2] = EndHit.Position,
														[3] = LocalPlayer.Character.EquippedTool.Value,
														[4] = 100,
														[5] = LocalPlayer.Character.Gun,
														[8] = 1,
														[9] = false,
														[10] = false,
														[11] = Vector3.new(),
														[12] = 100,
														[13] = Vector3.new()
													}
													game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
													if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
														for chingchong = 2, values.rage.exploits['tap amount'].Slider do
															Client.firebullet()
															local Arguments = {
																[1] = EndHit,
																[2] = EndHit.Position,
																[3] = LocalPlayer.Character.EquippedTool.Value,
																[4] = 100,
																[5] = LocalPlayer.Character.Gun,
																[8] = 1,
																[9] = false,
																[10] = false,
																[11] = Vector3.new(),
																[12] = 100,
																[13] = Vector3.new()
															}
															game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														end
													end
												end
												Filter = false
												break
											end
										end
									end
								end
							end
						end
					end
				end
--[[
			elseif values.legit.aimbot['aim assist'].Toggle and values.legit.aimbot['aim assist'].Active and not library.uiopen then
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name))
				local Ignore = {LocalPlayer.Character, Camera, workspace.Map.Clips, workspace.Map.SpawnPoints, workspace.Debris}
				local Closest = 9999
				local Target

				

				if not table.find(Stats.conditions.Jumbobox, 'smoke') then
					table.insert(Ignore, workspace.Ray_Ignore)
				end

				if not table.find(Stats.conditions.Jumbobox, 'blind') or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then
					if not table.find(Stats.conditions.Jumbobox, 'standing') or SelfVelocity.Magnitude < 3 then
						for _,Player in pairs(Players:GetPlayers()) do
							if Player.Character and Player.Character:FindFirstChild('Humanoid') and Player.Character:FindFirstChild('Humanoid').Health > 0 then
								if not values.legit.settings['forcefield check'].Toggle or not Player.Character:FindFirstChildOfClass('ForceField') then
									if Player.Team ~= LocalPlayer.Team or values.legit.settings['free for all'].Toggle then
										local Pos, onScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)
										if onScreen then
											local Magnitude = (Vector2.new(Pos.X, Pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
											if Magnitude < Stats['field of view'].Slider then
												local Hitbox = Stats.hitbox.Dropdown == 'head' and Player.Character.Head or Stats.hitbox.Dropdown == 'chest' and Player.Character.UpperTorso
												if Stats.hitbox.Dropdown == 'closest' then
													local HeadPos = Camera:WorldToViewportPoint(Player.Character.Head.Position)
													local TorsoPos = Camera:WorldToViewportPoint(Player.Character.UpperTorso.Position)
													local HeadDistance = (Vector2.new(HeadPos.X, HeadPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
													local TorsoDistance = (Vector2.new(TorsoPos.X, TorsoPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
													if HeadDistance < TorsoDistance then
														Hitbox = Player.Character.Head
													else
														Hitbox = Player.Character.UpperTorso
													end
												end
												if Hitbox ~= nil then
													if not table.find(Stats.conditions.Jumbobox, 'visible') then
														Target = Hitbox
													else
														local Ray1 = Ray.new(Camera.CFrame.Position, (Hitbox.Position - Camera.CFrame.Position).unit * (Hitbox.Position - Camera.CFrame.Position).magnitude)
														local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore, false, true)
														if Hit and Hit:FindFirstAncestor(Player.Name) then
															Target = Hitbox
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end

				if Target ~= nil then
					local Pos = Camera:WorldToScreenPoint(Target.Position)
					local Magnitude = Vector2.new(Pos.X - Mouse.X, Pos.Y - Mouse.Y)
					mousemoverel(Magnitude.x/Stats.smoothing.Slider, Magnitude.y/Stats.smoothing.Slider)
				end
			end

			if not values.rage.aimbot.enabled.Toggle and values.legit.aimbot['triggerbot'].Toggle and values.legit.aimbot['triggerbot'].Active and not TriggerDebounce then
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name))
				if Stats.triggerbot.Toggle then
					if not table.find(Stats.conditions.Jumbobox, 'blind') or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then
						if not table.find(Stats.conditions.Jumbobox, 'standing') or SelfVelocity.Magnitude < 3 then
							if Mouse.Target and Mouse.Target.Parent and Players:GetPlayerFromCharacter(Mouse.Target.Parent) and Multipliers[Mouse.Target.Name] ~= nil and Client.gun.DMG.Value * Multipliers[Mouse.Target.Name] >= Stats['minimum dmg'].Slider then
								local OldTarget = Mouse.Target
								local Player = Players:GetPlayerFromCharacter(Mouse.Target.Parent)
								if Player.Team ~= LocalPlayer.Team or values.legit.settings['free for all'].Toggle then
									coroutine.wrap(function()
										TriggerDebounce = true
										wait(Stats['delay (ms)'].Slider/1000)
										repeat RunService.RenderStepped:Wait()
											if not Client.DISABLED then
												Client.firebullet()
											end
										until Mouse.Target == nil or Player ~= Players:GetPlayerFromCharacter(Mouse.Target.Parent)
										TriggerDebounce = false
									end)()
								end
							end
						end
					end
				end
			end 
            ]]--
		end
	end
	CamCFrame = Camera.CFrame
	CamLook = CamCFrame.LookVector

	RageTarget = nil
--[[
	pcall(function()
		Fov.Visible = values.legit.settings['draw fov'].Toggle

		Fov.Transparency = values.legit.settings['draw fov'].Transparency
	
		Fov.Color =  values.legit.settings['draw fov'].Color
		Fov.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
		Fov.Radius = GetStatsLegit(GetWeaponLegit(Client.gun.Name))['field of view'].Slider
		Fov.Thickness = values.legit.settings['fov thickness'].Slider
		Fov.Filled = values.legit.settings['filled fov'].Toggle
	end)
]]--



	
	if Spin == 360 then Spin = 0 end

	for i,v in pairs(ChamItems) do
		local cham = v[1]
		local fromobject = v[2]
		if cham.Parent == nil then
			table.remove(ChamItems, i)
		else 
			if cham.Name == 'WallCham' then 
				if cham:IsA('BoxHandleAdornment') then 
					cham.Size = fromobject.Size + Vector3.new( (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10))
				elseif cham:IsA('CylinderHandleAdornment') then 
					cham.Height = 1.2 + (values.visuals.players['cham thickness'].Slider/10)
					cham.Radius = 0.61 + (values.visuals.players['cham thickness'].Slider/10)
				end
			elseif cham.Name == 'VisibleCham' then
				if cham:IsA('BoxHandleAdornment') then 
					cham.Size = fromobject.Size + Vector3.new( (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10))
				elseif cham:IsA('CylinderHandleAdornment') then 
					cham.Height = 1.2 + (values.visuals.players['vcham thickness'].Slider/10)
					cham.Radius = 0.61 + (values.visuals.players['vcham thickness'].Slider/10)
				end
			end
		end
	end

	if PlayerIsAlive then
		if values.rage.exploits['around the world'].Toggle and values.rage.exploits['around the world'].Active then 
			for i,v in next, Players:GetChildren() do
				if v ~= LocalPlayer and v.Team ~= LocalPlayer.Team then
					if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
						aroundtheworld_value=aroundtheworld_value + (0.01 * values.rage.exploits['speed'].Slider)
						LocalPlayer.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame*CFrame.Angles(0, aroundtheworld_value, 0)*CFrame.new(0, values.rage.exploits['height'].Slider, values.rage.exploits['distance'].Slider)
						break
					end
				end
			end
		end
		if values.visuals.trail['enable'].Toggle then
			pcall(function()
			if not LocalPlayer.Character.HumanoidRootPart:FindFirstChild('Trail') then 
				Part = LocalPlayer.Character.HumanoidRootPart
				offset = -2
				local Attachment = Instance.new('Attachment')
				Attachment.Name = 'A1'
				Attachment.Position = Vector3.new(-0.55602997541428, offset, 0)
				Attachment.Parent = Part
				
				local Trail = Instance.new('Trail')
				Trail.LightInfluence = 0
				Trail.TextureMode = Enum.TextureMode.Static
				Trail.LightEmission = 1
				Trail.MaxLength = 10
				Trail.Texture = 'rbxassetid://7485088415'
				Trail.Parent = Part
				Trail.Transparency = NumberSequence.new(0)
				Trail.FaceCamera = false

				local Attachment1 = Instance.new('Attachment')
				Attachment1.Name = 'A2'
				Attachment1.Position = Vector3.new(0.55602943897247, offset, 0)
				Attachment1.Parent = Part


				Trail.Attachment0 = Attachment
				Trail.Attachment1 = Attachment1
			else 
				local trail = LocalPlayer.Character.HumanoidRootPart.Trail
				local a1 = LocalPlayer.Character.HumanoidRootPart.A1
				local a2 = LocalPlayer.Character.HumanoidRootPart.A2

				trail.MaxLength = values.visuals.trail['max length'].Slider
				trail.Texture = 'rbxassetid://'..values.visuals.trail['image'].Text

				if values.visuals.trail['custom color'].Toggle then 
					trail.Color = ColorSequence.new(values.visuals.trail['custom color'].Color)
				else 
					trail.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
				end

				a1.Position = Vector3.new(values.visuals.trail['size (x,z)'].Slider/10, 5-(values.visuals.trail['offset (y)'].Slider)/5, 0)
				a2.Position = Vector3.new(-values.visuals.trail['size (x,z)'].Slider/10, 5-(values.visuals.trail['offset (y)'].Slider/5), 0)
				trail.FaceCamera = values.visuals.trail['face camera'].Toggle

			end
		    end)
		elseif LocalPlayer.Character.HumanoidRootPart:FindFirstChild('Trail') then 
			LocalPlayer.Character.HumanoidRootPart.Trail:Remove()
		end
		
		local SelfVelocity = LocalPlayer.Character.HumanoidRootPart.Velocity
		if values.rage.fakelag['ping spike'].Toggle and values.rage.fakelag['ping spike'].Active then
			for count = 1, 20  do
				game:GetService('ReplicatedStorage').Events.RemoteEvent:FireServer({[1] = 'createparticle', [2] = 'bullethole', [3] = LocalPlayer.Character.Head, [4] = Vector3.new(0,0,0)}) 
			end
		end

		if values.misc.animations.enabled.Toggle then
			if LoadedAnim then 
				if savedanimationdance ~= Dance then 
					savedanimationdance = Dance
					LoadedAnim:Stop()
				end
				if not LoadedAnim.IsPlaying then 
					savedanimationdance = Dance
					LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
					LoadedAnim.Priority = Enum.AnimationPriority.Action
					LoadedAnim:Play()
					LoadedAnim:AdjustSpeed(values.misc.animations['animation speed'].Slider)
				end
			else 
				savedanimationdance = Dance
				LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
				LoadedAnim.Priority = Enum.AnimationPriority.Action
				LoadedAnim:Play()
				LoadedAnim:AdjustSpeed(values.misc.animations['animation speed'].Slider)
			end
		else 
			if LoadedAnim then 
				LoadedAnim:Stop()
			end
		end


		Root = LocalPlayer.Character.HumanoidRootPart
		frchr = workspace:FindFirstChild('FreezeCharacter2') or workspace:FindFirstChild('FreezeCharacter')
		if frchr and frchr.Size.x >= 5 then 
			Root = frchr
		end
		if values.misc.client['infinite crouch'].Toggle then
			Client.crouchcooldown = 0
		end
		if values.misc.client['auto join team'].Toggle then
			game:GetService('ReplicatedStorage').Events.JoinTeam:FireServer(values.misc.client['team'].Dropdown)
		end
		if table.find(values.misc.client['gun modifiers'].Jumbobox, 'firerate') then
			Client.DISABLED = false
		end
		peektimewait=peektimewait+1
		if values.rage['quick peeks']['quick peek'].Toggle and allowedtofreeze  then
			if values.rage['quick peeks']['quick peek'].Active then 
				if not workspace:FindFirstChild('FreezeCharacter') then 
					local part = Instance.new('Part', workspace)

					if values.rage['quick peeks']['peek method'].Dropdown == 'freeze' then
						part.Size = Vector3.new(15,1,15) 
					else 
						part.Size = Vector3.new(0, 0, 0)
					end

					part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
					part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
					part.CanCollide = false
					part.Transparency = 1
					part.Name = 'FreezeCharacter'
		

					local weld = Instance.new('Weld',part)
					weld.Part0 = part
					weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart

					local visualize = Instance.new('MeshPart', part)
					visualize.Size = Vector3.new(0.5, 0.2, 0.5) 
					visualize.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position+Vector3.new(0, -3 , 0)
					visualize.CanCollide = false
					visualize.Anchored = true
					visualize.MeshId = 'rbxassetid://5536195161'
					visualize.Material = 'Neon'
					visualize.Color = values.rage['quick peeks']['visualize circle'].Color

					visualize.Name = 'no'
					if values.rage['quick peeks']['visualize circle'].Toggle then
						visualize.Transparency = values.rage['quick peeks']['visualize circle'].Transparency
					else 
						visualize.Transparency = 1
					end

				else 
					if not freezebusy2 and values.rage['quick peeks']['time limit'].Toggle then 
						if peektimewait >= values.rage['quick peeks']['time duration'].Slider then 
							peektimewait = 0
							freezebusy2 = true

							wait(0.2)

							pcall(function()
								workspace.FreezeCharacter.Size = Vector3.new(0,0,0)

								wait(values.rage['quick peeks']['wbr'].Slider/100)
	
								workspace.FreezeCharacter:Remove()
							end)


							freezebusy2 = false
						end
					end
					if not freezebusy1 and values.rage['quick peeks']['limit peek'].Toggle then
						if workspace:FindFirstChild('FreezeCharacter') and (workspace.FreezeCharacter.no.Position - workspace.Camera.Focus.p).Magnitude > values.rage['quick peeks']['limit distance'].Slider then
							freezebusy1 = true

							wait(0.2)

							pcall(function()
								workspace.FreezeCharacter.Size = Vector3.new(0,0,0)
								
								wait(values.rage['quick peeks']['wbr'].Slider/100)

								workspace.FreezeCharacter:Remove()
							end)

							freezebusy1 = false
						end
					end
				end
			else 
				peektimewait=0

				if workspace:FindFirstChild('FreezeCharacter') then 
					workspace:FindFirstChild('FreezeCharacter'):Remove()
				end
			end 
		else 
			peektimewait=0

			if workspace:FindFirstChild('FreezeCharacter') then 
				workspace:FindFirstChild('FreezeCharacter'):Remove()
			end
		end
		if values.rage.exploits['kill all'].Toggle and values.rage.exploits['kill all'].Active and LocalPlayer.Character:FindFirstChild('UpperTorso') and LocalPlayer.Character:FindFirstChild('Gun') then
			for _,Player in pairs(Players:GetPlayers()) do
				if Player.Character and Player.Team ~= LocalPlayer.Team and Player.Character:FindFirstChild('UpperTorso') then
					local oh1 = Player.Character.Head
					local oh2 = Player.Character.Head.CFrame.p
					local oh3 = Client.gun.Name
					local oh4 = 4096
					local oh5 = LocalPlayer.Character.Gun
					local oh8 = 15
					local oh9 = false
					local oh10 = false
					local oh11 = Vector3.new(0,0,0)
					local oh12 = 16868
					local oh13 = Vector3.new(0, 0, 0)
					game:GetService('ReplicatedStorage').Events.HitPart:FireServer(oh1, oh2, oh3, oh4, oh5, oh6, oh7, oh8, oh9, oh10, oh11, oh12, oh13)
				end
			end
		end
		if table.find(values.visuals.effects.removals.Jumbobox, 'scope lines') then 
			NewScope.Enabled = LocalPlayer.Character:FindFirstChild('AIMING') and true or false
			PlayerGui.GUI.Crosshairs.Scope.Visible = false
		else
			NewScope.Enabled = false
		end
		
		BodyVelocity:Destroy()
		BodyVelocity = Instance.new('BodyVelocity')
		BodyVelocity.MaxForce = Vector3.new(math.huge,0,math.huge)
		if UserInputService:IsKeyDown('Space') and values.misc.movement['bunny hop'].Toggle then
			local add = 0
			if values.misc.movement.direction.Dropdown == 'directional' or values.misc.movement.direction.Dropdown == 'directional 2' then
				if UserInputService:IsKeyDown('A') then add = 90 end
				if UserInputService:IsKeyDown('S') then add = 180 end
				if UserInputService:IsKeyDown('D') then add = 270 end
				if UserInputService:IsKeyDown('A') and UserInputService:IsKeyDown('W') then add = 45 end
				if UserInputService:IsKeyDown('D') and UserInputService:IsKeyDown('W') then add = 315 end
				if UserInputService:IsKeyDown('D') and UserInputService:IsKeyDown('S') then add = 225 end
				if UserInputService:IsKeyDown('A') and UserInputService:IsKeyDown('S') then add = 145 end
			end
			local rot = YROTATION(CamCFrame) * CFrame.Angles(0,math.rad(add),0)
			local bhopspeed = values.misc.movement['overwrite'].Toggle and values.misc.movement['overwrite'].Active and values.misc.movement['overwrite speed'].Slider or values.misc.movement['speed'].Slider
			BodyVelocity.Parent = LocalPlayer.Character.UpperTorso
			LocalPlayer.Character.Humanoid.Jump = true
			BodyVelocity.Velocity = Vector3.new(rot.LookVector.X,0,rot.LookVector.Z) * (bhopspeed * 2)
			if add == 0 and values.misc.movement.direction.Dropdown == 'directional' and not UserInputService:IsKeyDown('W') then
				BodyVelocity:Destroy()
			else


				if values.misc.movement.type.Dropdown == 'cframe' then
					BodyVelocity:Destroy()
					Root.CFrame = Root.CFrame + Vector3.new(rot.LookVector.X,0,rot.LookVector.Z) * bhopspeed/50
				elseif values.misc.movement.type.Dropdown == 'velocity' then
					BodyVelocity:Destroy()
					Root.Velocity = Vector3.new(rot.LookVector.X * (bhopspeed * 2), Root.Velocity.y, rot.LookVector.Z * (bhopspeed * 2))
				elseif values.misc.movement.type.Dropdown == 'idk' then
					BodyVelocity:Destroy()
					spawn(function()
						if not switchtrigger[1]  then 
							switchtrigger[1] = true
							wait(0.5)
							switchtrigger[3] = Root.CFrame
							Root.CFrame = switchtrigger[2]
	
							wait(0.1)
							Root.CFrame = switchtrigger[3]
							switchtrigger[1] = false
						end
					end)
					
					Root.CFrame = Root.CFrame + Vector3.new(rot.LookVector.X, 0, rot.LookVector.Z) * bhopspeed/50
				end
			end
		end
		if values.misc.movement['gravity change'].Toggle and values.misc.movement['gravity change'].Active  then 
		    workspace.Gravity = values.misc.movement['gravity amount'].Slider
		else 
		    workspace.Gravity = 80
		end


		if values.misc.movement['no launch'].Toggle and values.misc.movement['no launch'].Active then 
			if Root.Velocity.Y > values.misc.movement['launch block (y velocity)'].Slider then 
				Root.Velocity = Vector3.new(Root.Velocity.x, 0, Root.Velocity.z)
			end
		end
		if values.misc.movement['edge jump'].Toggle and values.misc.movement['edge jump'].Active then
			if LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
				coroutine.wrap(function()
					RunService.RenderStepped:Wait()
					if LocalPlayer.Character ~= nil and LocalPlayer.Character:FindFirstChild('Humanoid') and LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
						LocalPlayer.Character.Humanoid:ChangeState('Jumping')
					end
				end)()
			end
		end

		spawn(function()
			if not jitterwait then
				jitterwait = true
				Jitter = not Jitter
				wait(values.rage.angles['jitter wait (ms)'].Slider/100) 
				jitterwait = false
			end
		end)
		
		LocalPlayer.Character.Humanoid.AutoRotate = false
		if values.rage.angles.enabled.Toggle and not DisableAA then
			local Angle = -math.atan2(CamLook.Z, CamLook.X) + math.rad(-90)
			if values.rage.angles['yaw base'].Dropdown == 'spin' then
				Angle = Angle + math.rad(Spin)
			end
			if values.rage.angles['yaw base'].Dropdown == 'random' then
				Angle = Angle + math.rad(math.random(0, 360))
			end
			local Offset = math.rad(-values.rage.angles['yaw offset'].Slider - (values.rage.angles.jitter.Toggle and Jitter and values.rage.angles['jitter offset'].Slider or values.rage.angles['shoot pitch'].Toggle and shotthingy and values.rage.angles['offset'].Slider or 0))
			local CFramePos = CFrame.new(Root.Position) * CFrame.Angles(0, Angle + Offset, 0)

			if values.rage.angles['yaw base'].Dropdown == 'targets' then
				local part
				local closest = 9999999
				for _,plr in pairs(Players:GetPlayers()) do
					if plr.Character and plr.Character:FindFirstChild('Humanoid') and plr.Character:FindFirstChild('Humanoid').Health > 0 and plr.Team ~= LocalPlayer.Team then
						local pos, onScreen = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
						local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
						if closest > magnitude then
							part = plr.Character.HumanoidRootPart
							closest = magnitude
						end
					end
				end
				if part ~= nil then
					CFramePos = CFrame.new(Root.Position, part.Position) * CFrame.Angles(0, Offset, 0)
				end
			end
			if values.rage.angles['lock yaw'].Toggle and values.rage.angles['lock yaw'].Active then 
				if lockyaw == nil then 
					lockyaw = Angle
				end
				CFramePos = CFrame.new(Root.Position) * CFrame.Angles(0, lockyaw + Offset, 0)
			else 
				lockyaw = Angle
			end
			Root.CFrame = YROTATION(CFramePos)
			switch180roll = not switch180roll
			if values.rage.angles['body roll'].Dropdown == 'switch' then
				if switch180roll then 
					Root.CFrame = Root.CFrame * CFrame.Angles(math.rad(180), 0, 0)
					LocalPlayer.Character.Humanoid.HipHeight = 1.5
					LocalPlayer.Character.Humanoid.CameraOffset = Vector3.new(0, -2.7, 0)
				else
					LocalPlayer.Character.Humanoid.HipHeight = 1.5
				end
			end

			if values.rage.angles['body roll'].Dropdown == '180' then
				Root.CFrame = Root.CFrame * CFrame.Angles(values.rage.angles['body roll'].Dropdown == '180' and math.rad(180 + values.rage.angles['roll offset'].Slider) or 0, 0, 0)
				LocalPlayer.Character.Humanoid.HipHeight = 2
			else
				LocalPlayer.Character.Humanoid.HipHeight = 2
			end

			savedspinpitch=savedspinpitch+0.25
			local Pitch = values.rage.angles['pitch'].Dropdown == 'none' and CamLook.Y or values.rage.angles['pitch'].Dropdown == 'up' and 1 or values.rage.angles['pitch'].Dropdown == 'down' and -1 or values.rage.angles['pitch'].Dropdown == 'zero' and 0 or values.rage.angles['pitch'].Dropdown == 'among' and math.huge or values.rage.angles['pitch'].Dropdown == 'random' and Random.new():NextNumber(-50,50) or values.rage.angles['pitch'].Dropdown == 'spin' and savedspinpitch 

			if values.rage.angles['extend pitch'].Toggle and (values.rage.angles['pitch'].Dropdown == 'up' or values.rage.angles['pitch'].Dropdown == 'down') then
				Pitch = (Pitch*2)/1.6
			end
			if values.rage.angles['custom pitch'].Toggle then
			    Pitch = values.rage.angles['pitch value'].Slider/7
			end
			if values.rage.angles.jitter.Toggle and Jitter then 
				Pitch = values.rage.angles['jitter pitch'].Slider/7
			end

			if values.rage.angles['shoot pitch'].Toggle and shotthingy then 
				Pitch = values.rage.angles['pitch'].Slider/7
			end

			if values.rage.angles['overwrite keybind'].Toggle and values.rage.angles['overwrite keybind'].Active then
				Pitch = values.rage.angles['overwrite pitch'].Dropdown == 'none' and CamLook.Y or values.rage.angles['overwrite pitch'].Dropdown == 'up' and 1 or values.rage.angles['overwrite pitch'].Dropdown == 'down' and -1 or values.rage.angles['overwrite pitch'].Dropdown == 'zero' and 0 or values.rage.angles['overwrite pitch'].Dropdown == 'among' and math.huge or values.rage.angles['overwrite pitch'].Dropdown == 'random' and Random.new():NextNumber(0.01,10) or values.rage.angles['overwrite pitch'].Dropdown == 'spin' and savedspinpitch
		    end

			game.ReplicatedStorage.Events.ControlTurn:FireServer(Pitch, LocalPlayer.Character:FindFirstChild('Climbing') and true or false)
		else
			LocalPlayer.Character.Humanoid.HipHeight = 2
			Root.CFrame = CFrame.new(Root.Position) * CFrame.Angles(0, -math.atan2(CamLook.Z, CamLook.X) + math.rad(270), 0)
			game.ReplicatedStorage.Events.ControlTurn:FireServer(CamLook.Y, LocalPlayer.Character:FindFirstChild('Climbing') and true or false)
		end
		if values.rage.others['remove head'].Toggle then
			if LocalPlayer.Character:FindFirstChild('FakeHead') then
				LocalPlayer.Character.FakeHead:Destroy()
			end
			if LocalPlayer.Character:FindFirstChild('HeadHB') then
				LocalPlayer.Character.HeadHB:Destroy()
			end
		end
		if table.find(values.misc.client['gun modifiers'].Jumbobox, 'recoil') then
			Client.resetaccuracy()
			Client.RecoilX = 0
			Client.RecoilY = 0
		end
	else 
		pcall(function()
			workspace:FindFirstChild('FreezeCharacter'):Remove()
		end)
	end
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild('HumanoidRootPart') and Player.Character.HumanoidRootPart:FindFirstChild('OldPosition') then
			coroutine.wrap(function()
				local Position = Player.Character.HumanoidRootPart.Position
				RunService.RenderStepped:Wait()
				if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild('HumanoidRootPart') then
					if Player.Character.HumanoidRootPart:FindFirstChild('OldPosition') then
						Player.Character.HumanoidRootPart.OldPosition.Value = Position
					else
						local Value = Instance.new('Vector3Value')
						Value.Name = 'OldPosition'
						Value.Value = Position
						Value.Parent = Player.Character.HumanoidRootPart
					end
				end
			end)()
		end
	end

	for _,Player in pairs(Players:GetPlayers()) do
		local tbl = objects[Player]
		if tbl == nil then return end
		if Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') and Player.Team ~= 'TTT' and (Player.Team ~= LocalPlayer.Team or values.visuals.players.teammates.Toggle) and Player.Character:FindFirstChild('Gun') and Player.Character:FindFirstChild('Humanoid') and Player ~= LocalPlayer then
			local HumanoidRootPart = Player.Character.HumanoidRootPart
			local RootPosition = HumanoidRootPart.Position
			local Pos, OnScreen = Camera:WorldToViewportPoint(RootPosition)
			local Size = (Camera:WorldToViewportPoint(RootPosition - Vector3.new(0, 3, 0)).Y - Camera:WorldToViewportPoint(RootPosition + Vector3.new(0, 2.6, 0)).Y) / 2

			local Drawings, Text = table.find(values.visuals.players.outlines.Jumbobox, 'drawings') ~= nil, table.find(values.visuals.players.outlines.Jumbobox, 'text') ~= nil

			tbl.Box.Color = (values.rage['loop kill']['Target box'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown and values.rage['loop kill']['Target box'].Color or values.visuals.players.box.Color)
			tbl.Box.Size = Vector2.new(Size * 1.5, Size * 1.9)
			tbl.Box.Position = Vector2.new(Pos.X - Size*1.5 / 2, (Pos.Y - Size*1.6 / 2))

			-- edited
			
			if values.visuals.players.box.Toggle or (values.rage['loop kill']['Target box'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown) then
				tbl.Box.Visible = OnScreen
				tbl.Box.Thickness = 0.001
				if Drawings then
					tbl.BoxOutline.Size = tbl.Box.Size
					tbl.BoxOutline.Position = tbl.Box.Position
					tbl.BoxOutline.Visible = OnScreen
				else
					tbl.BoxOutline.Visible = false
				end
			else
				tbl.Box.Visible = false
				tbl.BoxOutline.Visible = false
			end

			if values.visuals.players.health.Toggle or (values.rage['loop kill']['Target health'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown) then
				tbl.Health.Color = (values.rage['loop kill']['Target health'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown and values.rage['loop kill']['Target health'].Color or values.visuals.players.health.Color)
				tbl.Health.From = Vector2.new((tbl.Box.Position.X - 5), tbl.Box.Position.Y + tbl.Box.Size.Y)
				tbl.Health.To = Vector2.new(tbl.Health.From.X, tbl.Health.From.Y - math.clamp(Player.Character.Humanoid.Health / Player.Character.Humanoid.MaxHealth, 0, 1) * tbl.Box.Size.Y)
				tbl.Health.Visible = OnScreen
				if Drawings then
					tbl.HealthOutline.From = Vector2.new(tbl.Health.From.X, tbl.Box.Position.Y + tbl.Box.Size.Y + 1)
					tbl.HealthOutline.To = Vector2.new(tbl.Health.From.X, (tbl.Health.From.Y - 1 * tbl.Box.Size.Y) -1)
					tbl.HealthOutline.Visible = OnScreen
				else
					tbl.HealthOutline.Visible = false
				end
			else
				tbl.Health.Visible = false
				tbl.HealthOutline.Visible = false
			end

			if values.visuals.players.weapon.Toggle or (values.rage['loop kill']['Target weapon'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown) then
				tbl.Weapon.Color = (values.rage['loop kill']['Target weapon'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown and values.rage['loop kill']['Target weapon'].Color or values.visuals.players.weapon.Color)
				tbl.Weapon.Text = Player.Character.EquippedTool.Value
				tbl.Weapon.Position = Vector2.new(tbl.Box.Size.X/2 + tbl.Box.Position.X, tbl.Box.Size.Y + tbl.Box.Position.Y + 1)
				tbl.Weapon.Font = Drawing.Fonts[values.visuals.players.font.Dropdown]
				tbl.Weapon.Outline = Text
				tbl.Weapon.Size = values.visuals.players.size.Slider
				tbl.Weapon.Visible = OnScreen
			else
				tbl.Weapon.Visible = false
			end

			if values.visuals.players['weapon icon'].Toggle or (values.rage['loop kill']['Target weapon icon'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown) then
				Items[Player.Name].ImageColor3 = (values.rage['loop kill']['Target weapon icon'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown and values.rage['loop kill']['Target weapon icon'].Color or values.visuals.players['weapon icon'].Color)
				Items[Player.Name].Image = GetIcon.getWeaponOfKiller(Player.Character.EquippedTool.Value)
				Items[Player.Name].Position = UDim2.new(0, tbl.Box.Size.X/2 + tbl.Box.Position.X, 0, tbl.Box.Size.Y + tbl.Box.Position.Y + (values.visuals.players.weapon.Toggle and -10 or -22))
				Items[Player.Name].Visible = OnScreen
			else
				Items[Player.Name].Visible = false
			end

			if values.visuals.players.name.Toggle or (values.rage['loop kill']['Target name'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown)  then
				tbl.Name.Color = (values.rage['loop kill']['Target name'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown and values.rage['loop kill']['Target name'].Color or values.visuals.players.name.Color)
				tbl.Name.Text = Player.Name
				tbl.Name.Position = Vector2.new(tbl.Box.Size.X/2 + tbl.Box.Position.X,  tbl.Box.Position.Y - 16)
				tbl.Name.Font = Drawing.Fonts[values.visuals.players.font.Dropdown]
				tbl.Name.Outline = Text
				tbl.Name.Size = values.visuals.players.size.Slider
				tbl.Name.Visible = OnScreen
			else
				tbl.Name.Visible = false
			end
			local LastInfoPos = tbl.Box.Position.Y - 1
			if table.find(values.visuals.players.indicators.Jumbobox, 'armor') and Player:FindFirstChild('Kevlar') then
				tbl.Armor.Color = Color3.fromRGB(0, 150, 255)
				tbl.Armor.Text = Player:FindFirstChild('Helmet') and 'HK' or 'K'
				tbl.Armor.Position = Vector2.new(tbl.Box.Size.X + tbl.Box.Position.X + 12, LastInfoPos)
				tbl.Armor.Font = Drawing.Fonts[values.visuals.players.font.Dropdown]
				tbl.Armor.Outline = Text
				tbl.Armor.Size = values.visuals.players.size.Slider
				tbl.Armor.Visible = OnScreen

				LastInfoPos = LastInfoPos + values.visuals.players.size.Slider
			else
				tbl.Armor.Visible = false
			end
		else
			if Player.Name ~= LocalPlayer.Name then
				Items[Player.Name].Visible = false
				for i,v in pairs(tbl) do
					v.Visible = false
				end
			end
		end
	end

	if workspace:FindFirstChild('Map') and Client.gun ~= 'none' and Client.gun.Name ~= 'C4' then
		if values.misc.movement['height change'].Toggle then 
		pcall(function() LocalPlayer.Character.Humanoid.HipHeight = 2 * (values.misc.movement['height amount'].Slider/5) end)
	else 
	    pcall(function() LocalPlayer.Character.Humanoid.HipHeight = 2 end)
	end

	if values.misc.movement['no velocity'].Toggle then 
	   pcall(function() LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, LocalPlayer.Character.HumanoidRootPart.Velocity.y, 0) end)
	end

	if values.misc.movement['no gun'].Toggle then 
	   pcall(function() LocalPlayer.Character.Gun:Remove()end)
	end

	if values.misc.movement['client offset'].Toggle then 
       pcall(function() LocalPlayer.Character.LowerTorso:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(0, (values.misc.movement['offset (y)'].Slider/5), 0) end)
    end

	end
end
end)

--[[
RunService:BindToRenderStep('Resolvers', 500, function()
				for _,Player in pairs(Players:GetPlayers()) do
					if table.find(values.misc.client["gun modifiers"].Jumbobox, "firerate") then
						Client.DISABLED = false
					end
					 
					if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health > 0 and Player.Team ~= "TTT" and Player ~= LocalPlayer then
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'pitch') then
							Player.Character.UpperTorso.Waist.C0 = CFrame.new(0, 0.5, 0)
                            Player.Character.Head.Neck.C0 = CFrame.new(0, 0.7, 0)
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'roll') then
							Player.Character.Humanoid.MaxSlopeAngle = 0
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'arms') then
							Player.Character.RightUpperArm:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(1.5, 0.549999952, -0.2)
							Player.Character.LeftUpperArm:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(-1.5, 0.549999952, -0.2)
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'animation') then
							for a, b in next, Player.Character.Humanoid:GetPlayingAnimationTracks() do
								b:Stop()
							end
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, "bhop") then   
							Player.Character.Head.CFrame = CFrame.new(Player.Character.Head.Position)
							Player.Character.UpperTorso.CFrame = CFrame.new(Player.Character.UpperTorso.Position)
							Player.Character.LowerTorso.CFrame = CFrame.new(Player.Character.LowerTorso.Position)
							Player.Character.LeftLowerArm.CFrame = CFrame.new(Player.Character.LeftLowerArm.Position)
							Player.Character.LeftUpperArm.CFrame = CFrame.new(Player.Character.LeftUpperArm.Position)
							Player.Character.RightLowerArm.CFrame = CFrame.new(Player.Character.RightLowerArm.Position)
							Player.Character.RightUpperArm.CFrame = CFrame.new(Player.Character.RightUpperArm.Position)
							Player.Character.LeftLowerLeg.CFrame = CFrame.new(Player.Character.LeftLowerLeg.Position)
							Player.Character.LeftUpperLeg.CFrame = CFrame.new(Player.Character.LeftUpperLeg.Position)
							Player.Character.RightLowerLeg.CFrame = CFrame.new(Player.Character.RightLowerLeg.Position)
							Player.Character.RightUpperLeg.CFrame = CFrame.new(Player.Character.RightUpperLeg.Position)
						end
						if values.rage.aimbot["front track"].Toggle then
							Player.Character.Head.Neck.C0 = CFrame.new(0,values.rage.aimbot["Y distance"].Slider,values.rage.aimbot["X distance"].Slider) * CFrame.Angles(0, 0, 0)
						end
					end
				end
end)

game:GetService('RunService'):BindToRenderStep('Obama2', 0, function()
	if PlayerIsAlive then 
		local RageGuy
		if workspace:FindFirstChild('Map') and Client.gun ~= 'none' and Client.gun.Name ~= 'C4' then
			if values.rage.aimbot.enabled.Toggle and (LocalPlayer.Character.Humanoid.WalkSpeed ~= 0 or values.rage.aimbot['ignore on start'].Toggle) then
				local Origin = values.rage.aimbot.origin.Dropdown == 'character' and workspace.Camera.Focus.p or CamCFrame.p
				local Stats = GetStatsRage(GetWeaponRage(Client.gun.Name))
				
				for _, Player in next, Players:GetChildren() do
					if table.find(values.misc.client['gun modifiers'].Jumbobox, 'firerate') then
						Client.DISABLED = false
					end
					if Player.Character and Player.Character:FindFirstChild('Humanoid') and Player.Character:FindFirstChild('Humanoid').Health > 0 and Player.Team ~= 'TTT' and Player ~= LocalPlayer then
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'pitch') then
							Player.Character.UpperTorso.Waist.C0 = CFrame.new(0, 0.5 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10), 0)
                            Player.Character.Head.Neck.C0 = CFrame.new(0, 0.7 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10), 0)
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'roll') then
							Player.Character.Humanoid.MaxSlopeAngle = 0
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'arms') then
							Player.Character.RightUpperArm:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(1.5 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10), 0.549999952, -0.2)
							Player.Character.LeftUpperArm:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(-(1.5 * (values.rage.aimbot['resolver offset (default = 10)'].Slider / 10)), 0.549999952, -0.2)
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'animation') then
							for a, b in next, Player.Character.Humanoid:GetPlayingAnimationTracks() do
								b:Stop()
							end
						end
						if table.find(values.rage.aimbot.resolver.Jumbobox, 'bhop') then   
							Player.Character.Head.CFrame = CFrame.new(Player.Character.Head.Position)
							Player.Character.UpperTorso.CFrame = CFrame.new(Player.Character.UpperTorso.Position)
							Player.Character.LowerTorso.CFrame = CFrame.new(Player.Character.LowerTorso.Position)
							Player.Character.LeftLowerArm.CFrame = CFrame.new(Player.Character.LeftLowerArm.Position)
							Player.Character.LeftUpperArm.CFrame = CFrame.new(Player.Character.LeftUpperArm.Position)
							Player.Character.RightLowerArm.CFrame = CFrame.new(Player.Character.RightLowerArm.Position)
							Player.Character.RightUpperArm.CFrame = CFrame.new(Player.Character.RightUpperArm.Position)
							Player.Character.LeftLowerLeg.CFrame = CFrame.new(Player.Character.LeftLowerLeg.Position)
							Player.Character.LeftUpperLeg.CFrame = CFrame.new(Player.Character.LeftUpperLeg.Position)
							Player.Character.RightLowerLeg.CFrame = CFrame.new(Player.Character.RightLowerLeg.Position)
							Player.Character.RightUpperLeg.CFrame = CFrame.new(Player.Character.RightUpperLeg.Position)
						end
                        if values.rage.aimbot["front track"].Toggle then
                        	Player.Character.Head.Neck.C0 = CFrame.new(0,values.rage.aimbot["Y distance"].Slider,values.rage.aimbot["X distance"].Slider) * CFrame.Angles(0, 0, 0)
                        end
					end
					if Player.Team ~= LocalPlayer.Team and Player.Character and Player.Character:FindFirstChild('Humanoid') and not Client.DISABLED and Player.Character:FindFirstChild('Humanoid').Health > 0 and Player.Team ~= 'TTT' and not Player.Character:FindFirstChildOfClass('ForceField') and GetDeg(CamCFrame, Player.Character.Head.Position) <= Stats['max fov'].Slider and Player ~= LocalPlayer then
						if Player.Team ~= game.Players.LocalPlayer.Team and Player:FindFirstChild('Status') and Player.Status.Team.Value ~= game.Players.LocalPlayer.Status.Team.Value and Player.Status.Alive.Value then
                            if Client.gun:FindFirstChild("Melee") and values.rage.aimbot["knifebot"].Toggle then -- knife bot (for fast searching)
                                local Ignore = {unpack(Collision)}
                                if #ragebotwhitelist ~= 0 then
                                    for i,v in pairs(ragebotwhitelist) do
                                        table.insert(v, Ignore)
                                    end
                                end
								if values.rage.aimbot["knifebot type"].Dropdown == "rapid" then
									Client.DISABLED = false
								end
								if not values.rage.aimbot["knife wallcheck"].Toggle then
									table.insert(Ignore, game.Workspace.Map)
								end
								table.insert(Ignore, workspace.Map.Clips)
								table.insert(Ignore, workspace.Map.SpawnPoints)
								table.insert(Ignore, LocalPlayer.Character)
								table.insert(Ignore, Player.Character.HumanoidRootPart)
								if Player.Character:FindFirstChild('BackC4') then
									table.insert(Ignore, Player.Character.BackC4)
								end
								if Player.Character:FindFirstChild('Gun') then
									table.insert(Ignore, Player.Character.Gun)
								end

                                local Ray = Ray.new(Origin, (Player.Character.Head.Position - Origin).unit * values.rage.aimbot["Knifebot Radius"].Slider)
								--local Ray = Ray.new(Origin, (Player.Character.Head.Position - Origin).unit * 40)
								local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore, false, true)

								if Hit and Hit.Parent == Player.Character then                                    
									RageGuy = Hit
									RageTarget = Hit
									if not values.rage.aimbot['silent aim'].Toggle then
										Camera.CFrame = CFrame.new(CamCFrame.Position, Hit.Position)
									end
									Filter = true

									spawn(function()
										wait(0.9)
										--Client.firebullet()
										Filter = false
									end)

									local Arguments = {
										[1] = Hit,
										[2] = Hit.Position,
										[3] = Client.gun.Name,
										[4] = 4096,
										[5] = LocalPlayer.Character.Gun,
										[8] = 1,
										[9] = false,
										[10] = false,
										[11] = Vector3.new(),
										[12] = 16868,
										[13] = Vector3.new()
									}
									game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
								end
							else
								local Ignore = {unpack(Collision)}
								if #ragebotwhitelist ~= 0 then
									for i,v in pairs(ragebotwhitelist) do
										table.insert(v, Ignore)
									end
								end
								table.insert(Ignore, workspace.Map.Clips)
								table.insert(Ignore, workspace.Map.SpawnPoints)
								table.insert(Ignore, LocalPlayer.Character)
								table.insert(Ignore, Player.Character.HumanoidRootPart)
								if Player.Character:FindFirstChild('BackC4') then
									table.insert(Ignore, Player.Character.BackC4)
								end
								if Player.Character:FindFirstChild('Gun') then
									table.insert(Ignore, Player.Character.Gun)
								end

								local Hitboxes = {}
								for _,Hitbox in ipairs(Stats.hitboxes.Jumbobox) do
									if Stats['prefer body'].Toggle then
										if Hitbox == 'torso' then
											table.insert(Hitboxes, Player.Character.UpperTorso)
										elseif Hitbox == 'arms' then
											table.insert(Hitboxes, Player.Character.LeftUpperArm)
											table.insert(Hitboxes, Player.Character.RightUpperArm)
										elseif Hitbox == 'hand' then
											table.insert(Hitboxes, Player.Character.LeftHand)
											table.insert(Hitboxes, Player.Character.RightHand)
									    elseif Hitbox == 'head' and (not values.rage.aimbot['auto baim'].Toggle and not values.rage.aimbot['auto baim'].Active or Player.Character:FindFirstChild('FakeHead')) then
											table.insert(Hitboxes, Player.Character.Head)
											if values.misc.Backtrack.enabled.Toggle then 
												table.insert(Hitboxes, workspace.backtrackfolder[Player.Name].PlayerName.Value.Character.Head)
											end
										else
											table.insert(Hitboxes, Player.Character.LowerTorso) 
										end
									else
										if Hitbox == 'head' then
											table.insert(Hitboxes, Player.Character:FindFirstChild('Head'))
									    elseif Hitbox == 'torso' then
											table.insert(Hitboxes, Player.Character.UpperTorso)
										elseif Hitbox == 'arms' then
											table.insert(Hitboxes, Player.Character.LeftUpperArm)
											table.insert(Hitboxes, Player.Character.RightUpperArm)
										elseif Hitbox == 'hand' then
											table.insert(Hitboxes, Player.Character.LeftHand)
											table.insert(Hitboxes, Player.Character.RightHand)
										else
											table.insert(Hitboxes, Player.Character.LowerTorso) 
										end
									end
								end

								for _,Hitbox in ipairs(Hitboxes) do
									local wallbang = false
									local Ignore2 = {unpack(Ignore)}
									for _,Part in next, Player.Character:GetChildren() do
										if Part ~= Hitbox then table.insert(Ignore2, Part) end
									end

									for a,b in next, game.Players:GetChildren() do 
										if b ~= Player and b.Character then
											for i, h in next, b.Character:GetChildren() do 
												table.insert(Ignore2, h)
											end
										end 
									end

									if values.rage.aimbot['automatic penetration'].Toggle then
										local Hits = {}
										local EndHit, Hit, Pos
										
										local Ray1 = Ray.new(Origin, (Hitbox.Position  - Origin).unit * (Hitbox.Position - Origin).magnitude)
										repeat
											Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore2, false, true)
											if Hit ~= nil and Hit.Parent ~= nil then
												if Hit and Multipliers[Hit.Name] ~= nil then
													EndHit = Hit
												else
													table.insert(Ignore2, Hit)
													table.insert(Hits, {['Position'] = Pos,['Hit'] = Hit})
												end
											end
										until EndHit ~= nil or #Hits >= 4 or Hit == nil 
										
										if EndHit ~= nil and Multipliers[EndHit.Name] ~= nil and #Hits <= 4 then
											if #Hits == 0 then
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name]
												if Player:FindFirstChild('Kevlar') then
													if string.find(EndHit.Name, 'Head') then
														if Player:FindFirstChild('Helmet') then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100
												if Damage >= Stats['minimum damage'].Slider then
													RageGuy = EndHit
													RageTarget = EndHit
													if not values.rage.aimbot['silent aim'].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot['automatic fire'].Dropdown == 'standard' then

														Client.firebullet()
														
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'hitpart' then

														Client.firebullet()
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = false,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = false,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'silent' then
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = false,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = false,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end	
													end
													Filter = false
													break
												end
											else
												wallbang = true
												local penetration = Client.gun.Penetration.Value * 0.011


												if values.rage.aimbot['penetration'].Dropdown == 'XD' then 
													penetration = Client.gun.Penetration.Value * 10000000000
												elseif values.rage.aimbot['penetration'].Dropdown == 'high' then 
													penetration = Client.gun.Penetration.Value * 10
												elseif values.rage.aimbot['penetration'].Dropdown == 'normal' then 
													penetration = Client.gun.Penetration.Value * 0.01
												end

												local limit = 0
												local dmgmodifier = 1
												for i = 1, #Hits do
													local data = Hits[i]
													local part = data['Hit']
													local pos = data['Position']
													local modifier = 1
													if part.Material == Enum.Material.DiamondPlate then
														modifier = 3
													end
													if part.Material == Enum.Material.CorrodedMetal or part.Material == Enum.Material.Metal or part.Material == Enum.Material.Concrete or part.Material == Enum.Material.Brick then
														modifier = 2
													end
													if part.Name == 'Grate' or part.Material == Enum.Material.Wood or part.Material == Enum.Material.WoodPlanks then
														modifier = 0.1
													end
													if part.Name == 'nowallbang' then
														modifier = 100
													end
													if part:FindFirstChild('PartModifier') then
														modifier = part.PartModifier.Value
													end
													if part.Transparency == 1 or part.CanCollide == false or part.Name == 'Glass' or part.Name == 'Cardboard' then
														modifier = 0
													end
													local direction = (Hitbox.Position - pos).unit * math.clamp(Client.gun.Range.Value, 1, 100)
													local ray = Ray.new(pos + direction * 1, direction * -2)
													local _,endpos = workspace:FindPartOnRayWithWhitelist(ray, {part}, true)
													local thickness = (endpos - pos).Magnitude
													thickness = thickness * modifier
													limit = math.min(penetration, limit + thickness)
													dmgmodifier = 1 - limit / penetration
												end
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name] * dmgmodifier
												if Player:FindFirstChild('Kevlar') then
													if string.find(EndHit.Name, 'Head') then
														if Player:FindFirstChild('Helmet') then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100

												if Damage >= Stats['minimum damage'].Slider then
													RageGuy = EndHit
													RageTarget = EndHit
													if not values.rage.aimbot['silent aim'].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot['automatic fire'].Dropdown == 'standard' then
														Client.firebullet()
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'hitpart' then
														Client.firebullet()
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = wallbang,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																Client.firebullet()
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = wallbang,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end
													elseif values.rage.aimbot['automatic fire'].Dropdown == 'silent' then
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = wallbang,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
															for chingchong = 2, values.rage.exploits['tap amount'].Slider do
																local Arguments = {
																	[1] = EndHit,
																	[2] = EndHit.Position,
																	[3] = LocalPlayer.Character.EquippedTool.Value,
																	[4] = 100,
																	[5] = LocalPlayer.Character.Gun,
																	[8] = 1,
																	[9] = false,
																	[10] = wallbang,
																	[11] = Vector3.new(),
																	[12] = 100,
																	[13] = Vector3.new()
																}
																game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
															end
														end	
													end
													Filter = false
													break
												end
											end
										end
									else
										local Ray = Ray.new(Origin, (Hitbox.Position - Origin).unit * (Hitbox.Position - Origin).magnitude)
										local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore2, false, true)

										if Hit and Multipliers[Hit.Name] ~= nil then
											local Damage = Client.gun.DMG.Value * Multipliers[Hit.Name]
											if Player:FindFirstChild('Kevlar') then
												if string.find(Hit.Name, 'Head') then
													if Player:FindFirstChild('Helmet') then
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												else
													Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
												end
											end
											Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - Hit.Position).Magnitude/500))
											if Damage >= Stats['minimum damage'].Slider then
												RageGuy = Hit
												RageTarget = Hit
												if not values.rage.aimbot['silent aim'].Toggle then
													Camera.CFrame = CFrame.new(CamCFrame.Position, Hit.Position)
												end
												Filter = true
												if values.rage.aimbot['automatic fire'].Dropdown == 'standard' then
													Client.firebullet()
													if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
														for chingchong = 2, values.rage.exploits['tap amount'].Slider do
															Client.firebullet()
														end
													end
												elseif values.rage.aimbot['automatic fire'].Dropdown == 'hitpart' then
													Client.firebullet()
													local Arguments = {
														[1] = EndHit,
														[2] = EndHit.Position,
														[3] = LocalPlayer.Character.EquippedTool.Value,
														[4] = 100,
														[5] = LocalPlayer.Character.Gun,
														[8] = 1,
														[9] = false,
														[10] = false,
														[11] = Vector3.new(),
														[12] = 100,
														[13] = Vector3.new()
													}
													game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
													if values.rage.exploits['custom tap'].Toggle and values.rage.exploits['custom tap'].Active then
														for chingchong = 2, values.rage.exploits['tap amount'].Slider do
															Client.firebullet()
															local Arguments = {
																[1] = EndHit,
																[2] = EndHit.Position,
																[3] = LocalPlayer.Character.EquippedTool.Value,
																[4] = 100,
																[5] = LocalPlayer.Character.Gun,
																[8] = 1,
																[9] = false,
																[10] = false,
																[11] = Vector3.new(),
																[12] = 100,
																[13] = Vector3.new()
															}
															game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														end
													end
												end
												Filter = false
												break
											end
										end
									end
								end
							end
						end
					end
				end
			elseif values.legit.aimbot['aim assist'].Toggle and values.legit.aimbot['aim assist'].Active and not library.uiopen then
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name))
				local Ignore = {LocalPlayer.Character, Camera, workspace.Map.Clips, workspace.Map.SpawnPoints, workspace.Debris}
				local Closest = 9999
				local Target

				

				if not table.find(Stats.conditions.Jumbobox, 'smoke') then
					table.insert(Ignore, workspace.Ray_Ignore)
				end

				if not table.find(Stats.conditions.Jumbobox, 'blind') or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then
					if not table.find(Stats.conditions.Jumbobox, 'standing') or SelfVelocity.Magnitude < 3 then
						for _,Player in pairs(Players:GetPlayers()) do
							if Player.Character and Player.Character:FindFirstChild('Humanoid') and Player.Character:FindFirstChild('Humanoid').Health > 0 then
								if not values.legit.settings['forcefield check'].Toggle or not Player.Character:FindFirstChildOfClass('ForceField') then
									if Player.Team ~= LocalPlayer.Team or values.legit.settings['free for all'].Toggle then
										local Pos, onScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)
										if onScreen then
											local Magnitude = (Vector2.new(Pos.X, Pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
											if Magnitude < Stats['field of view'].Slider then
												local Hitbox = Stats.hitbox.Dropdown == 'head' and Player.Character.Head or Stats.hitbox.Dropdown == 'chest' and Player.Character.UpperTorso
												if Stats.hitbox.Dropdown == 'closest' then
													local HeadPos = Camera:WorldToViewportPoint(Player.Character.Head.Position)
													local TorsoPos = Camera:WorldToViewportPoint(Player.Character.UpperTorso.Position)
													local HeadDistance = (Vector2.new(HeadPos.X, HeadPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
													local TorsoDistance = (Vector2.new(TorsoPos.X, TorsoPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
													if HeadDistance < TorsoDistance then
														Hitbox = Player.Character.Head
													else
														Hitbox = Player.Character.UpperTorso
													end
												end
												if Hitbox ~= nil then
													if not table.find(Stats.conditions.Jumbobox, 'visible') then
														Target = Hitbox
													else
														local Ray1 = Ray.new(Camera.CFrame.Position, (Hitbox.Position - Camera.CFrame.Position).unit * (Hitbox.Position - Camera.CFrame.Position).magnitude)
														local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore, false, true)
														if Hit and Hit:FindFirstAncestor(Player.Name) then
															Target = Hitbox
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end

				if Target ~= nil then
					local Pos = Camera:WorldToScreenPoint(Target.Position)
					local Magnitude = Vector2.new(Pos.X - Mouse.X, Pos.Y - Mouse.Y)
					mousemoverel(Magnitude.x/Stats.smoothing.Slider, Magnitude.y/Stats.smoothing.Slider)
				end
			end

			if not values.rage.aimbot.enabled.Toggle and values.legit.aimbot['triggerbot'].Toggle and values.legit.aimbot['triggerbot'].Active and not TriggerDebounce then
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name))
				if Stats.triggerbot.Toggle then
					if not table.find(Stats.conditions.Jumbobox, 'blind') or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then
						if not table.find(Stats.conditions.Jumbobox, 'standing') or SelfVelocity.Magnitude < 3 then
							if Mouse.Target and Mouse.Target.Parent and Players:GetPlayerFromCharacter(Mouse.Target.Parent) and Multipliers[Mouse.Target.Name] ~= nil and Client.gun.DMG.Value * Multipliers[Mouse.Target.Name] >= Stats['minimum dmg'].Slider then
								local OldTarget = Mouse.Target
								local Player = Players:GetPlayerFromCharacter(Mouse.Target.Parent)
								if Player.Team ~= LocalPlayer.Team or values.legit.settings['free for all'].Toggle then
									coroutine.wrap(function()
										TriggerDebounce = true
										wait(Stats['delay (ms)'].Slider/1000)
										repeat RunService.RenderStepped:Wait()
											if not Client.DISABLED then
												Client.firebullet()
											end
										until Mouse.Target == nil or Player ~= Players:GetPlayerFromCharacter(Mouse.Target.Parent)
										TriggerDebounce = false
									end)()
								end
							end
						end
					end
				end
			end 
		end
	end	
end)

game:GetService('RunService'):BindToRenderStep('Obama', 0, function()	
	CamCFrame = Camera.CFrame
	CamLook = CamCFrame.LookVector

	RageTarget = nil
	
	pcall(function()
		Fov.Visible = values.legit.settings['draw fov'].Toggle

		Fov.Transparency = values.legit.settings['draw fov'].Transparency
	
		Fov.Color =  values.legit.settings['draw fov'].Color
		Fov.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
		Fov.Radius = GetStatsLegit(GetWeaponLegit(Client.gun.Name))['field of view'].Slider
		Fov.Thickness = values.legit.settings['fov thickness'].Slider
		Fov.Filled = values.legit.settings['filled fov'].Toggle
	end)



	
	if Spin == 360 then Spin = 0 end

	for i,v in pairs(ChamItems) do
		local cham = v[1]
		local fromobject = v[2]
		if cham.Parent == nil then
			table.remove(ChamItems, i)
		else 
			if cham.Name == 'WallCham' then 
				if cham:IsA('BoxHandleAdornment') then 
					cham.Size = fromobject.Size + Vector3.new( (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10))
				elseif cham:IsA('CylinderHandleAdornment') then 
					cham.Height = 1.2 + (values.visuals.players['cham thickness'].Slider/10)
					cham.Radius = 0.61 + (values.visuals.players['cham thickness'].Slider/10)
				end
			elseif cham.Name == 'VisibleCham' then
				if cham:IsA('BoxHandleAdornment') then 
					cham.Size = fromobject.Size + Vector3.new( (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10))
				elseif cham:IsA('CylinderHandleAdornment') then 
					cham.Height = 1.2 + (values.visuals.players['vcham thickness'].Slider/10)
					cham.Radius = 0.61 + (values.visuals.players['vcham thickness'].Slider/10)
				end
			end
		end
	end

	if PlayerIsAlive then
		if values.rage.exploits['around the world'].Toggle and values.rage.exploits['around the world'].Active then 
			for i,v in next, Players:GetChildren() do
				if v ~= LocalPlayer and v.Team ~= LocalPlayer.Team then
					if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
						aroundtheworld_value=aroundtheworld_value + (0.01 * values.rage.exploits['speed'].Slider)
						LocalPlayer.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame*CFrame.Angles(0, aroundtheworld_value, 0)*CFrame.new(0, values.rage.exploits['height'].Slider, values.rage.exploits['distance'].Slider)
						break
					end
				end
			end
		end
		if values.visuals.trail['enable'].Toggle then
			pcall(function()
			if not LocalPlayer.Character.HumanoidRootPart:FindFirstChild('Trail') then 
				Part = LocalPlayer.Character.HumanoidRootPart
				offset = -2
				local Attachment = Instance.new('Attachment')
				Attachment.Name = 'A1'
				Attachment.Position = Vector3.new(-0.55602997541428, offset, 0)
				Attachment.Parent = Part
				
				local Trail = Instance.new('Trail')
				Trail.LightInfluence = 0
				Trail.TextureMode = Enum.TextureMode.Static
				Trail.LightEmission = 1
				Trail.MaxLength = 10
				Trail.Texture = 'rbxassetid://7485088415'
				Trail.Parent = Part
				Trail.Transparency = NumberSequence.new(0)
				Trail.FaceCamera = false

				local Attachment1 = Instance.new('Attachment')
				Attachment1.Name = 'A2'
				Attachment1.Position = Vector3.new(0.55602943897247, offset, 0)
				Attachment1.Parent = Part


				Trail.Attachment0 = Attachment
				Trail.Attachment1 = Attachment1
			else 
				local trail = LocalPlayer.Character.HumanoidRootPart.Trail
				local a1 = LocalPlayer.Character.HumanoidRootPart.A1
				local a2 = LocalPlayer.Character.HumanoidRootPart.A2

				trail.MaxLength = values.visuals.trail['max length'].Slider
				trail.Texture = 'rbxassetid://'..values.visuals.trail['image'].Text

				if values.visuals.trail['custom color'].Toggle then 
					trail.Color = ColorSequence.new(values.visuals.trail['custom color'].Color)
				else 
					trail.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
				end

				a1.Position = Vector3.new(values.visuals.trail['size (x,z)'].Slider/10, 5-(values.visuals.trail['offset (y)'].Slider)/5, 0)
				a2.Position = Vector3.new(-values.visuals.trail['size (x,z)'].Slider/10, 5-(values.visuals.trail['offset (y)'].Slider/5), 0)
				trail.FaceCamera = values.visuals.trail['face camera'].Toggle

			end
		    end)
		elseif LocalPlayer.Character.HumanoidRootPart:FindFirstChild('Trail') then 
			LocalPlayer.Character.HumanoidRootPart.Trail:Remove()
		end
		
		local SelfVelocity = LocalPlayer.Character.HumanoidRootPart.Velocity
		if values.rage.fakelag['ping spike'].Toggle and values.rage.fakelag['ping spike'].Active then
			for count = 1, 20  do
				game:GetService('ReplicatedStorage').Events.RemoteEvent:FireServer({[1] = 'createparticle', [2] = 'bullethole', [3] = LocalPlayer.Character.Head, [4] = Vector3.new(0,0,0)}) 
			end
		end

		if values.misc.animations.enabled.Toggle then
			if LoadedAnim then 
				if savedanimationdance ~= Dance then 
					savedanimationdance = Dance
					LoadedAnim:Stop()
				end
				if not LoadedAnim.IsPlaying then 
					savedanimationdance = Dance
					LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
					LoadedAnim.Priority = Enum.AnimationPriority.Action
					LoadedAnim:Play()
					LoadedAnim:AdjustSpeed(values.misc.animations['animation speed'].Slider)
				end
			else 
				savedanimationdance = Dance
				LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
				LoadedAnim.Priority = Enum.AnimationPriority.Action
				LoadedAnim:Play()
				LoadedAnim:AdjustSpeed(values.misc.animations['animation speed'].Slider)
			end
		else 
			if LoadedAnim then 
				LoadedAnim:Stop()
			end
		end


		Root = LocalPlayer.Character.HumanoidRootPart
		frchr = workspace:FindFirstChild('FreezeCharacter2') or workspace:FindFirstChild('FreezeCharacter')
		if frchr and frchr.Size.x >= 5 then 
			Root = frchr
		end
		if values.misc.client['infinite crouch'].Toggle then
			Client.crouchcooldown = 0
		end
		if values.misc.client['auto join team'].Toggle then
			game:GetService('ReplicatedStorage').Events.JoinTeam:FireServer(values.misc.client['team'].Dropdown)
		end
		if table.find(values.misc.client['gun modifiers'].Jumbobox, 'firerate') then
			Client.DISABLED = false
		end
		peektimewait=peektimewait+1
		if values.rage['quick peeks']['quick peek'].Toggle and allowedtofreeze  then
			if values.rage['quick peeks']['quick peek'].Active then 
				if not workspace:FindFirstChild('FreezeCharacter') then 
					local part = Instance.new('Part', workspace)

					if values.rage['quick peeks']['peek method'].Dropdown == 'freeze' then
						part.Size = Vector3.new(15,1,15) 
					else 
						part.Size = Vector3.new(0, 0, 0)
					end

					part.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
					part.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
					part.CanCollide = false
					part.Transparency = 1
					part.Name = 'FreezeCharacter'
		

					local weld = Instance.new('Weld',part)
					weld.Part0 = part
					weld.Part1 = game.Players.LocalPlayer.Character.HumanoidRootPart

					local visualize = Instance.new('MeshPart', part)
					visualize.Size = Vector3.new(0.5, 0.2, 0.5) 
					visualize.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position+Vector3.new(0, -3 , 0)
					visualize.CanCollide = false
					visualize.Anchored = true
					visualize.MeshId = 'rbxassetid://5536195161'
					visualize.Material = 'Neon'
					visualize.Color = values.rage['quick peeks']['visualize circle'].Color

					visualize.Name = 'no'
					if values.rage['quick peeks']['visualize circle'].Toggle then
						visualize.Transparency = values.rage['quick peeks']['visualize circle'].Transparency
					else 
						visualize.Transparency = 1
					end

				else 
					if not freezebusy2 and values.rage['quick peeks']['time limit'].Toggle then 
						if peektimewait >= values.rage['quick peeks']['time duration'].Slider then 
							peektimewait = 0
							freezebusy2 = true

							wait(0.2)

							pcall(function()
								workspace.FreezeCharacter.Size = Vector3.new(0,0,0)

								wait(values.rage['quick peeks']['wbr'].Slider/100)
	
								workspace.FreezeCharacter:Remove()
							end)


							freezebusy2 = false
						end
					end
					if not freezebusy1 and values.rage['quick peeks']['limit peek'].Toggle then
						if workspace:FindFirstChild('FreezeCharacter') and (workspace.FreezeCharacter.no.Position - workspace.Camera.Focus.p).Magnitude > values.rage['quick peeks']['limit distance'].Slider then
							freezebusy1 = true

							wait(0.2)

							pcall(function()
								workspace.FreezeCharacter.Size = Vector3.new(0,0,0)
								
								wait(values.rage['quick peeks']['wbr'].Slider/100)

								workspace.FreezeCharacter:Remove()
							end)

							freezebusy1 = false
						end
					end
				end
			else 
				peektimewait=0

				if workspace:FindFirstChild('FreezeCharacter') then 
					workspace:FindFirstChild('FreezeCharacter'):Remove()
				end
			end 
		else 
			peektimewait=0

			if workspace:FindFirstChild('FreezeCharacter') then 
				workspace:FindFirstChild('FreezeCharacter'):Remove()
			end
		end
		if values.rage.exploits['kill all'].Toggle and values.rage.exploits['kill all'].Active and LocalPlayer.Character:FindFirstChild('UpperTorso') and LocalPlayer.Character:FindFirstChild('Gun') then
			for _,Player in pairs(Players:GetPlayers()) do
				if Player.Character and Player.Team ~= LocalPlayer.Team and Player.Character:FindFirstChild('UpperTorso') then
					local oh1 = Player.Character.Head
					local oh2 = Player.Character.Head.CFrame.p
					local oh3 = Client.gun.Name
					local oh4 = 4096
					local oh5 = LocalPlayer.Character.Gun
					local oh8 = 15
					local oh9 = false
					local oh10 = false
					local oh11 = Vector3.new(0,0,0)
					local oh12 = 16868
					local oh13 = Vector3.new(0, 0, 0)
					game:GetService('ReplicatedStorage').Events.HitPart:FireServer(oh1, oh2, oh3, oh4, oh5, oh6, oh7, oh8, oh9, oh10, oh11, oh12, oh13)
				end
			end
		end
		if table.find(values.visuals.effects.removals.Jumbobox, 'scope lines') then 
			NewScope.Enabled = LocalPlayer.Character:FindFirstChild('AIMING') and true or false
			PlayerGui.GUI.Crosshairs.Scope.Visible = false
		else
			NewScope.Enabled = false
		end
		
		BodyVelocity:Destroy()
		BodyVelocity = Instance.new('BodyVelocity')
		BodyVelocity.MaxForce = Vector3.new(math.huge,0,math.huge)
		if UserInputService:IsKeyDown('Space') and values.misc.movement['bunny hop'].Toggle then
			local add = 0
			if values.misc.movement.direction.Dropdown == 'directional' or values.misc.movement.direction.Dropdown == 'directional 2' then
				if UserInputService:IsKeyDown('A') then add = 90 end
				if UserInputService:IsKeyDown('S') then add = 180 end
				if UserInputService:IsKeyDown('D') then add = 270 end
				if UserInputService:IsKeyDown('A') and UserInputService:IsKeyDown('W') then add = 45 end
				if UserInputService:IsKeyDown('D') and UserInputService:IsKeyDown('W') then add = 315 end
				if UserInputService:IsKeyDown('D') and UserInputService:IsKeyDown('S') then add = 225 end
				if UserInputService:IsKeyDown('A') and UserInputService:IsKeyDown('S') then add = 145 end
			end
			local rot = YROTATION(CamCFrame) * CFrame.Angles(0,math.rad(add),0)
			local bhopspeed = values.misc.movement['overwrite'].Toggle and values.misc.movement['overwrite'].Active and values.misc.movement['overwrite speed'].Slider or values.misc.movement['speed'].Slider
			BodyVelocity.Parent = LocalPlayer.Character.UpperTorso
			LocalPlayer.Character.Humanoid.Jump = true
			BodyVelocity.Velocity = Vector3.new(rot.LookVector.X,0,rot.LookVector.Z) * (bhopspeed * 2)
			if add == 0 and values.misc.movement.direction.Dropdown == 'directional' and not UserInputService:IsKeyDown('W') then
				BodyVelocity:Destroy()
			else


				if values.misc.movement.type.Dropdown == 'cframe' then
					BodyVelocity:Destroy()
					Root.CFrame = Root.CFrame + Vector3.new(rot.LookVector.X,0,rot.LookVector.Z) * bhopspeed/50
				elseif values.misc.movement.type.Dropdown == 'velocity' then
					BodyVelocity:Destroy()
					Root.Velocity = Vector3.new(rot.LookVector.X * (bhopspeed * 2), Root.Velocity.y, rot.LookVector.Z * (bhopspeed * 2))
				elseif values.misc.movement.type.Dropdown == 'idk' then
					BodyVelocity:Destroy()
					spawn(function()
						if not switchtrigger[1]  then 
							switchtrigger[1] = true
							wait(0.5)
							switchtrigger[3] = Root.CFrame
							Root.CFrame = switchtrigger[2]
	
							wait(0.1)
							Root.CFrame = switchtrigger[3]
							switchtrigger[1] = false
						end
					end)
					
					Root.CFrame = Root.CFrame + Vector3.new(rot.LookVector.X, 0, rot.LookVector.Z) * bhopspeed/50
				end
			end
		end
		if values.misc.movement['gravity change'].Toggle and values.misc.movement['gravity change'].Active  then 
		    workspace.Gravity = values.misc.movement['gravity amount'].Slider
		else 
		    workspace.Gravity = 80
		end


		if values.misc.movement['no launch'].Toggle and values.misc.movement['no launch'].Active then 
			if Root.Velocity.Y > values.misc.movement['launch block (y velocity)'].Slider then 
				Root.Velocity = Vector3.new(Root.Velocity.x, 0, Root.Velocity.z)
			end
		end
		if values.misc.movement['edge jump'].Toggle and values.misc.movement['edge jump'].Active then
			if LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
				coroutine.wrap(function()
					RunService.RenderStepped:Wait()
					if LocalPlayer.Character ~= nil and LocalPlayer.Character:FindFirstChild('Humanoid') and LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
						LocalPlayer.Character.Humanoid:ChangeState('Jumping')
					end
				end)()
			end
		end

		spawn(function()
			if not jitterwait then
				jitterwait = true
				Jitter = not Jitter
				wait(values.rage.angles['jitter wait (ms)'].Slider/100) 
				jitterwait = false
			end
		end)
		
		LocalPlayer.Character.Humanoid.AutoRotate = false
		if values.rage.angles.enabled.Toggle and not DisableAA then
			local Angle = -math.atan2(CamLook.Z, CamLook.X) + math.rad(-90)
			if values.rage.angles['yaw base'].Dropdown == 'spin' then
				Angle = Angle + math.rad(Spin)
			end
			if values.rage.angles['yaw base'].Dropdown == 'random' then
				Angle = Angle + math.rad(math.random(0, 360))
			end
			local Offset = math.rad(-values.rage.angles['yaw offset'].Slider - (values.rage.angles.jitter.Toggle and Jitter and values.rage.angles['jitter offset'].Slider or values.rage.angles['shoot pitch'].Toggle and shotthingy and values.rage.angles['offset'].Slider or 0))
			local CFramePos = CFrame.new(Root.Position) * CFrame.Angles(0, Angle + Offset, 0)

			if values.rage.angles['yaw base'].Dropdown == 'targets' then
				local part
				local closest = 9999999
				for _,plr in pairs(Players:GetPlayers()) do
					if plr.Character and plr.Character:FindFirstChild('Humanoid') and plr.Character:FindFirstChild('Humanoid').Health > 0 and plr.Team ~= LocalPlayer.Team then
						local pos, onScreen = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
						local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
						if closest > magnitude then
							part = plr.Character.HumanoidRootPart
							closest = magnitude
						end
					end
				end
				if part ~= nil then
					CFramePos = CFrame.new(Root.Position, part.Position) * CFrame.Angles(0, Offset, 0)
				end
			end
			if values.rage.angles['lock yaw'].Toggle and values.rage.angles['lock yaw'].Active then 
				if lockyaw == nil then 
					lockyaw = Angle
				end
				CFramePos = CFrame.new(Root.Position) * CFrame.Angles(0, lockyaw + Offset, 0)
			else 
				lockyaw = Angle
			end
			Root.CFrame = YROTATION(CFramePos)
			switch180roll = not switch180roll
			if values.rage.angles['body roll'].Dropdown == 'switch' then
				if switch180roll then 
					Root.CFrame = Root.CFrame * CFrame.Angles(math.rad(180), 0, 0)
					LocalPlayer.Character.Humanoid.HipHeight = 1.5
					LocalPlayer.Character.Humanoid.CameraOffset = Vector3.new(0, -2.7, 0)
				else
					LocalPlayer.Character.Humanoid.HipHeight = 1.5
				end
			end

			if values.rage.angles['body roll'].Dropdown == '180' then
				Root.CFrame = Root.CFrame * CFrame.Angles(values.rage.angles['body roll'].Dropdown == '180' and math.rad(180 + values.rage.angles['roll offset'].Slider) or 0, 0, 0)
				LocalPlayer.Character.Humanoid.HipHeight = 2
			else
				LocalPlayer.Character.Humanoid.HipHeight = 2
			end

			savedspinpitch=savedspinpitch+0.25
			local Pitch = values.rage.angles['pitch'].Dropdown == 'none' and CamLook.Y or values.rage.angles['pitch'].Dropdown == 'up' and 1 or values.rage.angles['pitch'].Dropdown == 'down' and -1 or values.rage.angles['pitch'].Dropdown == 'zero' and 0 or values.rage.angles['pitch'].Dropdown == 'among' and math.huge or values.rage.angles['pitch'].Dropdown == 'random' and Random.new():NextNumber(-50,50) or values.rage.angles['pitch'].Dropdown == 'spin' and savedspinpitch 

			if values.rage.angles['extend pitch'].Toggle and (values.rage.angles['pitch'].Dropdown == 'up' or values.rage.angles['pitch'].Dropdown == 'down') then
				Pitch = (Pitch*2)/1.6
			end
			if values.rage.angles['custom pitch'].Toggle then
			    Pitch = values.rage.angles['pitch value'].Slider/7
			end
			if values.rage.angles.jitter.Toggle and Jitter then 
				Pitch = values.rage.angles['jitter pitch'].Slider/7
			end

			if values.rage.angles['shoot pitch'].Toggle and shotthingy then 
				Pitch = values.rage.angles['pitch'].Slider/7
			end

			if values.rage.angles['overwrite keybind'].Toggle and values.rage.angles['overwrite keybind'].Active then
				Pitch = values.rage.angles['overwrite pitch'].Dropdown == 'none' and CamLook.Y or values.rage.angles['overwrite pitch'].Dropdown == 'up' and 1 or values.rage.angles['overwrite pitch'].Dropdown == 'down' and -1 or values.rage.angles['overwrite pitch'].Dropdown == 'zero' and 0 or values.rage.angles['overwrite pitch'].Dropdown == 'among' and math.huge or values.rage.angles['overwrite pitch'].Dropdown == 'random' and Random.new():NextNumber(0.01,10) or values.rage.angles['overwrite pitch'].Dropdown == 'spin' and savedspinpitch
		    end

			game.ReplicatedStorage.Events.ControlTurn:FireServer(Pitch, LocalPlayer.Character:FindFirstChild('Climbing') and true or false)
		else
			LocalPlayer.Character.Humanoid.HipHeight = 2
			Root.CFrame = CFrame.new(Root.Position) * CFrame.Angles(0, -math.atan2(CamLook.Z, CamLook.X) + math.rad(270), 0)
			game.ReplicatedStorage.Events.ControlTurn:FireServer(CamLook.Y, LocalPlayer.Character:FindFirstChild('Climbing') and true or false)
		end
		if values.rage.others['remove head'].Toggle then
			if LocalPlayer.Character:FindFirstChild('FakeHead') then
				LocalPlayer.Character.FakeHead:Destroy()
			end
			if LocalPlayer.Character:FindFirstChild('HeadHB') then
				LocalPlayer.Character.HeadHB:Destroy()
			end
		end
		if table.find(values.misc.client['gun modifiers'].Jumbobox, 'recoil') then
			Client.resetaccuracy()
			Client.RecoilX = 0
			Client.RecoilY = 0
		end
	else 
		pcall(function()
			workspace:FindFirstChild('FreezeCharacter'):Remove()
		end)
	end
	for _,Player in pairs(Players:GetPlayers()) do
		if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild('HumanoidRootPart') and Player.Character.HumanoidRootPart:FindFirstChild('OldPosition') then
			coroutine.wrap(function()
				local Position = Player.Character.HumanoidRootPart.Position
				RunService.RenderStepped:Wait()
				if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild('HumanoidRootPart') then
					if Player.Character.HumanoidRootPart:FindFirstChild('OldPosition') then
						Player.Character.HumanoidRootPart.OldPosition.Value = Position
					else
						local Value = Instance.new('Vector3Value')
						Value.Name = 'OldPosition'
						Value.Value = Position
						Value.Parent = Player.Character.HumanoidRootPart
					end
				end
			end)()
		end
	end

	for _,Player in pairs(Players:GetPlayers()) do
		local tbl = objects[Player]
		if tbl == nil then return end
		if Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') and Player.Team ~= 'TTT' and (Player.Team ~= LocalPlayer.Team or values.visuals.players.teammates.Toggle) and Player.Character:FindFirstChild('Gun') and Player.Character:FindFirstChild('Humanoid') and Player ~= LocalPlayer then
			local HumanoidRootPart = Player.Character.HumanoidRootPart
			local RootPosition = HumanoidRootPart.Position
			local Pos, OnScreen = Camera:WorldToViewportPoint(RootPosition)
			local Size = (Camera:WorldToViewportPoint(RootPosition - Vector3.new(0, 3, 0)).Y - Camera:WorldToViewportPoint(RootPosition + Vector3.new(0, 2.6, 0)).Y) / 2

			local Drawings, Text = table.find(values.visuals.players.outlines.Jumbobox, 'drawings') ~= nil, table.find(values.visuals.players.outlines.Jumbobox, 'text') ~= nil

			tbl.Box.Color = (values.rage['loop kill']['Target box'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown and values.rage['loop kill']['Target box'].Color or values.visuals.players.box.Color)
			tbl.Box.Size = Vector2.new(Size * 1.5, Size * 1.9)
			tbl.Box.Position = Vector2.new(Pos.X - Size*1.5 / 2, (Pos.Y - Size*1.6 / 2))

			-- edited
			
			if values.visuals.players.box.Toggle or (values.rage['loop kill']['Target box'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown) then
				tbl.Box.Visible = OnScreen
				tbl.Box.Thickness = 0.001
				if Drawings then
					tbl.BoxOutline.Size = tbl.Box.Size
					tbl.BoxOutline.Position = tbl.Box.Position
					tbl.BoxOutline.Visible = OnScreen
				else
					tbl.BoxOutline.Visible = false
				end
			else
				tbl.Box.Visible = false
				tbl.BoxOutline.Visible = false
			end

			if values.visuals.players.health.Toggle or (values.rage['loop kill']['Target health'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown) then
				tbl.Health.Color = (values.rage['loop kill']['Target health'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown and values.rage['loop kill']['Target health'].Color or values.visuals.players.health.Color)
				tbl.Health.From = Vector2.new((tbl.Box.Position.X - 5), tbl.Box.Position.Y + tbl.Box.Size.Y)
				tbl.Health.To = Vector2.new(tbl.Health.From.X, tbl.Health.From.Y - math.clamp(Player.Character.Humanoid.Health / Player.Character.Humanoid.MaxHealth, 0, 1) * tbl.Box.Size.Y)
				tbl.Health.Visible = OnScreen
				if Drawings then
					tbl.HealthOutline.From = Vector2.new(tbl.Health.From.X, tbl.Box.Position.Y + tbl.Box.Size.Y + 1)
					tbl.HealthOutline.To = Vector2.new(tbl.Health.From.X, (tbl.Health.From.Y - 1 * tbl.Box.Size.Y) -1)
					tbl.HealthOutline.Visible = OnScreen
				else
					tbl.HealthOutline.Visible = false
				end
			else
				tbl.Health.Visible = false
				tbl.HealthOutline.Visible = false
			end

			if values.visuals.players.weapon.Toggle or (values.rage['loop kill']['Target weapon'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown) then
				tbl.Weapon.Color = (values.rage['loop kill']['Target weapon'].Toggle and Player.Name == values.rage['loop kill'].Player.Dropdown and values.rage['loop kill']['Target weapon'].Color or values.visuals.players.weapon.Color)
				tbl.Weapon.Text = Player.Character.EquippedTool.Value
				tbl.Weapon.Position = Vector2.new(tbl.Box.Size.X/2 + tbl.Box.Position.X, tbl.Box.Size.Y + tbl.Box.Position.Y + 1)
				tbl.Weapon.Font = Drawing.Fonts[values.visuals.players.font.Dropdown]
				tbl.Weapon.Outline = Text
				tbl.Weapon.Size = values.visuals.players.size.Slider
				tbl.Weapon.Visible = OnScreen
			else
				tbl.Weapon.Visible = false
			end

			if values.visuals.players['weapon icon'].Toggle or (values.rage['loop kill']['Target weapon icon'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown) then
				Items[Player.Name].ImageColor3 = (values.rage['loop kill']['Target weapon icon'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown and values.rage['loop kill']['Target weapon icon'].Color or values.visuals.players['weapon icon'].Color)
				Items[Player.Name].Image = GetIcon.getWeaponOfKiller(Player.Character.EquippedTool.Value)
				Items[Player.Name].Position = UDim2.new(0, tbl.Box.Size.X/2 + tbl.Box.Position.X, 0, tbl.Box.Size.Y + tbl.Box.Position.Y + (values.visuals.players.weapon.Toggle and -10 or -22))
				Items[Player.Name].Visible = OnScreen
			else
				Items[Player.Name].Visible = false
			end

			if values.visuals.players.name.Toggle or (values.rage['loop kill']['Target name'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown)  then
				tbl.Name.Color = (values.rage['loop kill']['Target name'].Toggle and Player.Name == values.rage['loop kill']['Player'].Dropdown and values.rage['loop kill']['Target name'].Color or values.visuals.players.name.Color)
				tbl.Name.Text = Player.Name
				tbl.Name.Position = Vector2.new(tbl.Box.Size.X/2 + tbl.Box.Position.X,  tbl.Box.Position.Y - 16)
				tbl.Name.Font = Drawing.Fonts[values.visuals.players.font.Dropdown]
				tbl.Name.Outline = Text
				tbl.Name.Size = values.visuals.players.size.Slider
				tbl.Name.Visible = OnScreen
			else
				tbl.Name.Visible = false
			end
			local LastInfoPos = tbl.Box.Position.Y - 1
			if table.find(values.visuals.players.indicators.Jumbobox, 'armor') and Player:FindFirstChild('Kevlar') then
				tbl.Armor.Color = Color3.fromRGB(0, 150, 255)
				tbl.Armor.Text = Player:FindFirstChild('Helmet') and 'HK' or 'K'
				tbl.Armor.Position = Vector2.new(tbl.Box.Size.X + tbl.Box.Position.X + 12, LastInfoPos)
				tbl.Armor.Font = Drawing.Fonts[values.visuals.players.font.Dropdown]
				tbl.Armor.Outline = Text
				tbl.Armor.Size = values.visuals.players.size.Slider
				tbl.Armor.Visible = OnScreen

				LastInfoPos = LastInfoPos + values.visuals.players.size.Slider
			else
				tbl.Armor.Visible = false
			end
		else
			if Player.Name ~= LocalPlayer.Name then
				Items[Player.Name].Visible = false
				for i,v in pairs(tbl) do
					v.Visible = false
				end
			end
		end
	end

	if workspace:FindFirstChild('Map') and Client.gun ~= 'none' and Client.gun.Name ~= 'C4' then
		if values.misc.movement['height change'].Toggle then 
		pcall(function() LocalPlayer.Character.Humanoid.HipHeight = 2 * (values.misc.movement['height amount'].Slider/5) end)
	else 
	    pcall(function() LocalPlayer.Character.Humanoid.HipHeight = 2 end)
	end

	if values.misc.movement['no velocity'].Toggle then 
	   pcall(function() LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, LocalPlayer.Character.HumanoidRootPart.Velocity.y, 0) end)
	end

	if values.misc.movement['no gun'].Toggle then 
	   pcall(function() LocalPlayer.Character.Gun:Remove()end)
	end

	if values.misc.movement['client offset'].Toggle then 
       pcall(function() LocalPlayer.Character.LowerTorso:FindFirstChildWhichIsA('Motor6D').C0 = CFrame.new(0, (values.misc.movement['offset (y)'].Slider/5), 0) end)
    end

	end
end)
]]--

oldcamforfreeze = nil
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
local oldIndex = mt.__index
local oldNewIndex = mt.__newindex
local lasthittick = tick()
setreadonly(mt,false)
mt.__namecall = function(self, ...)
	local method = tostring(getnamecallmethod())
	local args = {...}

	if method == 'SetPrimaryPartCFrame' and self.Name == 'Arms' then
		if values.visuals.self['hide arms'].Toggle and LocalPlayer.Character then
			args[1] = args[1] * CFrame.new(99, 99, 99)
		else
			if values.visuals.self['viewmodel changer'].Toggle then
				args[1] = args[1] * ViewmodelOffset
			end
		end
	end
	if method == 'SetPrimaryPartCFrame' and self.Name ~= 'Arms' then
		args[1] = args[1] + Vector3.new(0, 3, 0)
		coroutine.wrap(function()
			DisableAA = true
			wait(2)
			DisableAA = false
		end)()
	end
	if method == 'Kick' then
		return
	end
	if method == 'FireServer' then
		if string.len(self.Name) == 38 then
			return
		elseif self.Name == 'FallDamage' and table.find(values.misc.client['damage bypass'].Jumbobox, 'fall') or values.misc.movement['jump bug'].Toggle and values.misc.movement['jump bug'].Active then
			return
		elseif self.Name == 'BURNME' and table.find(values.misc.client['damage bypass'].Jumbobox, 'fire') then
			return
		elseif self.Name == 'ControlTurn' and not checkcaller() then
			return
		end
		if self.Name == 'PlayerChatted' and values.misc.client['chat alive'].Toggle then
			args[2] = false
			args[3] = 'Innocent'
			args[4] = false
			args[5] = false
		end
		if self.Name == 'ReplicateCamera' then
			if values.misc.client['anti spectate'].Toggle then
				args[1] = CFrame.new()
			elseif values.visuals.self['third person'].Toggle and values.visuals.self['third person'].Active then
				local cframecam = args[1]*CFrame.new(0,0,-values.visuals.self.distance.Slider)
				args[1] = cframecam
			end
		end
		
	end
	if method == 'FindPartOnRayWithWhitelist' and not checkcaller() and Client.gun ~= 'none' and Client.gun.Name ~= 'C4' then
		if #args[2] == 1 and args[2][1].Name == 'SpawnPoints' then
			local Team = LocalPlayer.Status.Team.Value

			if table.find(values.misc.client.shop.Jumbobox, 'anywhere') then
				return Team == 'T' and args[2][1].BuyArea or args[2][1].BuyArea2
			end
		end
	end
	if method == 'FindPartOnRayWithIgnoreList' and args[2][1] == workspace.Debris then
		if not checkcaller() or Filter then
			if table.find(values.misc.client['gun modifiers'].Jumbobox, 'penetration') then
				table.insert(args[2], workspace.Map)
			end
			if table.find(values.misc.client['gun modifiers'].Jumbobox, 'spread') then
				args[1] = Ray.new(Camera.CFrame.p, Camera.CFrame.LookVector * Client.gun.Range.Value)
			end
--[[
			local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name))
			if values.legit.aimbot['silent aim'].Toggle and values.legit.aimbot['silent aim'].Active and Stats['silent aim'].Toggle then
				local Ignore = {LocalPlayer.Character, Camera, workspace.Map.Clips, workspace.Map.SpawnPoints, workspace.Debris}
				local Closest = 9999
				local Target

				if not table.find(Stats.conditions.Jumbobox, 'smoke') then
					table.insert(Ignore, workspace.Ray_Ignore)
				end

				coroutine.wrap(function()
					if not table.find(Stats.conditions.Jumbobox, 'blind') or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then
						if not table.find(Stats.conditions.Jumbobox, 'blind') or SelfVelocity.Magnitude < 3 then
							for _,Player in pairs(Players:GetPlayers()) do
								if Player.Character and Player.Character:FindFirstChild('Humanoid') and Player.Character:FindFirstChild('Humanoid').Health > 0 then
									if not values.legit.settings['forcefield check'].Toggle or not Player.Character:FindFirstChildOfClass('ForceField') then
										if Player.Team ~= LocalPlayer.Team or values.legit.settings['free for all'].Toggle then
											local Pos, onScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)
											if onScreen then
												local Magnitude = (Vector2.new(Pos.X, Pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
												if Magnitude < Stats['field of view'].Slider then
													local Hitbox = Stats.priority.Dropdown == 'head' and Player.Character.Head or Stats.priority.Dropdown == 'chest' and Player.Character.UpperTorso
													if Stats.priority.Dropdown == 'closest' then
														local HeadPos = Camera:WorldToViewportPoint(Player.Character.Head.Position)
														local TorsoPos = Camera:WorldToViewportPoint(Player.Character.UpperTorso.Position)
														local HeadDistance = (Vector2.new(HeadPos.X, HeadPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
														local TorsoDistance = (Vector2.new(TorsoPos.X, TorsoPos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
														if HeadDistance < TorsoDistance then
															Hitbox = Player.Character.Head
														else
															Hitbox = Player.Character.UpperTorso
														end
													end
													if Hitbox ~= nil then
														if not table.find(Stats.conditions.Jumbobox, 'visible') then
															Target = Hitbox
														else
															local Ray1 = Ray.new(Camera.CFrame.Position, (Hitbox.Position - Camera.CFrame.Position).unit * (Hitbox.Position - Camera.CFrame.Position).magnitude)
															local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore, false, true)
															if Hit and Hit:FindFirstAncestor(Player.Name) then
																Target = Hitbox
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end

					local Hit = math.random(1, 100) <= Stats.hitchance.Slider
					if Target ~= nil and Hit then
						args[1] = Ray.new(Camera.CFrame.Position, (Target.Position - Camera.CFrame.Position).unit * (Target.Position - Camera.CFrame.Position).magnitude)
					end
				end)()
			end
]]--
			if RageTarget ~= nil then
				local Origin = values.rage.aimbot.origin.Dropdown == 'character' and LocalPlayer.Character.LowerTorso.Position + Vector3.new(0, 2.5, 0) or Camera.CFrame.p
				if values.rage.aimbot['delay shot'].Toggle then
					spawn(function()
						args[1] = Ray.new(Origin, (RageTarget.Position - Origin).unit * (RageTarget.Position - Origin).magnitude)
					end)
				else
					args[1] = Ray.new(Origin, (RageTarget.Position - Origin).unit * (RageTarget.Position - Origin).magnitude)
				end
			end
		end
	end
	if method == 'InvokeServer' then
		if self.Name == 'Moolah' then
			return
		elseif self.Name == 'Hugh' then
			return
		elseif self.Name == 'Filter' and values.misc.chat['no filter'].Toggle then
			return args[1]
		end
	end
	if method == 'LoadAnimation' and self.Name == 'Humanoid' then
		if values.rage.others['leg movement'].Dropdown == 'slide' then
			if string.find(args[1].Name, 'Walk') or string.find(args[1].Name, 'Run')  or string.find(args[1].Name, 'JumpAnim') then
				args[1] = FakeAnim
			end
		end
		if values.rage.others['no animations'].Toggle then
			if not string.find(args[1].Name, 'Dance') then 
				args[1] = FakeAnim
			end
		end
	end
	if method == 'FireServer' and self.Name == 'HitPart' then
		if values.rage.aimbot['force hit'].Toggle then
			args[1] = RageTarget
			args[2] = RageTarget.Position
		end
		
		spawn(function()
			if values.rage['quick peeks']['peek method'].Dropdown == 'teleport' then 
				if workspace:FindFirstChild('FreezeCharacter') then
					LocalPlayer.Character.PrimaryPart.CFrame = workspace.FreezeCharacter.no.CFrame+Vector3.new(0, 3, 0)
				end
			end
			if values.rage['quick peeks']['peek method'].Dropdown == 'tween' then 
				if workspace:FindFirstChild('FreezeCharacter') then
					F_Tween(LocalPlayer.Character.PrimaryPart, 'CFrame', CFrame.new(workspace.FreezeCharacter.no.CFrame.x, LocalPlayer.Character.PrimaryPart.CFrame.y, workspace.FreezeCharacter.no.CFrame.z), 1/values.rage['quick peeks']['tween speed'].Slider,0 ,0, false)
				end
			end
			if values.rage['quick peeks']['peek method'].Dropdown == 'freeze' and values.rage['quick peeks']['unfreeze shoot'].Toggle then 
				pcall(function()
					workspace.FreezeCharacter.Size = Vector3.new(0,0,0)
					wait(0.1)
					workspace.FreezeCharacter:Remove()
				end)
			end
		end)
		if values.visuals.world['hit chams'].Toggle then
			coroutine.wrap(function()
				if Players:GetPlayerFromCharacter(args[1].Parent) and Players:GetPlayerFromCharacter(args[1].Parent).Team ~= LocalPlayer.Team then
					for _,hitbox in pairs(args[1].Parent:GetChildren()) do
						if hitbox:IsA('BasePart') or hitbox.Name == 'Head' then
							coroutine.wrap(function()
								local selected = values.visuals.world['hit material'].Dropdown
								local part = Instance.new('Part')
								part.Transparency = values.visuals.world['hit chams'].Transparency
								part.CFrame = hitbox.CFrame
								part.Anchored = true
								part.CanCollide = false
								part.Material = Enum.Material[selected == 'Smooth' and 'SmoothPlastic' or selected == 'Flat' and 'Neon' or selected == 'ForceField' and 'ForceField' or 'Glass']
								part.Color = values.visuals.world['hit chams'].Color
								part.Size = hitbox.Size
								part.Parent = workspace.Camera
								spawn(function()
									local tweenstuffe = F_Tween(part, 'Transparency', 1 , values.visuals.world['hit duration'].Slider, 1, 1, true)
									part:Destroy()
								end)
							end)()
						end
					end
				end
			end)()
		end
		if args[1].Parent == workspace.backtrackfolder then 
			if args[1].PlayerName.Value.Character then
				if args[1].PlayerName.Value.Character.Head ~= nil then
				args[1] = args[1].PlayerName.Value.Character.Head
				end
			end
		end
		if values.visuals.world['bullet tracers'].Toggle then
			coroutine.wrap(function()
				local selected = values.visuals.world['tracers material'].Dropdown

				local beam = Instance.new('Part')
				beam.Anchored = true
				beam.CanCollide = false
				beam.Material = Enum.Material[selected == 'Smooth' and 'SmoothPlastic' or selected == 'Flat' and 'Neon' or selected == 'ForceField' and 'ForceField' or 'Glass']
				beam.Transparency = values.visuals.world['bullet tracers'].Transparency
				beam.Color = values.visuals.world['bullet tracers'].Color

				if values.visuals.self['hide arms'].Toggle then 
					beam.Size = Vector3.new(0.001*values.visuals.world['tracers thickness'].Slider, 0.001*values.visuals.world['tracers thickness'].Slider, (workspace.Camera.CFrame.Position - args[2]).Magnitude)
					beam.CFrame = CFrame.new(workspace.Camera.CFrame.Position, args[2]) * CFrame.new(0, 0, -beam.Size.Z / 2)
				else
					pcall(function()
						 beam.Size = Vector3.new(0.001*values.visuals.world['tracers thickness'].Slider, 0.001*values.visuals.world['tracers thickness'].Slider, (workspace.Camera.Arms.Flash.CFrame.Position - args[2]).Magnitude)
						 beam.CFrame = CFrame.new(workspace.Camera.Arms.Flash.CFrame.Position, args[2]) * CFrame.new(0, 0, -beam.Size.Z / 2)
					end)
				end
				beam.Parent = workspace.Debris
				spawn(function()
				tweenstuff = F_Tween(beam, 'Transparency', 1 , values.visuals.world['hit duration'].Slider, 1, 1, true)
				beam:Destroy()
				end)
			end)()
		end
		if method == "FireServer" and self.Name == "HitPart" and tick() - lasthittick > 0.005 then
			lasthittick = tick()
			spawn(function()
				if values.visuals.world["bullet tracers2"].Toggle then
					local Beam = createbullettracer2(LocalPlayer.Character.UpperTorso.Position, args[2])	
				end
			end)
		end
		spawn(function()
			if values.rage['quick peeks']['peek method'].Dropdown == 'teleport' then 
				if workspace:FindFirstChild('FreezeCharacter') then
					LocalPlayer.Character.PrimaryPart.CFrame = workspace.FreezeCharacter.no.CFrame+Vector3.new(0, 3, 0)
				end
			end
			if values.rage['quick peeks']['peek method'].Dropdown == 'tween' then 
				if workspace:FindFirstChild('FreezeCharacter') then
					function Tween(Target,Prop,Value,tweeninfo1,tweeninfo2,tweeninfo3)
						local Tween = game:GetService("TweenService"):Create(Target,TweenInfo.new(tweeninfo1,tweeninfo2,tweeninfo3), {[Prop] = Value})
						Tween:Play() 
					end

					Tween(LocalPlayer.Character.PrimaryPart, 'CFrame', CFrame.new(workspace.FreezeCharacter.no.CFrame.x, LocalPlayer.Character.PrimaryPart.CFrame.y, workspace.FreezeCharacter.no.CFrame.z), 1/values.rage['quick peeks']['tween speed'].Slider,0 ,0)
				end
			end
		end)
		if values.visuals.world['impacts'].Toggle then
			coroutine.wrap(function()
				
				local selected = values.visuals.world['impacts material'].Dropdown

				local hit = Instance.new('Part')
				hit.Material = Enum.Material[selected == 'Smooth' and 'SmoothPlastic' or selected == 'Flat' and 'Neon' or selected == 'ForceField' and 'ForceField' or 'Glass']
				hit.Transparency = values.visuals.world['impacts'].Transparency
				hit.Anchored = true
				hit.CanCollide = false
				hit.Color = values.visuals.world['impacts'].Color
				hit.Size = Vector3.new(0.01*values.visuals.world['impacts thickness'].Slider,0.01*values.visuals.world['impacts thickness'].Slider,0.01*values.visuals.world['impacts thickness'].Slider)
				hit.Position = args[2]
				hit.Parent = workspace.Debris
				spawn(function()
				tweenstuff = F_Tween(hit, 'Transparency', 1 , values.visuals.world['hit duration'].Slider, 1, 1, true)
				hit:Destroy()
				end)
			end)()
		end
		if values.rage.aimbot['prediction'].Dropdown ~= 'off' and RageTarget ~= nil then
			coroutine.wrap(function()
				if Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageTarget then
					if values.rage.aimbot['prediction'].Dropdown == 'automatic' then
						
						local hrp = RageTarget.Parent.HumanoidRootPart.Position
						local oldHrp = RageTarget.Parent.HumanoidRootPart.OldPosition.Value
		
						local vel = (Vector3.new(hrp.X, 0, hrp.Z) - Vector3.new(oldHrp.X, 0, oldHrp.Z)) / LastStep
						local dir = Vector3.new(vel.X / vel.magnitude, 0, vel.Z / vel.magnitude)
		
							
						args[2] = args[2] + dir * (Ping / (math.pow(Ping, (1.5))) * (dir / (dir / 2)))
						args[4] = 0
						args[12] = args[12] - (500)

					elseif values.rage.aimbot['prediction'].Dropdown == 'cframe' then
						local oldPos = RageTarget.Parent.HumanoidRootPart.Position
						local step = RS.RenderStepped:Wait()
						local newPos =RageTarget.Parent.HumanoidRootPart.Position
					
						local playerSpeed = (newPos - oldPos).magnitude / LastStep
						local direction = CFrame.new(oldPos, newPos)
					
						local final = (direction * CFrame.new(0, 0, -(playerSpeed * (ping / 1000)))).p

						args[2] = args[2] + (direction * CFrame.new(0, 0, -(playerSpeed * (ping / 1000)))).p
						args[4] = 0
						args[12] = args[12] - 500
					else
						local Velocity = RageTarget.Parent.HumanoidRootPart.Velocity
						local Direction = Vector3.new(Velocity.X/Velocity.magnitude, 0, Velocity.Z/Velocity.magnitude)
						if Velocity.magnitude >= 8 then
							args[2] = args[2] + Direction * (Velocity.magnitude*(Ping/1000) * (Ping > 200 and 1.5 or 2))
							args[4] = 0
							args[12] = args[12] - 500
						end
					end
				end
			end)()
		end
	end

	return oldNamecall(self, unpack(args))
end
mt.__index = function(self, key)
	local CallingScript = getcallingscript()

	if not checkcaller() and self == Viewmodels and LocalPlayer.Character ~= nil and LocalPlayer.Character:FindFirstChild('UpperTorso') then
		local WeaponName = string.gsub(key, 'v_', '')
		if not string.find(WeaponName, 'Arms') then
			if Weapons[WeaponName]:FindFirstChild('Melee') and values.skins.knife['knife changer'].Toggle then
				if Viewmodels:FindFirstChild('v_'..values.skins.knife.model.Scroll) then
					return Viewmodels:FindFirstChild('v_'..values.skins.knife.model.Scroll)
				else
					local Clone = Models.Knives[values.skins.knife.model.Scroll]:Clone()
					return Clone
				end
			end
		end
	end
	if key == 'Value' then
		if self.Name == 'Auto' and table.find(values.misc.client['gun modifiers'].Jumbobox, 'automatic') then
			return true
		elseif self.Name == 'ReloadTime' and table.find(values.misc.client['gun modifiers'].Jumbobox, 'reload') then
			return 0.001
		elseif self.Name == 'EquipTime' and table.find(values.misc.client['gun modifiers'].Jumbobox, 'equip') then
			return 0.001
		elseif self.Name == 'BuyTime' and table.find(values.misc.client.shop.Jumbobox, 'inf time') then
			return 5
		end
	end

	return oldIndex(self, key)
end

local perf__ = LocalPlayer.PlayerGui.Performance.Perf

mt.__newindex = function(self, i, v)
	if self:IsA('Humanoid') and i == 'JumpPower' and not checkcaller() then
		if values.misc.movement['jump bug'].Toggle and values.misc.movement['jump bug'].Active then
			v = 24
		end
		if values.misc.movement['edge bug'].Toggle and values.misc.movement['edge bug'].Active then
			v = 0
		end
	elseif self:IsA('Humanoid') and i == 'CameraOffset' then
		if values.rage.angles.enabled.Toggle and values.rage.angles['body roll'].Dropdown == '180' and not DisableAA then
			v = v + Vector3.new(0, -3.5, 0)
		end
	end

	return oldNewIndex(self, i, v)
end

PlayerGui.GUI.Crosshairs.Scope:GetPropertyChangedSignal('Visible'):Connect(function(current)
	if not table.find(values.visuals.effects.removals.Jumbobox, 'scope lines') then return end

	if current ~= false then
		PlayerGui.GUI.Crosshairs.Scope.Visible = false
	end
end)

PlayerGui.GUI.Crosshairs.Crosshair:GetPropertyChangedSignal('Visible'):Connect(function(current)
	if not LocalPlayer.Character then return end
	if not values.visuals.effects['force crosshair'].Toggle then return end
	if LocalPlayer.Character:FindFirstChild('AIMING') then return end

	PlayerGui.GUI.Crosshairs.Crosshair.Visible = true
end)

LocalPlayer.Additionals.TotalDamage:GetPropertyChangedSignal('Value'):Connect(function(current)
	if current == 0 then return end
	coroutine.wrap(function()
		if values.misc.client.hitmarker.Toggle then
			local Line = Drawing.new('Line')
			local Line2 = Drawing.new('Line')
			local Line3 = Drawing.new('Line')
			local Line4 = Drawing.new('Line')

			local x, y = Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2

			Line.From = Vector2.new(x + 4, y + 4)
			Line.To = Vector2.new(x + 10, y + 10)
			Line.Color = values.misc.client.hitmarker.Color
			Line.Visible = true 

			Line2.From = Vector2.new(x + 4, y - 4)
			Line2.To = Vector2.new(x + 10, y - 10)
			Line2.Color = values.misc.client.hitmarker.Color
			Line2.Visible = true 

			Line3.From = Vector2.new(x - 4, y - 4)
			Line3.To = Vector2.new(x - 10, y - 10)
			Line3.Color = values.misc.client.hitmarker.Color
			Line3.Visible = true 

			Line4.From = Vector2.new(x - 4, y + 4)
			Line4.To = Vector2.new(x - 10, y + 10)
			Line4.Color = values.misc.client.hitmarker.Color
			Line4.Visible = true

			Line.Transparency = 1
			Line2.Transparency = 1
			Line3.Transparency = 1
			Line4.Transparency = 1

			Line.Thickness = 1
			Line2.Thickness = 1
			Line3.Thickness = 1
			Line4.Thickness = 1

			wait(0.3)
			for i = 1,0,-0.1 do
				wait()
				Line.Transparency = i 
				Line2.Transparency = i
				Line3.Transparency = i
				Line4.Transparency = i
			end
			Line:Remove()
			Line2:Remove()
			Line3:Remove()
			Line4:Remove()
		end
	end)()
	if values.visuals.world.hitsound.Dropdown == 'none' then return end
	local sound = Instance.new('Sound')
	sound.Parent = game:GetService('SoundService')
	sound.SoundId = values.visuals.world.hitsound.Dropdown == 'skeet' and 'rbxassetid://5447626464' or values.visuals.world.hitsound.Dropdown == 'tf2' and 'rbxassetid://2868331684' or values.visuals.world.hitsound.Dropdown == 'rust' and 'rbxassetid://5043539486' or values.visuals.world.hitsound.Dropdown == 'retro' and 'rbxassetid://7293523910' or values.visuals.world.hitsound.Dropdown == 'bag' and 'rbxassetid://364942410' or values.visuals.world.hitsound.Dropdown == 'nn dog' and 'rbxassetid://5902468562' or values.visuals.world.hitsound.Dropdown == 'baimware' and 'rbxassetid://6607339542' or 'rbxassetid://6607204501'
	sound.Volume = values.visuals.world['sound volume'].Slider
	sound.PlayOnRemove = true
	sound:Destroy()
end)

lastcurrent = LocalPlayer.Status.Kills.Value
LocalPlayer.Status.Kills:GetPropertyChangedSignal('Value'):Connect(function(current)
	if current == 0 then return end

	if LocalPlayer.Status.Kills.Value > lastcurrent then 
		if  values.misc.chat['kill say'].Toggle then
			local texatee = textboxtriggers(values.misc.chat['message'].Text)
			game:GetService('ReplicatedStorage').Events.PlayerChatted:FireServer(values.misc.chat['message'].Text ~= '' and texatee or "rawrie what's that! no shiba.gang :(", false, 'Innocent', false, true)
		end	
		
		local sound = Instance.new('Sound')
		sound.Parent = game:GetService('SoundService')
		sound.SoundId = values.visuals.world.killsound.Dropdown == 'skeet' and 'rbxassetid://5447626464' or values.visuals.world.killsound.Dropdown == 'tf2' and 'rbxassetid://2868331684' or values.visuals.world.killsound.Dropdown == 'rust' and 'rbxassetid://5043539486' or values.visuals.world.killsound.Dropdown == 'retro' and 'rbxassetid://7293523910' or values.visuals.world.killsound.Dropdown == 'bag' and 'rbxassetid://364942410' or values.visuals.world.killsound.Dropdown == 'nn dog' and 'rbxassetid://5902468562' or values.visuals.world.killsound.Dropdown == 'baimware' and 'rbxassetid://6607339542' or 'rbxassetid://6607204501'
		sound.Volume = values.visuals.world['sound volume'].Slider
		sound.PlayOnRemove = true
		sound:Destroy()
	end


	lastcurrent = LocalPlayer.Status.Kills.Value
end)

RayIgnore.ChildAdded:Connect(function(obj)
	if obj.Name == 'Fires' then
		obj.ChildAdded:Connect(function(fire)
			if values.visuals.world['molly radius'].Toggle then
				fire.Transparency = values.visuals.world['molly radius'].Transparency
				fire.Color = values.visuals.world['molly radius'].Color
			end
		end)
	end
	if obj.Name == 'Smokes' then
		obj.ChildAdded:Connect(function(smoke)
			RunService.RenderStepped:Wait()
			local OriginalRate = Instance.new('NumberValue')
			OriginalRate.Value = smoke.ParticleEmitter.Rate
			OriginalRate.Name = 'OriginalRate'
			OriginalRate.Parent = smoke
			if table.find(values.visuals.effects.removals.Jumbobox, 'smokes') then
				smoke.ParticleEmitter.Rate = 0
			end
			smoke.Material = Enum.Material.ForceField
			if values.visuals.world['smoke radius'].Toggle then
				smoke.Transparency = 0
				smoke.Color = values.visuals.world['smoke radius'].Color
			end
		end)
	end
end)
if RayIgnore:FindFirstChild('Fires') then
	RayIgnore:FindFirstChild('Fires').ChildAdded:Connect(function(fire)
		if values.visuals.world['molly radius'].Toggle then
			fire.Transparency = values.visuals.world['molly radius'].Transparency
			fire.Color = values.visuals.world['molly radius'].Color
		end
	end)
end
if RayIgnore:FindFirstChild('Smokes') then
	for _,smoke in pairs(RayIgnore:FindFirstChild('Smokes'):GetChildren()) do
		local OriginalRate = Instance.new('NumberValue')
		OriginalRate.Value = smoke.ParticleEmitter.Rate
		OriginalRate.Name = 'OriginalRate'
		OriginalRate.Parent = smoke
		smoke.Material = Enum.Material.ForceField
	end
	RayIgnore:FindFirstChild('Smokes').ChildAdded:Connect(function(smoke)
		RunService.RenderStepped:Wait()
		local OriginalRate = Instance.new('NumberValue')
		OriginalRate.Value = smoke.ParticleEmitter.Rate
		OriginalRate.Name = 'OriginalRate'
		OriginalRate.Parent = smoke
		if table.find(values.visuals.effects.removals.Jumbobox, 'smokes') then
			smoke.ParticleEmitter.Rate = 0
		end
		smoke.Material = Enum.Material.ForceField
		if values.visuals.world['smoke radius'].Toggle then
			smoke.Transparency = 0
			smoke.Color = values.visuals.world['smoke radius'].Color
		end
	end)
end

Camera.ChildAdded:Connect(function(obj)
	if table.find(values.misc.client['gun modifiers'].Jumbobox, 'ammo') then
		Client.ammocount = 999999
		Client.primarystored = 999999
		Client.ammocount2 = 999999
		Client.secondarystored = 999999
	end
	RunService.RenderStepped:Wait()
	if obj.Name ~= 'Arms' then return end
	local Model
	for i,v in pairs(obj:GetChildren()) do
		if v:IsA('Model') and (v:FindFirstChild('Right Arm') or v:FindFirstChild('Left Arm')) then
			Model = v
		end
	end
	if Model == nil then return end
	for i,v in pairs(obj:GetChildren()) do
		if (v:IsA('BasePart') or v:IsA('Part')) and v.Transparency ~= 1 and v.Name ~= 'Flash' then
			local valid = true
			if v:IsA('Part') and v:FindFirstChild('Mesh') and not v:IsA('BlockMesh') then
				valid = false
				local success, err = pcall(function()
					local OriginalTexture = Instance.new('StringValue')
					OriginalTexture.Value = v.Mesh.TextureId
					OriginalTexture.Name = 'OriginalTexture'
					OriginalTexture.Parent = v.Mesh
				end)
				local success2, err2 = pcall(function()
					local OriginalTexture = Instance.new('StringValue')
					OriginalTexture.Value = v.Mesh.TextureID
					OriginalTexture.Name = 'OriginalTexture'
					OriginalTexture.Parent = v.Mesh
				end)
				if success or success2 then valid = true end
			end

			for i2,v2 in pairs(v:GetChildren()) do
				if (v2:IsA('BasePart') or v2:IsA('Part')) then
					table.insert(WeaponObj, v2)
				end
			end

			if valid then
				table.insert(WeaponObj, v)
			end
		end
	end

	local gunname = Client.gun ~= 'none' and values.skins.knife['knife changer'].Toggle and Client.gun:FindFirstChild('Melee') and values.skins.knife.model.Scroll or Client.gun ~= 'none' and Client.gun.Name
	if values.skins.skins['skin changer'].Toggle and gunname ~= nil and Skins:FindFirstChild(gunname) then
		if values.skins.skins.skin.Scroll[gunname] ~= 'Inventory' then
			MapSkin(gunname, values.skins.skins.skin.Scroll[gunname])
		end
	end
	for _,v in pairs(WeaponObj) do
		if v:IsA('MeshPart') then
			local OriginalTexture = Instance.new('StringValue')
			OriginalTexture.Value = v.TextureID
			OriginalTexture.Name = 'OriginalTexture'
			OriginalTexture.Parent = v
		end

		local OriginalColor = Instance.new('Color3Value')
		OriginalColor.Value = v.Color
		OriginalColor.Name = 'OriginalColor'
		OriginalColor.Parent = v

		local OriginalMaterial = Instance.new('StringValue')
		OriginalMaterial.Value = v.Material.Name
		OriginalMaterial.Name = 'OriginalMaterial'
		OriginalMaterial.Parent = v

		if values.visuals.effects['weapon chams'].Toggle then
			UpdateWeapon(v)
		end
	end
	RArm = Model:FindFirstChild('Right Arm'); LArm = Model:FindFirstChild('Left Arm')
	if RArm then
		local OriginalColor = Instance.new('Color3Value')
		OriginalColor.Value = RArm.Color
		OriginalColor.Name = 'Color3Value'
		OriginalColor.Parent = RArm
		if values.visuals.effects['arm chams'].Toggle then
			RArm.Color = values.visuals.effects['arm chams'].Color
			RArm.Transparency = values.visuals.effects['arm chams'].Transparency
		end
		RGlove = RArm:FindFirstChild('Glove') or RArm:FindFirstChild('RGlove')
		if values.skins.glove['glove changer'].Toggle and Client.gun ~= 'none' then
			if RGlove then RGlove:Destroy() end
			RGlove = GloveModels[values.skins.glove.model.Dropdown].RGlove:Clone()
			RGlove.Mesh.TextureId = Gloves[values.skins.glove.model.Dropdown][values.skins.glove.model.Scroll[values.skins.glove.model.Dropdown]].Textures.TextureId
			RGlove.Parent = RArm
			RGlove.Transparency = 0
			RGlove.Welded.Part0 = RArm
		end
		if RGlove.Transparency == 1 then
			RGlove:Destroy()
			RGlove = nil
		else
			local GloveTexture = Instance.new('StringValue')
			GloveTexture.Value = RGlove.Mesh.TextureId
			GloveTexture.Name = 'StringValue'
			GloveTexture.Parent = RGlove

			if values.visuals.effects['accessory chams'].Toggle then
				UpdateAccessory(RGlove)
			end
		end
		RSleeve = RArm:FindFirstChild("Sleeve")
		if RSleeve ~= nil then
			if values.skins.misc["Remove sleeves"].Toggle then
			pcall(function()
			RSleeve.Transparency = 1 
			end)
			end
			local SleeveTexture = Instance.new("StringValue")
			SleeveTexture.Value = RSleeve.Mesh.TextureId
			SleeveTexture.Name = "StringValue"
			SleeveTexture.Parent = RSleeve
			if values.visuals.effects['arm chams'].Toggle then
				LArm.Color = values.visuals.effects['arm chams'].Color
				LArm.Transparency = values.visuals.effects['arm chams'].Transparency
			end
			if values.visuals.effects['accessory chams'].Toggle then
				UpdateAccessory(RSleeve)
			end
		end
	end
	if LArm then
		local OriginalColor = Instance.new('Color3Value')
		OriginalColor.Value = LArm.Color
		OriginalColor.Name = 'Color3Value'
		OriginalColor.Parent = LArm
		if values.visuals.effects['arm chams'].Toggle then
			LArm.Color = values.visuals.effects['arm chams'].Color
			LArm.Transparency = values.visuals.effects['arm chams'].Transparency
		end
		LGlove = LArm:FindFirstChild('Glove') or LArm:FindFirstChild('LGlove')
		if values.skins.glove['glove changer'].Toggle and Client.gun ~= 'none' then
			if LGlove then LGlove:Destroy() end
			LGlove = GloveModels[values.skins.glove.model.Dropdown].LGlove:Clone()
			LGlove.Mesh.TextureId = Gloves[values.skins.glove.model.Dropdown][values.skins.glove.model.Scroll[values.skins.glove.model.Dropdown]].Textures.TextureId
			LGlove.Transparency = 0
			LGlove.Parent = LArm
			LGlove.Welded.Part0 = LArm
		end
		if LGlove.Transparency == 1 then
			LGlove:Destroy()
			LGlove =  nil
		else
			local GloveTexture = Instance.new('StringValue')
			GloveTexture.Value = LGlove.Mesh.TextureId
			GloveTexture.Name = 'StringValue'
			GloveTexture.Parent = LGlove

			if values.visuals.effects['accessory chams'].Toggle then
				UpdateAccessory(LGlove)
			end
		end
		LSleeve = LArm:FindFirstChild("Sleeve")
		if LSleeve ~= nil then
			if values.skins.misc["Remove sleeves"].Toggle then
			pcall(function()
			LSleeve.Transparency = 1
			end)
			end
			local SleeveTexture = Instance.new("StringValue")
			SleeveTexture.Value = LSleeve.Mesh.TextureId
			SleeveTexture.Name = "StringValue"
			SleeveTexture.Parent = LSleeve

			if values.visuals.effects["accessory chams"].Toggle then
				UpdateAccessory(LSleeve)
			end
		end
	end
end)

Camera.ChildAdded:Connect(function(obj)
	if obj.Name == 'Arms' then
		RArm, LArm, RGlove, RSleeve, LGlove, LSleeve = nil, nil, nil, nil, nil, nil
		WeaponObj = {}
	end
end)

Camera:GetPropertyChangedSignal('FieldOfView'):Connect(function(fov)
	if LocalPlayer.Character == nil then return end
	if fov == values.visuals.self['fov changer'].Slider then return end
	if values.visuals.self['on scope'].Toggle or not LocalPlayer.Character:FindFirstChild('AIMING') then
		Camera.FieldOfView = values.visuals.self['fov changer'].Slider
	end
end)

LocalPlayer.Cash:GetPropertyChangedSignal('Value'):Connect(function(cash)
	if values.misc.client['infinite cash'].Toggle and cash ~= 8000 then
		LocalPlayer.Cash.Value = 8000
	end
end)

if workspace:FindFirstChild('Map') and workspace:FindFirstChild('Map'):FindFirstChild('Origin') then
	if workspace.Map.Origin.Value == 'de_cache' or workspace.Map.Origin.Value == 'de_vertigo' or workspace.Map.Origin.Value == 'de_nuke' or workspace.Map.Origin.Value == 'de_aztec' then
		oldSkybox = Lighting:FindFirstChildOfClass('Sky'):Clone()
	end
end

workspace.ChildAdded:Connect(function(obj)
	if obj.Name == 'Map' then
		wait(5)
		if values.misc.client['remove killers'].Toggle then
			if workspace:FindFirstChild('Map') and workspace:FindFirstChild('Map'):FindFirstChild('Killers') then
				local clone = workspace:FindFirstChild('Map'):FindFirstChild('Killers'):Clone()
				clone.Name = 'KillersClone'
				clone.Parent = workspace:FindFirstChild('Map')

				workspace:FindFirstChild('Map'):FindFirstChild('Killers'):Destroy()
			end
		end
		if oldSkybox ~= nil then
			oldSkybox:Destroy()
			oldSkybox = nil
		end
		local Origin = workspace.Map:WaitForChild('Origin')
		if workspace.Map.Origin.Value == 'de_cache' or workspace.Map.Origin.Value == 'de_vertigo' or workspace.Map.Origin.Value == 'de_nuke' or workspace.Map.Origin.Value == 'de_aztec' then
			oldSkybox = Lighting:FindFirstChildOfClass('Sky'):Clone()

			local sky = values.visuals.world.skybox.Dropdown
			if sky ~= 'none' then
				Lighting:FindFirstChildOfClass('Sky'):Destroy()
				local skybox = Instance.new('Sky')
				skybox.SkyboxLf = Skyboxes[sky].SkyboxLf
				skybox.SkyboxBk = Skyboxes[sky].SkyboxBk
				skybox.SkyboxDn = Skyboxes[sky].SkyboxDn
				skybox.SkyboxFt = Skyboxes[sky].SkyboxFt
				skybox.SkyboxRt = Skyboxes[sky].SkyboxRt
				skybox.SkyboxUp = Skyboxes[sky].SkyboxUp
				skybox.Name = 'override'
				skybox.Parent = Lighting
			end
		else
			local sky = values.visuals.world.skybox.Dropdown
			if sky ~= 'none' then
				local skybox = Instance.new('Sky')
				skybox.SkyboxLf = Skyboxes[sky].SkyboxLf
				skybox.SkyboxBk = Skyboxes[sky].SkyboxBk
				skybox.SkyboxDn = Skyboxes[sky].SkyboxDn
				skybox.SkyboxFt = Skyboxes[sky].SkyboxFt
				skybox.SkyboxRt = Skyboxes[sky].SkyboxRt
				skybox.SkyboxUp = Skyboxes[sky].SkyboxUp
				skybox.Name = 'override'
				skybox.Parent = Lighting
			end
		end
	end
end)

Lighting.ChildAdded:Connect(function(obj)
	if obj:IsA('Sky') and obj.Name ~= 'override' then
		oldSkybox = obj:Clone()
	end
end)

local function CollisionTBL(obj)
	if obj:IsA('Accessory') then
		table.insert(Collision, obj)
	end
	if obj:IsA('Part') then
		if obj.Name == 'HeadHB' or obj.Name == 'FakeHead' then
			table.insert(Collision, obj)
		end
	end
end
LocalPlayer.CharacterRemoving:Connect(function(char)
	allowedtofreeze = false
end)
LocalPlayer.CharacterAdded:Connect(function(char)
	allowedtofreeze = false
	repeat RunService.RenderStepped:Wait()
	until char:FindFirstChild('Gun')
	SelfObj = {}
	if values.skins.characters['character changer'].Toggle then
		ChangeCharacter(ChrModels:FindFirstChild(values.skins.characters.skin.Scroll))
	end
	if char:FindFirstChildOfClass('Shirt') then
		local String = Instance.new('StringValue')
		String.Name = 'OriginalTexture'
		String.Value = char:FindFirstChildOfClass('Shirt').ShirtTemplate
		String.Parent = char:FindFirstChildOfClass('Shirt')

		if table.find(values.visuals.effects.removals.Jumbobox, 'clothes') then
			char:FindFirstChildOfClass('Shirt').ShirtTemplate = ''
		end
	end
	if char:FindFirstChildOfClass('Pants') then
		local String = Instance.new('StringValue')
		String.Name = 'OriginalTexture'
		String.Value = char:FindFirstChildOfClass('Pants').PantsTemplate
		String.Parent = char:FindFirstChildOfClass('Pants')

		if table.find(values.visuals.effects.removals.Jumbobox, 'clothes') then
			char:FindFirstChildOfClass('Pants').PantsTemplate = ''
		end
	end
	if values.misc.animations.enabled.Toggle then
		wait(1)
		if LoadedAnim then 
			savedanimationdance = Dance
			LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
			LoadedAnim.Priority = Enum.AnimationPriority.Action
			LoadedAnim:Play()
			LoadedAnim:AdjustSpeed(values.misc.animations['animation speed'].Slider)
		end
	end
	for i,v in pairs(char:GetChildren()) do
		if v:IsA('BasePart') and v.Transparency ~= 1 then
			table.insert(SelfObj, v)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = v.Color
			Color.Parent = v

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = v.Material.Name
			String.Parent = v
		elseif v:IsA('Accessory') and v.Handle.Transparency ~= 1 then
			table.insert(SelfObj, v.Handle)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = v.Handle.Color
			Color.Parent = v.Handle

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = v.Handle.Material.Name
			String.Parent = v.Handle
		end
	end
	if values.visuals.self['self chams'].Toggle then
		for _,obj in pairs(SelfObj) do
			if obj.Parent ~= nil then
				obj.Material = values.visuals.self['self material'].Dropdown
				obj.Color = values.visuals.self['self chams'].Color
			end
		end
	end
	allowedtofreeze = true
	LocalPlayer.Character.ChildAdded:Connect(function(Child)
		if Child:IsA('Accessory') and Child.Handle.Transparency ~= 1 then
			table.insert(SelfObj, Child.Handle)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = Child.Handle.Color
			Color.Parent = Child.Handle

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = Child.Handle.Material.Name
			String.Parent = Child.Handle

			if values.visuals.self['self chams'].Toggle then
				for _,obj in pairs(SelfObj) do
					if obj.Parent ~= nil then
				obj.Material = values.visuals.self['self material'].Dropdown
				obj.Color = values.visuals.self['self chams'].Color
					end
				end
			end
		end
	end)
end)

if LocalPlayer.Character ~= nil then
	for i,v in pairs(LocalPlayer.Character:GetChildren()) do
		if v:IsA('BasePart') and v.Transparency ~= 1 then
			table.insert(SelfObj, v)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = v.Color
			Color.Parent = v

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = v.Material.Name
			String.Parent = v
		elseif v:IsA('Accessory') and v.Handle.Transparency ~= 1 then
			table.insert(SelfObj, v.Handle)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = v.Handle.Color
			Color.Parent = v.Handle

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = v.Handle.Material.Name
			String.Parent = v.Handle
		end
	end
	if values.visuals.self['self chams'].Toggle then
		for _,obj in pairs(SelfObj) do
			if obj.Parent ~= nil then
				obj.Material = values.visuals.self['self material'].Dropdown
				obj.Color = values.visuals.self['self chams'].Color
			end
		end
	end
	LocalPlayer.Character.ChildAdded:Connect(function(Child)
		if Child:IsA('Accessory') and Child.Handle.Transparency ~= 1 then
			table.insert(SelfObj, Child.Handle)
			local Color = Instance.new('Color3Value')
			Color.Name = 'OriginalColor'
			Color.Value = Child.Handle.Color
			Color.Parent = Child.Handle

			local String = Instance.new('StringValue')
			String.Name = 'OriginalMaterial'
			String.Value = Child.Handle.Material.Name
			String.Parent = Child.Handle

			if values.visuals.self['self chams'].Toggle then
				for _,obj in pairs(SelfObj) do
					if obj.Parent ~= nil then
						obj.Material = values.visuals.self['self material'].Dropdown
						obj.Color = values.visuals.self['self chams'].Color
					end
				end
			end
		end
	end)
end
--[[
Players.PlayerAdded:Connect(function(Player)
	Player:GetPropertyChangedSignal("Team"):Connect(function(new)
		wait()
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == "VisibleCham" then
					if values.visuals.players["visible chams"].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Color or values.visuals.players["visible chams"].Color) 
					Obj.Transparency = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Transparency or values.visuals.players["visible chams"].Transparency)
				end
			end
		end
	end)
    Player.CharacterAdded:Connect(function(Character)
        Character.ChildAdded:Connect(function(obj)
            wait(1)
			CollisionTBL(obj)
        end)
		wait(1)
		if Character ~= nil then
			local Value = Instance.new('Vector3Value')
			Value.Name = 'OldPosition'
			Value.Value = Character.HumanoidRootPart.Position
			Value.Parent = Character.HumanoidRootPart
			for _,obj in pairs(Character:GetChildren()) do
				if obj:IsA('BasePart') and Player ~= LocalPlayer and obj.Name ~= 'HumanoidRootPart' and obj.Name ~= 'Head' and obj.Name ~= 'BackC4' and obj.Name ~= 'HeadHB' then
					local VisibleCham
					if obj.Name == 'FakeHead' then 
						VisibleCham = Instance.new('CylinderHandleAdornment')
						VisibleCham.Height = 1.2 + (values.visuals.players['vcham thickness'].Slider/30)
						VisibleCham.Radius = 0.61 + (values.visuals.players['vcham thickness'].Slider/20)
						VisibleCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0)
					else 
						VisibleCham = Instance.new('BoxHandleAdornment')
						VisibleCham.Size = obj.Size + Vector3.new( (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10))
					end
					VisibleCham.Name = 'VisibleCham'
					VisibleCham.AlwaysOnTop = false
					VisibleCham.ZIndex = 8
					VisibleCham.AlwaysOnTop = false
					VisibleCham.Transparency = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Transparency or values.visuals.players["visible chams"].Transparency)

					local WallCham
					if obj.Name == 'FakeHead' then 
						WallCham = Instance.new('CylinderHandleAdornment')
						WallCham.Height = 1.2 + (values.visuals.players['cham thickness'].Slider/20)
						WallCham.Radius = 0.61 + (values.visuals.players['cham thickness'].Slider/20)
						WallCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0) 
					else 
						WallCham = Instance.new('BoxHandleAdornment')
						WallCham.Size = obj.Size + Vector3.new( (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10))
					end
					WallCham.Name = 'WallCham'
					WallCham.AlwaysOnTop = true
					WallCham.ZIndex = 5
					WallCham.AlwaysOnTop = true
					WallCham.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)

					if values.visuals.players.chams.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							WallCham.Visible = true
						else
							WallCham.Visible = false
						end
					else
						WallCham.Visible = false
					end

					if values.visuals.players['visible chams'].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							VisibleCham.Visible = true
						else
							VisibleCham.Visible = false
						end
					else
						VisibleCham.Visible = false
					end

					table.insert(ChamItems, {VisibleCham, obj})
					table.insert(ChamItems, {WallCham, obj})

					VisibleCham.Color3 = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Color or values.visuals.players["visible chams"].Color) 
					WallCham.Color3 = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Color or values.visuals.players.chams.Color)
	
					VisibleCham.Transparency = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Transparency or values.visuals.players["visible chams"].Transparency)
					WallCham.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)
			
					VisibleCham.AdornCullingMode = 'Never'
					WallCham.AdornCullingMode = 'Never'

					VisibleCham.Adornee = obj
					VisibleCham.Parent = obj

					WallCham.Adornee = obj
					WallCham.Parent = obj
				end
			end
		end
	end)
end)
for _,Player in pairs(Players:GetPlayers()) do
	if Player ~= LocalPlayer then
		Player:GetPropertyChangedSignal("Team"):Connect(function(new)
			wait()
			if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
				for _2,Obj in pairs(Player.Character:GetDescendants()) do
					if Obj.Name == "VisibleCham" then
						if values.visuals.players["visible chams"].Toggle then
							if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
								Obj.Visible = true
							else
								Obj.Visible = false
							end
						else
							Obj.Visible = false
						end
						Obj.Color3 = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Color or values.visuals.players["visible chams"].Color) 
						Obj.Transparency = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Transparency or values.visuals.players["visible chams"].Transparency)
					end
				end
			end
		end)
	else
		LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function(new)
			wait()
			for _,Player in pairs(Players:GetPlayers()) do
				if Player.Character then
					for _2,Obj in pairs(Player.Character:GetDescendants()) do
						if Obj.Name == "VisibleCham" then
							if values.visuals.players["visible chams"].Toggle then
								if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
									Obj.Visible = true
								else
									Obj.Visible = false
								end
							else
								Obj.Visible = false
							end
							Obj.Color3 = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Color or values.visuals.players["visible chams"].Color) 
							Obj.Transparency = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Transparency or values.visuals.players["visible chams"].Transparency)
						end
					end
				end
			end
		end)
	end
	Player.CharacterAdded:Connect(function(Character)
        Character.ChildAdded:Connect(function(obj)
            wait(1)
			CollisionTBL(obj)
        end)
		wait(1)
		if Player.Character ~= nil and Player.Character:FindFirstChild("HumanoidRootPart") then
			local Value = Instance.new('Vector3Value')
			Value.Value = Player.Character.HumanoidRootPart.Position
			Value.Name = 'OldPosition'
			Value.Parent = Player.Character.HumanoidRootPart
			for _,obj in pairs(Player.Character:GetChildren()) do
				if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then
					local VisibleCham = Instance.new("BoxHandleAdornment")
					VisibleCham.Name = "VisibleCham"
					VisibleCham.AlwaysOnTop = false
					VisibleCham.ZIndex = 5
					VisibleCham.Size = obj.Size + Vector3.new(0.18,0.18,0.18)
					VisibleCham.AlwaysOnTop = false
					VisibleCham.Transparency = 0.05


					if values.visuals.players["visible chams"].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							VisibleCham.Visible = true
						else
							VisibleCham.Visible = false
						end
					else
						VisibleCham.Visible = false
					end

					table.insert(ChamItems, VisibleCham)

					VisibleCham.Color3 = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Color or values.visuals.players["visible chams"].Color) 
					VisibleCham.Transparency = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Transparency or values.visuals.players["visible chams"].Transparency)

					VisibleCham.AdornCullingMode = "Never"

					VisibleCham.Adornee = obj
					VisibleCham.Parent = obj
				end
			end
		end
    end)
	if Player.Character ~= nil and Player.Character:FindFirstChild("UpperTorso") then
			local Value = Instance.new('Vector3Value')
			Value.Value = Player.Character.HumanoidRootPart.Position
			Value.Name = 'OldPosition'
			Value.Parent = Player.Character.HumanoidRootPart
		for _,obj in pairs(Player.Character:GetChildren()) do
			CollisionTBL(obj)
			if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then
				local VisibleCham = Instance.new("BoxHandleAdornment")
				VisibleCham.Name = "VisibleCham"
				VisibleCham.AlwaysOnTop = false
				VisibleCham.ZIndex = 5
				VisibleCham.Size = obj.Size + Vector3.new(0.18,0.18,0.18)
				VisibleCham.AlwaysOnTop = false
				VisibleCham.Transparency = 0.05


				if values.visuals.players["visible chams"].Toggle then
					if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
						VisibleCham.Visible = true
					else
						VisibleCham.Visible = false
					end
				else
					VisibleCham.Visible = false
				end

				table.insert(ChamItems, VisibleCham)

				VisibleCham.Color3 = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Color or values.visuals.players["visible chams"].Color) 
				VisibleCham.Transparency = (values.rage["Loop kill"]['Target Vchams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Vchams'].Transparency or values.visuals.players["visible chams"].Transparency)

				VisibleCham.AdornCullingMode = "Never"

				VisibleCham.Adornee = obj
				VisibleCham.Parent = obj
			end
		end
	end
end

Players.PlayerAdded:Connect(function(Player)
	Player:GetPropertyChangedSignal("Team"):Connect(function(new)
		wait()
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == "WallCham" then
					if values.visuals.players["chams"].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Color or values.visuals.players.chams.Color)
					Obj.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)
				end
			end
		end
	end)
    Player.CharacterAdded:Connect(function(Character)
        Character.ChildAdded:Connect(function(obj)
            wait(1)
			CollisionTBL(obj)
        end)
		wait(1)
		if Character ~= nil then
			local Value = Instance.new('Vector3Value')
			Value.Value = Player.Character.HumanoidRootPart.Position
			Value.Name = 'OldPosition'
			Value.Parent = Player.Character.HumanoidRootPart
			for _,obj in pairs(Character:GetChildren()) do
				if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then

					local WallCham = Instance.new("BoxHandleAdornment")
					WallCham.Name = "WallCham"
					WallCham.AlwaysOnTop = true
					WallCham.ZIndex = 5
					WallCham.Size = obj.Size + Vector3.new(0.08,0.08,0.08)
					WallCham.AlwaysOnTop = true
					WallCham.Transparency = 0

					if values.visuals.players["chams"].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							WallCham.Visible = true
						else
							WallCham.Visible = false
						end
					else
						WallCham.Visible = false
					end

					table.insert(ChamItems, WallCham)

					WallCham.Color3 = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Color or values.visuals.players.chams.Color)
					WallCham.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)

					WallCham.AdornCullingMode = "Never"

					WallCham.Adornee = obj
					WallCham.Parent = obj
				end
			end
		end
    end)
end)
for _,Player in pairs(Players:GetPlayers()) do
	if Player ~= LocalPlayer then
		Player:GetPropertyChangedSignal("Team"):Connect(function(new)
			wait()
			if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
				for _2,Obj in pairs(Player.Character:GetDescendants()) do
					if Obj.Name == "WallCham" then
						if values.visuals.players["chams"].Toggle then
							if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
								Obj.Visible = true
							else
								Obj.Visible = false
							end
						else
							Obj.Visible = false
						end
						Obj.Color3 = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Color or values.visuals.players.chams.Color)
						Obj.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)
					end
				end
			end
		end)
	else
		LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function(new)
			wait()
			for _,Player in pairs(Players:GetPlayers()) do
				if Player.Character then
					for _2,Obj in pairs(Player.Character:GetDescendants()) do
						if Obj.Name == "WallCham" then
							if values.visuals.players["chams"].Toggle then
								if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
									Obj.Visible = true
								else
									Obj.Visible = false
								end
							else
								Obj.Visible = false
							end
							Obj.Color3 = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Color or values.visuals.players.chams.Color)
							Obj.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)
						end
					end
				end
			end
		end)
	end
	Player.CharacterAdded:Connect(function(Character)
        Character.ChildAdded:Connect(function(obj)
            wait(1)
			CollisionTBL(obj)
        end)
		wait(1)
		if Player.Character ~= nil and Player.Character:FindFirstChild("HumanoidRootPart") then
			local Value = Instance.new('Vector3Value')
			Value.Value = Player.Character.HumanoidRootPart.Position
			Value.Name = 'OldPosition'
			Value.Parent = Player.Character.HumanoidRootPart
			for _,obj in pairs(Player.Character:GetChildren()) do
				if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then

					local WallCham = Instance.new("BoxHandleAdornment")
					WallCham.Name = "WallCham"
					WallCham.AlwaysOnTop = true
					WallCham.ZIndex = 5
					WallCham.Size = obj.Size + Vector3.new(0.08,0.08,0.08)
					WallCham.AlwaysOnTop = true
					WallCham.Transparency = 0

					if values.visuals.players["chams"].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							WallCham.Visible = true
						else
							WallCham.Visible = false
						end
					else
						WallCham.Visible = false
					end

					table.insert(ChamItems, WallCham)

					WallCham.Color3 = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Color or values.visuals.players.chams.Color)
					WallCham.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)

					WallCham.AdornCullingMode = "Never"

					WallCham.Adornee = obj
					WallCham.Parent = obj
				end
			end
		end
    end)
	if Player.Character ~= nil and Player.Character:FindFirstChild("UpperTorso") then
		local Value = Instance.new("Vector3Value")
		Value.Name = "OldPosition"
		Value.Value = Player.Character.HumanoidRootPart.Position
		Value.Parent = Player.Character.HumanoidRootPart
		for _,obj in pairs(Player.Character:GetChildren()) do
			CollisionTBL(obj)
			if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then

				local WallCham = Instance.new("BoxHandleAdornment")
				WallCham.Name = "WallCham"
				WallCham.AlwaysOnTop = true
				WallCham.ZIndex = 5
				WallCham.Size = obj.Size + Vector3.new(0.08,0.08,0.08)
				WallCham.AlwaysOnTop = true
				WallCham.Transparency = 0

				if values.visuals.players["chams"].Toggle then
					if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
						WallCham.Visible = true
					else
						WallCham.Visible = false
					end
				else
					WallCham.Visible = false
				end

				table.insert(ChamItems, WallCham)

				WallCham.Color3 = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Color or values.visuals.players.chams.Color)
				WallCham.Transparency = (values.rage["Loop kill"]['Target Chams'].Toggle and Player.Name == values.rage["Loop kill"]['Player'].Dropdown and values.rage["Loop kill"]['Target Chams'].Transparency or values.visuals.players['chams'].Transparency)

				WallCham.AdornCullingMode = "Never"

				WallCham.Adornee = obj
				WallCham.Parent = obj
			end
		end
	end
end
]]--

Players.PlayerAdded:Connect(function(Player)
	Player:GetPropertyChangedSignal('Team'):Connect(function(new)
		wait()
		if Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == 'VisibleCham' or Obj.Name == 'WallCham' then
					if values.visuals.players.chams.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Transparency = values.visuals.players.chams.Transparency
					Obj.Color3 = values.visuals.players.chams.Color
				end
			end
		end
	end)
	Player.CharacterAdded:Connect(function(Character)
		Character.ChildAdded:Connect(function(obj)
			wait(1)
			CollisionTBL(obj)
		end)
		wait(1)
		if Character ~= nil then
			local Value = Instance.new('Vector3Value')
			Value.Name = 'OldPosition'
			Value.Value = Character.HumanoidRootPart.Position
			Value.Parent = Character.HumanoidRootPart
			for _,obj in pairs(Character:GetChildren()) do
				if obj:IsA('BasePart') and Player ~= LocalPlayer and obj.Name ~= 'HumanoidRootPart' and obj.Name ~= 'Head' and obj.Name ~= 'BackC4' and obj.Name ~= 'HeadHB' then
					local VisibleCham
					if obj.Name == 'FakeHead' then 
						VisibleCham = Instance.new('CylinderHandleAdornment')
						VisibleCham.Height = 1.2 + (values.visuals.players['vcham thickness'].Slider/30)
						VisibleCham.Radius = 0.61 + (values.visuals.players['vcham thickness'].Slider/20)
						VisibleCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0)
					else 
						VisibleCham = Instance.new('BoxHandleAdornment')
						VisibleCham.Size = obj.Size + Vector3.new( (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10))
					end
					VisibleCham.Name = 'VisibleCham'
					VisibleCham.AlwaysOnTop = false
					VisibleCham.ZIndex = 8
					VisibleCham.AlwaysOnTop = false
					VisibleCham.Transparency = values.visuals.players['visible chams'].Transparency

					local WallCham
					if obj.Name == 'FakeHead' then 
						WallCham = Instance.new('CylinderHandleAdornment')
						WallCham.Height = 1.2 + (values.visuals.players['cham thickness'].Slider/20)
						WallCham.Radius = 0.61 + (values.visuals.players['cham thickness'].Slider/20)
						WallCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0) 
					else 
						WallCham = Instance.new('BoxHandleAdornment')
						WallCham.Size = obj.Size + Vector3.new( (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10))
					end
					WallCham.Name = 'WallCham'
					WallCham.AlwaysOnTop = true
					WallCham.ZIndex = 5
					WallCham.AlwaysOnTop = true
					WallCham.Transparency = values.visuals.players.chams.Transparency

					if values.visuals.players.chams.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							WallCham.Visible = true
						else
							WallCham.Visible = false
						end
					else
						WallCham.Visible = false
					end

					if values.visuals.players['visible chams'].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							VisibleCham.Visible = true
						else
							VisibleCham.Visible = false
						end
					else
						VisibleCham.Visible = false
					end

					table.insert(ChamItems, {VisibleCham, obj})
					table.insert(ChamItems, {WallCham, obj})

					VisibleCham.Color3 = values.visuals.players['visible chams'].Color
					WallCham.Color3 = values.visuals.players.chams.Color
	
					VisibleCham.Transparency = values.visuals.players['visible chams'].Transparency
					WallCham.Transparency = values.visuals.players.chams.Transparency
			
					VisibleCham.AdornCullingMode = 'Never'
					WallCham.AdornCullingMode = 'Never'

					VisibleCham.Adornee = obj
					VisibleCham.Parent = obj

					WallCham.Adornee = obj
					WallCham.Parent = obj
				end
			end
		end
	end)
end)

for _,Player in pairs(Players:GetPlayers()) do
	if Player ~= LocalPlayer then
		Player:GetPropertyChangedSignal('Team'):Connect(function(new)
			wait()
			if Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') then
				for _2,Obj in pairs(Player.Character:GetDescendants()) do
					if Obj.Name == 'VisibleCham' or Obj.Name == 'WallCham' then
						if values.visuals.players.chams.Toggle then
							if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
								Obj.Visible = true
							else
								Obj.Visible = false
							end
						else
							Obj.Visible = false
						end
						Obj.Color3 = values.visuals.players.chams.Color
						Obj.Transparency = values.visuals.players['visible chams'].Transparency
					end
				end
			end
		end)
	else
		LocalPlayer:GetPropertyChangedSignal('Team'):Connect(function(new)
			wait()
			for _,Player in pairs(Players:GetPlayers()) do
				if Player.Character then
					for _2,Obj in pairs(Player.Character:GetDescendants()) do
						if Obj.Name == 'VisibleCham' or Obj.Name == 'WallCham' then
							if values.visuals.players.chams.Toggle then
								if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
									Obj.Visible = true
								else
									Obj.Visible = false
								end
							else
								Obj.Visible = false
							end
							Obj.Color3 = values.visuals.players.chams.Color
							Obj.Transparency = values.visuals.players.chams.Transparency
						end
					end
				end
			end
		end)
	end
	Player.CharacterAdded:Connect(function(Character)
		Character.ChildAdded:Connect(function(obj)
			wait(1)
			CollisionTBL(obj)
		end)
		wait(1)
		if Player.Character ~= nil and Player.Character:FindFirstChild('HumanoidRootPart') then
			local Value = Instance.new('Vector3Value')
			Value.Value = Player.Character.HumanoidRootPart.Position
			Value.Name = 'OldPosition'
			Value.Parent = Player.Character.HumanoidRootPart
			for _,obj in pairs(Player.Character:GetChildren()) do
				if obj:IsA('BasePart') and Player ~= LocalPlayer and obj.Name ~= 'HumanoidRootPart' and obj.Name ~= 'Head' and obj.Name ~= 'BackC4' and obj.Name ~= 'HeadHB' then

					local VisibleCham
					if obj.Name == 'FakeHead' then 
						VisibleCham = Instance.new('CylinderHandleAdornment')
						VisibleCham.Height = 1.2 + (values.visuals.players['vcham thickness'].Slider/30)
						VisibleCham.Radius = 0.61 + (values.visuals.players['vcham thickness'].Slider/20)
						VisibleCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0)
					else 
						VisibleCham = Instance.new('BoxHandleAdornment')
						VisibleCham.Size = obj.Size + Vector3.new( (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10))
					end
					VisibleCham.Name = 'VisibleCham'
					VisibleCham.AlwaysOnTop = false
					VisibleCham.ZIndex = 5
					VisibleCham.AlwaysOnTop = false
					VisibleCham.Transparency = 0
					
					local WallCham
					if obj.Name == 'FakeHead' then 
						WallCham = Instance.new('CylinderHandleAdornment')
						WallCham.Height = 1.2 + (values.visuals.players['cham thickness'].Slider/20)
						WallCham.Radius = 0.61 + (values.visuals.players['cham thickness'].Slider/20)
						WallCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0)
					else 
						WallCham = Instance.new('BoxHandleAdornment')
						WallCham.Size = obj.Size + Vector3.new( (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10))
					end
					WallCham.Name = 'WallCham'
					WallCham.AlwaysOnTop = true
					WallCham.ZIndex = 5
					WallCham.AlwaysOnTop = true
					WallCham.Transparency = 0.7


					if values.visuals.players.chams.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							WallCham.Visible = true
						else
							WallCham.Visible = false
						end
					else
						WallCham.Visible = false
					end

					if values.visuals.players['visible chams'].Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							VisibleCham.Visible = true
						else
							VisibleCham.Visible = false
						end
					else
						VisibleCham.Visible = false
					end

					table.insert(ChamItems, {VisibleCham, obj})
					table.insert(ChamItems, {WallCham, obj})

					VisibleCham.Color3 = values.visuals.players['visible chams'].Color
					WallCham.Color3 = values.visuals.players.chams.Color
	
					VisibleCham.Transparency = values.visuals.players['visible chams'].Transparency
					WallCham.Transparency = values.visuals.players.chams.Transparency

					VisibleCham.AdornCullingMode = 'Never'
					WallCham.AdornCullingMode = 'Never'

					VisibleCham.Adornee = obj
					VisibleCham.Parent = obj

					WallCham.Adornee = obj
					WallCham.Parent = obj
				end
			end
		end
	end)
	if Player.Character ~= nil and Player.Character:FindFirstChild('UpperTorso') then
		local Value = Instance.new('Vector3Value')
		Value.Name = 'OldPosition'
		Value.Value = Player.Character.HumanoidRootPart.Position
		Value.Parent = Player.Character.HumanoidRootPart
		for _,obj in pairs(Player.Character:GetChildren()) do
			CollisionTBL(obj)
			if obj:IsA('BasePart') and Player ~= LocalPlayer and obj.Name ~= 'HumanoidRootPart' and obj.Name ~= 'Head' and obj.Name ~= 'BackC4' and obj.Name ~= 'HeadHB' then
				
				local VisibleCham
				if obj.Name == 'FakeHead' then 
					VisibleCham = Instance.new('CylinderHandleAdornment')
					VisibleCham.Height = 1.2 + (values.visuals.players['vcham thickness'].Slider/30)
					VisibleCham.Radius = 0.61 + (values.visuals.players['vcham thickness'].Slider/20)
					VisibleCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0)
				else 
					VisibleCham = Instance.new('BoxHandleAdornment')
					VisibleCham.Size = obj.Size +  Vector3.new( (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10),  (values.visuals.players['vcham thickness'].Slider/10))
				end
				VisibleCham.Name = 'VisibleCham'
				VisibleCham.AlwaysOnTop = false
				VisibleCham.ZIndex = 5
				VisibleCham.AlwaysOnTop = false
				VisibleCham.Transparency = 0

				local WallCham
				if obj.Name == 'FakeHead' then 
					WallCham = Instance.new('CylinderHandleAdornment')
					WallCham.Height = 1.2 + (values.visuals.players['cham thickness'].Slider/20)
					WallCham.Radius = 0.61 + (values.visuals.players['cham thickness'].Slider/20)
					WallCham.CFrame = CFrame.new(0,0,0) * CFrame.Angles(1.6,0,0)
				else 
					WallCham = Instance.new('BoxHandleAdornment')
					WallCham.Size = obj.Size + Vector3.new( (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10),  (values.visuals.players['cham thickness'].Slider/10))
				end
				WallCham.Name = 'WallCham'
				WallCham.AlwaysOnTop = true
				WallCham.ZIndex = 5
				WallCham.AlwaysOnTop = true
				WallCham.Transparency = 0.7

				if values.visuals.players.chams.Toggle then
					if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
						VisibleCham.Visible = true
						WallCham.Visible = true
					else
						VisibleCham.Visible = false
						WallCham.Visible = false
					end
				else
					VisibleCham.Visible = false
					WallCham.Visible = false
				end

				if values.visuals.players.chams.Toggle then
					if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
						VisibleCham.Visible = true
						WallCham.Visible = true
					else
						VisibleCham.Visible = false
						WallCham.Visible = false
					end
				else
					VisibleCham.Visible = false
					WallCham.Visible = false
				end

				table.insert(ChamItems, {VisibleCham, obj})
				table.insert(ChamItems, {WallCham, obj})

				VisibleCham.Color3 = values.visuals.players['visible chams'].Color
				WallCham.Color3 = values.visuals.players.chams.Color

				VisibleCham.Transparency = values.visuals.players['visible chams'].Transparency
				WallCham.Transparency = values.visuals.players.chams.Transparency

				VisibleCham.AdornCullingMode = 'Never'
				WallCham.AdornCullingMode = 'Never'

				VisibleCham.Adornee = obj
				VisibleCham.Parent = obj

				WallCham.Adornee = obj
				WallCham.Parent = obj
			end
		end
	end
end
    wait(2.0)
	CreateHitElement(" Successfully loaded! ",Color3.fromRGB(0, 255, 68),2, 0, 340, 0, 22)
	wait(3.0)
	CreateHitElement(" Welcome "..game.Players.LocalPlayer.Name.." to new!  ",Color3.fromRGB(255, 255, 255),5, 0, 340, 0, 22)
	wait(0.5)
    if table.find(developers, LocalPlayer.Name) then
    	CreateHitElement("Reconized as script developer!",Color3.fromRGB(0, 229, 255),5, 0, 340, 0, 22)
    end
	if table.find(developers, LocalPlayer.Name) then
	    wait(0.5)
    end
	CreateHitElement(" Go in misc tab and set up keybind yourself. ",Color3.fromRGB(255, 255, 255),5, 0, 340, 0, 22)
    wait(6.0)
	CreateHitElement(" !!!  IMPORTANT  !!!\
  \
 This script is 98% pasted and\
 there are probably many bugs,\
 if you notice anything wrong,\
 report it to my discord! ",Color3.fromRGB(255, 41, 41),15, 0, 230, 0, 100)
    wait(0.5)
    CreateHitElement(" Discord invite link is in misc tab. ",Color3.fromRGB(86, 98, 246),10, 0, 230, 0, 22)
 
--local Players = game:GetService("Players") 
--local LocalPlayer = Players.LocalPlayer 

game:GetService("Players").PlayerAdded:Connect(function(plr)
	if table.find(developers, plr.Name) then
		CreateHitElement("Developer of script joined your game.",Color3.fromRGB(255, 255, 255),15, 0, 380, 0, 22)
	end
end)
